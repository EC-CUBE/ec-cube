export default"data:application/javascript;charset=utf-8;base64,YWNlLmRlZmluZSgiYWNlL21vZGUveG1sX2hpZ2hsaWdodF9ydWxlcyIsWyJyZXF1aXJlIiwiZXhwb3J0cyIsIm1vZHVsZSIsImFjZS9saWIvb29wIiwiYWNlL21vZGUvdGV4dF9oaWdobGlnaHRfcnVsZXMiXSwgZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7CiJ1c2Ugc3RyaWN0IjsKCnZhciBvb3AgPSByZXF1aXJlKCIuLi9saWIvb29wIik7CnZhciBUZXh0SGlnaGxpZ2h0UnVsZXMgPSByZXF1aXJlKCIuL3RleHRfaGlnaGxpZ2h0X3J1bGVzIikuVGV4dEhpZ2hsaWdodFJ1bGVzOwoKdmFyIFhtbEhpZ2hsaWdodFJ1bGVzID0gZnVuY3Rpb24obm9ybWFsaXplKSB7CiAgICB2YXIgdGFnUmVnZXggPSAiW186YS16QS1aXHhjMC1cdWZmZmZdWy1fOi5hLXpBLVowLTlceGMwLVx1ZmZmZl0qIjsKCiAgICB0aGlzLiRydWxlcyA9IHsKICAgICAgICBzdGFydCA6IFsKICAgICAgICAgICAge3Rva2VuIDogInN0cmluZy5jZGF0YS54bWwiLCByZWdleCA6ICI8XFwhXFxbQ0RBVEFcXFsiLCBuZXh0IDogImNkYXRhIn0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRva2VuIDogWyJwdW5jdHVhdGlvbi5pbnN0cnVjdGlvbi54bWwiLCAia2V5d29yZC5pbnN0cnVjdGlvbi54bWwiXSwKICAgICAgICAgICAgICAgIHJlZ2V4IDogIig8XFw/KSgiICsgdGFnUmVnZXggKyAiKSIsIG5leHQgOiAicHJvY2Vzc2luZ19pbnN0cnVjdGlvbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAge3Rva2VuIDogImNvbW1lbnQuc3RhcnQueG1sIiwgcmVnZXggOiAiPFxcIS0tIiwgbmV4dCA6ICJjb21tZW50In0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRva2VuIDogWyJ4bWwtcGUuZG9jdHlwZS54bWwiLCAieG1sLXBlLmRvY3R5cGUueG1sIl0sCiAgICAgICAgICAgICAgICByZWdleCA6ICIoPFxcISkoRE9DVFlQRSkoPz1bXFxzXSkiLCBuZXh0IDogImRvY3R5cGUiLCBjYXNlSW5zZW5zaXRpdmU6IHRydWUKICAgICAgICAgICAgfSwKICAgICAgICAgICAge2luY2x1ZGUgOiAidGFnIn0sCiAgICAgICAgICAgIHt0b2tlbiA6ICJ0ZXh0LmVuZC10YWctb3Blbi54bWwiLCByZWdleDogIjwvIn0sCiAgICAgICAgICAgIHt0b2tlbiA6ICJ0ZXh0LnRhZy1vcGVuLnhtbCIsIHJlZ2V4OiAiPCJ9LAogICAgICAgICAgICB7aW5jbHVkZSA6ICJyZWZlcmVuY2UifSwKICAgICAgICAgICAge2RlZmF1bHRUb2tlbiA6ICJ0ZXh0LnhtbCJ9CiAgICAgICAgXSwKCiAgICAgICAgcHJvY2Vzc2luZ19pbnN0cnVjdGlvbiA6IFt7CiAgICAgICAgICAgIHRva2VuIDogImVudGl0eS5vdGhlci5hdHRyaWJ1dGUtbmFtZS5kZWNsLWF0dHJpYnV0ZS1uYW1lLnhtbCIsCiAgICAgICAgICAgIHJlZ2V4IDogdGFnUmVnZXgKICAgICAgICB9LCB7CiAgICAgICAgICAgIHRva2VuIDogImtleXdvcmQub3BlcmF0b3IuZGVjbC1hdHRyaWJ1dGUtZXF1YWxzLnhtbCIsCiAgICAgICAgICAgIHJlZ2V4IDogIj0iCiAgICAgICAgfSwgewogICAgICAgICAgICBpbmNsdWRlOiAid2hpdGVzcGFjZSIKICAgICAgICB9LCB7CiAgICAgICAgICAgIGluY2x1ZGU6ICJzdHJpbmciCiAgICAgICAgfSwgewogICAgICAgICAgICB0b2tlbiA6ICJwdW5jdHVhdGlvbi54bWwtZGVjbC54bWwiLAogICAgICAgICAgICByZWdleCA6ICJcXD8+IiwKICAgICAgICAgICAgbmV4dCA6ICJzdGFydCIKICAgICAgICB9XSwKCiAgICAgICAgZG9jdHlwZSA6IFsKICAgICAgICAgICAge2luY2x1ZGUgOiAid2hpdGVzcGFjZSJ9LAogICAgICAgICAgICB7aW5jbHVkZSA6ICJzdHJpbmcifSwKICAgICAgICAgICAge3Rva2VuIDogInhtbC1wZS5kb2N0eXBlLnhtbCIsIHJlZ2V4IDogIj4iLCBuZXh0IDogInN0YXJ0In0sCiAgICAgICAgICAgIHt0b2tlbiA6ICJ4bWwtcGUueG1sIiwgcmVnZXggOiAiWy1fYS16QS1aMC05Ol0rIn0sCiAgICAgICAgICAgIHt0b2tlbiA6ICJwdW5jdHVhdGlvbi5pbnQtc3Vic2V0IiwgcmVnZXggOiAiXFxbIiwgcHVzaCA6ICJpbnRfc3Vic2V0In0KICAgICAgICBdLAoKICAgICAgICBpbnRfc3Vic2V0IDogW3sKICAgICAgICAgICAgdG9rZW4gOiAidGV4dC54bWwiLAogICAgICAgICAgICByZWdleCA6ICJcXHMrIgogICAgICAgIH0sIHsKICAgICAgICAgICAgdG9rZW46ICJwdW5jdHVhdGlvbi5pbnQtc3Vic2V0LnhtbCIsCiAgICAgICAgICAgIHJlZ2V4OiAiXSIsCiAgICAgICAgICAgIG5leHQ6ICJwb3AiCiAgICAgICAgfSwgewogICAgICAgICAgICB0b2tlbiA6IFsicHVuY3R1YXRpb24ubWFya3VwLWRlY2wueG1sIiwgImtleXdvcmQubWFya3VwLWRlY2wueG1sIl0sCiAgICAgICAgICAgIHJlZ2V4IDogIig8XFwhKSgiICsgdGFnUmVnZXggKyAiKSIsCiAgICAgICAgICAgIHB1c2ggOiBbewogICAgICAgICAgICAgICAgdG9rZW4gOiAidGV4dCIsCiAgICAgICAgICAgICAgICByZWdleCA6ICJcXHMrIgogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0b2tlbiA6ICJwdW5jdHVhdGlvbi5tYXJrdXAtZGVjbC54bWwiLAogICAgICAgICAgICAgICAgcmVnZXggOiAiPiIsCiAgICAgICAgICAgICAgICBuZXh0IDogInBvcCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAge2luY2x1ZGUgOiAic3RyaW5nIn1dCiAgICAgICAgfV0sCgogICAgICAgIGNkYXRhIDogWwogICAgICAgICAgICB7dG9rZW4gOiAic3RyaW5nLmNkYXRhLnhtbCIsIHJlZ2V4IDogIlxcXVxcXT4iLCBuZXh0IDogInN0YXJ0In0sCiAgICAgICAgICAgIHt0b2tlbiA6ICJ0ZXh0LnhtbCIsIHJlZ2V4IDogIlxccysifSwKICAgICAgICAgICAge3Rva2VuIDogInRleHQueG1sIiwgcmVnZXggOiAiKD86W15cXF1dfFxcXSg/IVxcXT4pKSsifQogICAgICAgIF0sCgogICAgICAgIGNvbW1lbnQgOiBbCiAgICAgICAgICAgIHt0b2tlbiA6ICJjb21tZW50LmVuZC54bWwiLCByZWdleCA6ICItLT4iLCBuZXh0IDogInN0YXJ0In0sCiAgICAgICAgICAgIHtkZWZhdWx0VG9rZW4gOiAiY29tbWVudC54bWwifQogICAgICAgIF0sCgogICAgICAgIHJlZmVyZW5jZSA6IFt7CiAgICAgICAgICAgIHRva2VuIDogImNvbnN0YW50Lmxhbmd1YWdlLmVzY2FwZS5yZWZlcmVuY2UueG1sIiwKICAgICAgICAgICAgcmVnZXggOiAiKD86JiNbMC05XSs7KXwoPzomI3hbMC05YS1mQS1GXSs7KXwoPzomW2EtekEtWjAtOV86XFwuLV0rOykiCiAgICAgICAgfV0sCgogICAgICAgIGF0dHJfcmVmZXJlbmNlIDogW3sKICAgICAgICAgICAgdG9rZW4gOiAiY29uc3RhbnQubGFuZ3VhZ2UuZXNjYXBlLnJlZmVyZW5jZS5hdHRyaWJ1dGUtdmFsdWUueG1sIiwKICAgICAgICAgICAgcmVnZXggOiAiKD86JiNbMC05XSs7KXwoPzomI3hbMC05YS1mQS1GXSs7KXwoPzomW2EtekEtWjAtOV86XFwuLV0rOykiCiAgICAgICAgfV0sCgogICAgICAgIHRhZyA6IFt7CiAgICAgICAgICAgIHRva2VuIDogWyJtZXRhLnRhZy5wdW5jdHVhdGlvbi50YWctb3Blbi54bWwiLCAibWV0YS50YWcucHVuY3R1YXRpb24uZW5kLXRhZy1vcGVuLnhtbCIsICJtZXRhLnRhZy50YWctbmFtZS54bWwiXSwKICAgICAgICAgICAgcmVnZXggOiAiKD86KDwpfCg8LykpKCg/OiIgKyB0YWdSZWdleCArICI6KT8iICsgdGFnUmVnZXggKyAiKSIsCiAgICAgICAgICAgIG5leHQ6IFsKICAgICAgICAgICAgICAgIHtpbmNsdWRlIDogImF0dHJpYnV0ZXMifSwKICAgICAgICAgICAgICAgIHt0b2tlbiA6ICJtZXRhLnRhZy5wdW5jdHVhdGlvbi50YWctY2xvc2UueG1sIiwgcmVnZXggOiAiLz8+IiwgbmV4dCA6ICJzdGFydCJ9CiAgICAgICAgICAgIF0KICAgICAgICB9XSwKCiAgICAgICAgdGFnX3doaXRlc3BhY2UgOiBbCiAgICAgICAgICAgIHt0b2tlbiA6ICJ0ZXh0LnRhZy13aGl0ZXNwYWNlLnhtbCIsIHJlZ2V4IDogIlxccysifQogICAgICAgIF0sCiAgICAgICAgd2hpdGVzcGFjZSA6IFsKICAgICAgICAgICAge3Rva2VuIDogInRleHQud2hpdGVzcGFjZS54bWwiLCByZWdleCA6ICJcXHMrIn0KICAgICAgICBdLAogICAgICAgIHN0cmluZzogW3sKICAgICAgICAgICAgdG9rZW4gOiAic3RyaW5nLnhtbCIsCiAgICAgICAgICAgIHJlZ2V4IDogIiciLAogICAgICAgICAgICBwdXNoIDogWwogICAgICAgICAgICAgICAge3Rva2VuIDogInN0cmluZy54bWwiLCByZWdleDogIiciLCBuZXh0OiAicG9wIn0sCiAgICAgICAgICAgICAgICB7ZGVmYXVsdFRva2VuIDogInN0cmluZy54bWwifQogICAgICAgICAgICBdCiAgICAgICAgfSwgewogICAgICAgICAgICB0b2tlbiA6ICJzdHJpbmcueG1sIiwKICAgICAgICAgICAgcmVnZXggOiAnIicsCiAgICAgICAgICAgIHB1c2ggOiBbCiAgICAgICAgICAgICAgICB7dG9rZW4gOiAic3RyaW5nLnhtbCIsIHJlZ2V4OiAnIicsIG5leHQ6ICJwb3AifSwKICAgICAgICAgICAgICAgIHtkZWZhdWx0VG9rZW4gOiAic3RyaW5nLnhtbCJ9CiAgICAgICAgICAgIF0KICAgICAgICB9XSwKCiAgICAgICAgYXR0cmlidXRlczogW3sKICAgICAgICAgICAgdG9rZW4gOiAiZW50aXR5Lm90aGVyLmF0dHJpYnV0ZS1uYW1lLnhtbCIsCiAgICAgICAgICAgIHJlZ2V4IDogdGFnUmVnZXgKICAgICAgICB9LCB7CiAgICAgICAgICAgIHRva2VuIDogImtleXdvcmQub3BlcmF0b3IuYXR0cmlidXRlLWVxdWFscy54bWwiLAogICAgICAgICAgICByZWdleCA6ICI9IgogICAgICAgIH0sIHsKICAgICAgICAgICAgaW5jbHVkZTogInRhZ193aGl0ZXNwYWNlIgogICAgICAgIH0sIHsKICAgICAgICAgICAgaW5jbHVkZTogImF0dHJpYnV0ZV92YWx1ZSIKICAgICAgICB9XSwKCiAgICAgICAgYXR0cmlidXRlX3ZhbHVlOiBbewogICAgICAgICAgICB0b2tlbiA6ICJzdHJpbmcuYXR0cmlidXRlLXZhbHVlLnhtbCIsCiAgICAgICAgICAgIHJlZ2V4IDogIiciLAogICAgICAgICAgICBwdXNoIDogWwogICAgICAgICAgICAgICAge3Rva2VuIDogInN0cmluZy5hdHRyaWJ1dGUtdmFsdWUueG1sIiwgcmVnZXg6ICInIiwgbmV4dDogInBvcCJ9LAogICAgICAgICAgICAgICAge2luY2x1ZGUgOiAiYXR0cl9yZWZlcmVuY2UifSwKICAgICAgICAgICAgICAgIHtkZWZhdWx0VG9rZW4gOiAic3RyaW5nLmF0dHJpYnV0ZS12YWx1ZS54bWwifQogICAgICAgICAgICBdCiAgICAgICAgfSwgewogICAgICAgICAgICB0b2tlbiA6ICJzdHJpbmcuYXR0cmlidXRlLXZhbHVlLnhtbCIsCiAgICAgICAgICAgIHJlZ2V4IDogJyInLAogICAgICAgICAgICBwdXNoIDogWwogICAgICAgICAgICAgICAge3Rva2VuIDogInN0cmluZy5hdHRyaWJ1dGUtdmFsdWUueG1sIiwgcmVnZXg6ICciJywgbmV4dDogInBvcCJ9LAogICAgICAgICAgICAgICAge2luY2x1ZGUgOiAiYXR0cl9yZWZlcmVuY2UifSwKICAgICAgICAgICAgICAgIHtkZWZhdWx0VG9rZW4gOiAic3RyaW5nLmF0dHJpYnV0ZS12YWx1ZS54bWwifQogICAgICAgICAgICBdCiAgICAgICAgfV0KICAgIH07CgogICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IFhtbEhpZ2hsaWdodFJ1bGVzKQogICAgICAgIHRoaXMubm9ybWFsaXplUnVsZXMoKTsKfTsKCgooZnVuY3Rpb24oKSB7CgogICAgdGhpcy5lbWJlZFRhZ1J1bGVzID0gZnVuY3Rpb24oSGlnaGxpZ2h0UnVsZXMsIHByZWZpeCwgdGFnKXsKICAgICAgICB0aGlzLiRydWxlcy50YWcudW5zaGlmdCh7CiAgICAgICAgICAgIHRva2VuIDogWyJtZXRhLnRhZy5wdW5jdHVhdGlvbi50YWctb3Blbi54bWwiLCAibWV0YS50YWcuIiArIHRhZyArICIudGFnLW5hbWUueG1sIl0sCiAgICAgICAgICAgIHJlZ2V4IDogIig8KSgiICsgdGFnICsgIig/PVxcc3w+fCQpKSIsCiAgICAgICAgICAgIG5leHQ6IFsKICAgICAgICAgICAgICAgIHtpbmNsdWRlIDogImF0dHJpYnV0ZXMifSwKICAgICAgICAgICAgICAgIHt0b2tlbiA6ICJtZXRhLnRhZy5wdW5jdHVhdGlvbi50YWctY2xvc2UueG1sIiwgcmVnZXggOiAiLz8+IiwgbmV4dCA6IHByZWZpeCArICJzdGFydCJ9CiAgICAgICAgICAgIF0KICAgICAgICB9KTsKCiAgICAgICAgdGhpcy4kcnVsZXNbdGFnICsgIi1lbmQiXSA9IFsKICAgICAgICAgICAge2luY2x1ZGUgOiAiYXR0cmlidXRlcyJ9LAogICAgICAgICAgICB7dG9rZW4gOiAibWV0YS50YWcucHVuY3R1YXRpb24udGFnLWNsb3NlLnhtbCIsIHJlZ2V4IDogIi8/PiIsICBuZXh0OiAic3RhcnQiLAogICAgICAgICAgICAgICAgb25NYXRjaCA6IGZ1bmN0aW9uKHZhbHVlLCBjdXJyZW50U3RhdGUsIHN0YWNrKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhY2suc3BsaWNlKDApOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRva2VuOwogICAgICAgICAgICB9fQogICAgICAgIF07CgogICAgICAgIHRoaXMuZW1iZWRSdWxlcyhIaWdobGlnaHRSdWxlcywgcHJlZml4LCBbewogICAgICAgICAgICB0b2tlbjogWyJtZXRhLnRhZy5wdW5jdHVhdGlvbi5lbmQtdGFnLW9wZW4ueG1sIiwgIm1ldGEudGFnLiIgKyB0YWcgKyAiLnRhZy1uYW1lLnhtbCJdLAogICAgICAgICAgICByZWdleCA6ICIoPC8pKCIgKyB0YWcgKyAiKD89XFxzfD58JCkpIiwKICAgICAgICAgICAgbmV4dDogdGFnICsgIi1lbmQiCiAgICAgICAgfSwgewogICAgICAgICAgICB0b2tlbjogInN0cmluZy5jZGF0YS54bWwiLAogICAgICAgICAgICByZWdleCA6ICI8XFwhXFxbQ0RBVEFcXFsiCiAgICAgICAgfSwgewogICAgICAgICAgICB0b2tlbjogInN0cmluZy5jZGF0YS54bWwiLAogICAgICAgICAgICByZWdleCA6ICJcXF1cXF0+IgogICAgICAgIH1dKTsKICAgIH07Cgp9KS5jYWxsKFRleHRIaWdobGlnaHRSdWxlcy5wcm90b3R5cGUpOwoKb29wLmluaGVyaXRzKFhtbEhpZ2hsaWdodFJ1bGVzLCBUZXh0SGlnaGxpZ2h0UnVsZXMpOwoKZXhwb3J0cy5YbWxIaWdobGlnaHRSdWxlcyA9IFhtbEhpZ2hsaWdodFJ1bGVzOwp9KTsKCmFjZS5kZWZpbmUoImFjZS9tb2RlL2JlaGF2aW91ci94bWwiLFsicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJhY2UvbGliL29vcCIsImFjZS9tb2RlL2JlaGF2aW91ciIsImFjZS90b2tlbl9pdGVyYXRvciIsImFjZS9saWIvbGFuZyJdLCBmdW5jdGlvbihyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHsKInVzZSBzdHJpY3QiOwoKdmFyIG9vcCA9IHJlcXVpcmUoIi4uLy4uL2xpYi9vb3AiKTsKdmFyIEJlaGF2aW91ciA9IHJlcXVpcmUoIi4uL2JlaGF2aW91ciIpLkJlaGF2aW91cjsKdmFyIFRva2VuSXRlcmF0b3IgPSByZXF1aXJlKCIuLi8uLi90b2tlbl9pdGVyYXRvciIpLlRva2VuSXRlcmF0b3I7CnZhciBsYW5nID0gcmVxdWlyZSgiLi4vLi4vbGliL2xhbmciKTsKCmZ1bmN0aW9uIGlzKHRva2VuLCB0eXBlKSB7CiAgICByZXR1cm4gdG9rZW4gJiYgdG9rZW4udHlwZS5sYXN0SW5kZXhPZih0eXBlICsgIi54bWwiKSA+IC0xOwp9Cgp2YXIgWG1sQmVoYXZpb3VyID0gZnVuY3Rpb24gKCkgewoKICAgIHRoaXMuYWRkKCJzdHJpbmdfZHF1b3RlcyIsICJpbnNlcnRpb24iLCBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbiwgZWRpdG9yLCBzZXNzaW9uLCB0ZXh0KSB7CiAgICAgICAgaWYgKHRleHQgPT0gJyInIHx8IHRleHQgPT0gIiciKSB7CiAgICAgICAgICAgIHZhciBxdW90ZSA9IHRleHQ7CiAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IHNlc3Npb24uZG9jLmdldFRleHRSYW5nZShlZGl0b3IuZ2V0U2VsZWN0aW9uUmFuZ2UoKSk7CiAgICAgICAgICAgIGlmIChzZWxlY3RlZCAhPT0gIiIgJiYgc2VsZWN0ZWQgIT09ICInIiAmJiBzZWxlY3RlZCAhPSAnIicgJiYgZWRpdG9yLmdldFdyYXBCZWhhdmlvdXJzRW5hYmxlZCgpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHRleHQ6IHF1b3RlICsgc2VsZWN0ZWQgKyBxdW90ZSwKICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb246IGZhbHNlCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvclBvc2l0aW9uKCk7CiAgICAgICAgICAgIHZhciBsaW5lID0gc2Vzc2lvbi5kb2MuZ2V0TGluZShjdXJzb3Iucm93KTsKICAgICAgICAgICAgdmFyIHJpZ2h0Q2hhciA9IGxpbmUuc3Vic3RyaW5nKGN1cnNvci5jb2x1bW4sIGN1cnNvci5jb2x1bW4gKyAxKTsKICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gbmV3IFRva2VuSXRlcmF0b3Ioc2Vzc2lvbiwgY3Vyc29yLnJvdywgY3Vyc29yLmNvbHVtbik7CiAgICAgICAgICAgIHZhciB0b2tlbiA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlbigpOwoKICAgICAgICAgICAgaWYgKHJpZ2h0Q2hhciA9PSBxdW90ZSAmJiAoaXModG9rZW4sICJhdHRyaWJ1dGUtdmFsdWUiKSB8fCBpcyh0b2tlbiwgInN0cmluZyIpKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICB0ZXh0OiAiIiwKICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb246IFsxLCAxXQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCF0b2tlbikKICAgICAgICAgICAgICAgIHRva2VuID0gaXRlcmF0b3Iuc3RlcEJhY2t3YXJkKCk7CgogICAgICAgICAgICBpZiAoIXRva2VuKQogICAgICAgICAgICAgICAgcmV0dXJuOwoKICAgICAgICAgICAgd2hpbGUgKGlzKHRva2VuLCAidGFnLXdoaXRlc3BhY2UiKSB8fCBpcyh0b2tlbiwgIndoaXRlc3BhY2UiKSkgewogICAgICAgICAgICAgICAgdG9rZW4gPSBpdGVyYXRvci5zdGVwQmFja3dhcmQoKTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcmlnaHRTcGFjZSA9ICFyaWdodENoYXIgfHwgcmlnaHRDaGFyLm1hdGNoKC9ccy8pOwogICAgICAgICAgICBpZiAoaXModG9rZW4sICJhdHRyaWJ1dGUtZXF1YWxzIikgJiYgKHJpZ2h0U3BhY2UgfHwgcmlnaHRDaGFyID09ICc+JykgfHwgKGlzKHRva2VuLCAiZGVjbC1hdHRyaWJ1dGUtZXF1YWxzIikgJiYgKHJpZ2h0U3BhY2UgfHwgcmlnaHRDaGFyID09ICc/JykpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHRleHQ6IHF1b3RlICsgcXVvdGUsCiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uOiBbMSwgMV0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKCiAgICB0aGlzLmFkZCgic3RyaW5nX2RxdW90ZXMiLCAiZGVsZXRpb24iLCBmdW5jdGlvbihzdGF0ZSwgYWN0aW9uLCBlZGl0b3IsIHNlc3Npb24sIHJhbmdlKSB7CiAgICAgICAgdmFyIHNlbGVjdGVkID0gc2Vzc2lvbi5kb2MuZ2V0VGV4dFJhbmdlKHJhbmdlKTsKICAgICAgICBpZiAoIXJhbmdlLmlzTXVsdGlMaW5lKCkgJiYgKHNlbGVjdGVkID09ICciJyB8fCBzZWxlY3RlZCA9PSAiJyIpKSB7CiAgICAgICAgICAgIHZhciBsaW5lID0gc2Vzc2lvbi5kb2MuZ2V0TGluZShyYW5nZS5zdGFydC5yb3cpOwogICAgICAgICAgICB2YXIgcmlnaHRDaGFyID0gbGluZS5zdWJzdHJpbmcocmFuZ2Uuc3RhcnQuY29sdW1uICsgMSwgcmFuZ2Uuc3RhcnQuY29sdW1uICsgMik7CiAgICAgICAgICAgIGlmIChyaWdodENoYXIgPT0gc2VsZWN0ZWQpIHsKICAgICAgICAgICAgICAgIHJhbmdlLmVuZC5jb2x1bW4rKzsKICAgICAgICAgICAgICAgIHJldHVybiByYW5nZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwoKICAgIHRoaXMuYWRkKCJhdXRvY2xvc2luZyIsICJpbnNlcnRpb24iLCBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbiwgZWRpdG9yLCBzZXNzaW9uLCB0ZXh0KSB7CiAgICAgICAgaWYgKHRleHQgPT0gJz4nKSB7CiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IGVkaXRvci5nZXRTZWxlY3Rpb25SYW5nZSgpLnN0YXJ0OwogICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgVG9rZW5JdGVyYXRvcihzZXNzaW9uLCBwb3NpdGlvbi5yb3csIHBvc2l0aW9uLmNvbHVtbik7CiAgICAgICAgICAgIHZhciB0b2tlbiA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlbigpIHx8IGl0ZXJhdG9yLnN0ZXBCYWNrd2FyZCgpOwogICAgICAgICAgICBpZiAoIXRva2VuIHx8ICEoaXModG9rZW4sICJ0YWctbmFtZSIpIHx8IGlzKHRva2VuLCAidGFnLXdoaXRlc3BhY2UiKSB8fCBpcyh0b2tlbiwgImF0dHJpYnV0ZS1uYW1lIikgfHwgaXModG9rZW4sICJhdHRyaWJ1dGUtZXF1YWxzIikgfHwgaXModG9rZW4sICJhdHRyaWJ1dGUtdmFsdWUiKSkpCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIGlmIChpcyh0b2tlbiwgInJlZmVyZW5jZS5hdHRyaWJ1dGUtdmFsdWUiKSkKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgaWYgKGlzKHRva2VuLCAiYXR0cmlidXRlLXZhbHVlIikpIHsKICAgICAgICAgICAgICAgIHZhciB0b2tlbkVuZENvbHVtbiA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlbkNvbHVtbigpICsgdG9rZW4udmFsdWUubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uLmNvbHVtbiA8IHRva2VuRW5kQ29sdW1uKQogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbi5jb2x1bW4gPT0gdG9rZW5FbmRDb2x1bW4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFRva2VuID0gaXRlcmF0b3Iuc3RlcEZvcndhcmQoKTsKICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFRva2VuICYmIGlzKG5leHRUb2tlbiwgImF0dHJpYnV0ZS12YWx1ZSIpKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3Iuc3RlcEJhY2t3YXJkKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICgvXlxzKj4vLnRlc3Qoc2Vzc2lvbi5nZXRMaW5lKHBvc2l0aW9uLnJvdykuc2xpY2UocG9zaXRpb24uY29sdW1uKSkpCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIHdoaWxlICghaXModG9rZW4sICJ0YWctbmFtZSIpKSB7CiAgICAgICAgICAgICAgICB0b2tlbiA9IGl0ZXJhdG9yLnN0ZXBCYWNrd2FyZCgpOwogICAgICAgICAgICAgICAgaWYgKHRva2VuLnZhbHVlID09ICI8IikgewogICAgICAgICAgICAgICAgICAgIHRva2VuID0gaXRlcmF0b3Iuc3RlcEZvcndhcmQoKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHRva2VuUm93ID0gaXRlcmF0b3IuZ2V0Q3VycmVudFRva2VuUm93KCk7CiAgICAgICAgICAgIHZhciB0b2tlbkNvbHVtbiA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlbkNvbHVtbigpOwogICAgICAgICAgICBpZiAoaXMoaXRlcmF0b3Iuc3RlcEJhY2t3YXJkKCksICJlbmQtdGFnLW9wZW4iKSkKICAgICAgICAgICAgICAgIHJldHVybjsKCiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdG9rZW4udmFsdWU7CiAgICAgICAgICAgIGlmICh0b2tlblJvdyA9PSBwb3NpdGlvbi5yb3cpCiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5zdWJzdHJpbmcoMCwgcG9zaXRpb24uY29sdW1uIC0gdG9rZW5Db2x1bW4pOwoKICAgICAgICAgICAgaWYgKHRoaXMudm9pZEVsZW1lbnRzLmhhc093blByb3BlcnR5KGVsZW1lbnQudG9Mb3dlckNhc2UoKSkpCiAgICAgICAgICAgICAgICAgcmV0dXJuOwoKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgdGV4dDogIj4iICsgIjwvIiArIGVsZW1lbnQgKyAiPiIsCiAgICAgICAgICAgICAgIHNlbGVjdGlvbjogWzEsIDFdCiAgICAgICAgICAgIH07CiAgICAgICAgfQogICAgfSk7CgogICAgdGhpcy5hZGQoImF1dG9pbmRlbnQiLCAiaW5zZXJ0aW9uIiwgZnVuY3Rpb24gKHN0YXRlLCBhY3Rpb24sIGVkaXRvciwgc2Vzc2lvbiwgdGV4dCkgewogICAgICAgIGlmICh0ZXh0ID09ICJcbiIpIHsKICAgICAgICAgICAgdmFyIGN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3JQb3NpdGlvbigpOwogICAgICAgICAgICB2YXIgbGluZSA9IHNlc3Npb24uZ2V0TGluZShjdXJzb3Iucm93KTsKICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gbmV3IFRva2VuSXRlcmF0b3Ioc2Vzc2lvbiwgY3Vyc29yLnJvdywgY3Vyc29yLmNvbHVtbik7CiAgICAgICAgICAgIHZhciB0b2tlbiA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlbigpOwoKICAgICAgICAgICAgaWYgKHRva2VuICYmIHRva2VuLnR5cGUuaW5kZXhPZigidGFnLWNsb3NlIikgIT09IC0xKSB7CiAgICAgICAgICAgICAgICBpZiAodG9rZW4udmFsdWUgPT0gIi8+IikKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB3aGlsZSAodG9rZW4gJiYgdG9rZW4udHlwZS5pbmRleE9mKCJ0YWctbmFtZSIpID09PSAtMSkgewogICAgICAgICAgICAgICAgICAgIHRva2VuID0gaXRlcmF0b3Iuc3RlcEJhY2t3YXJkKCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCF0b2tlbikgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgdGFnID0gdG9rZW4udmFsdWU7CiAgICAgICAgICAgICAgICB2YXIgcm93ID0gaXRlcmF0b3IuZ2V0Q3VycmVudFRva2VuUm93KCk7CiAgICAgICAgICAgICAgICB0b2tlbiA9IGl0ZXJhdG9yLnN0ZXBCYWNrd2FyZCgpOwogICAgICAgICAgICAgICAgaWYgKCF0b2tlbiB8fCB0b2tlbi50eXBlLmluZGV4T2YoImVuZC10YWciKSAhPT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHRoaXMudm9pZEVsZW1lbnRzICYmICF0aGlzLnZvaWRFbGVtZW50c1t0YWddKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRUb2tlbiA9IHNlc3Npb24uZ2V0VG9rZW5BdChjdXJzb3Iucm93LCBjdXJzb3IuY29sdW1uKzEpOwogICAgICAgICAgICAgICAgICAgIHZhciBsaW5lID0gc2Vzc2lvbi5nZXRMaW5lKHJvdyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRJbmRlbnQgPSB0aGlzLiRnZXRJbmRlbnQobGluZSk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGVudCA9IG5leHRJbmRlbnQgKyBzZXNzaW9uLmdldFRhYlN0cmluZygpOwoKICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFRva2VuICYmIG5leHRUb2tlbi52YWx1ZSA9PT0gIjwvIikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogIlxuIiArIGluZGVudCArICJcbiIgKyBuZXh0SW5kZW50LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uOiBbMSwgaW5kZW50Lmxlbmd0aCwgMSwgaW5kZW50Lmxlbmd0aF0KICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogIlxuIiArIGluZGVudAogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwoKfTsKCm9vcC5pbmhlcml0cyhYbWxCZWhhdmlvdXIsIEJlaGF2aW91cik7CgpleHBvcnRzLlhtbEJlaGF2aW91ciA9IFhtbEJlaGF2aW91cjsKfSk7CgphY2UuZGVmaW5lKCJhY2UvbW9kZS9mb2xkaW5nL3htbCIsWyJyZXF1aXJlIiwiZXhwb3J0cyIsIm1vZHVsZSIsImFjZS9saWIvb29wIiwiYWNlL2xpYi9sYW5nIiwiYWNlL3JhbmdlIiwiYWNlL21vZGUvZm9sZGluZy9mb2xkX21vZGUiLCJhY2UvdG9rZW5faXRlcmF0b3IiXSwgZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7CiJ1c2Ugc3RyaWN0IjsKCnZhciBvb3AgPSByZXF1aXJlKCIuLi8uLi9saWIvb29wIik7CnZhciBsYW5nID0gcmVxdWlyZSgiLi4vLi4vbGliL2xhbmciKTsKdmFyIFJhbmdlID0gcmVxdWlyZSgiLi4vLi4vcmFuZ2UiKS5SYW5nZTsKdmFyIEJhc2VGb2xkTW9kZSA9IHJlcXVpcmUoIi4vZm9sZF9tb2RlIikuRm9sZE1vZGU7CnZhciBUb2tlbkl0ZXJhdG9yID0gcmVxdWlyZSgiLi4vLi4vdG9rZW5faXRlcmF0b3IiKS5Ub2tlbkl0ZXJhdG9yOwoKdmFyIEZvbGRNb2RlID0gZXhwb3J0cy5Gb2xkTW9kZSA9IGZ1bmN0aW9uKHZvaWRFbGVtZW50cywgb3B0aW9uYWxFbmRUYWdzKSB7CiAgICBCYXNlRm9sZE1vZGUuY2FsbCh0aGlzKTsKICAgIHRoaXMudm9pZEVsZW1lbnRzID0gdm9pZEVsZW1lbnRzIHx8IHt9OwogICAgdGhpcy5vcHRpb25hbEVuZFRhZ3MgPSBvb3AubWl4aW4oe30sIHRoaXMudm9pZEVsZW1lbnRzKTsKICAgIGlmIChvcHRpb25hbEVuZFRhZ3MpCiAgICAgICAgb29wLm1peGluKHRoaXMub3B0aW9uYWxFbmRUYWdzLCBvcHRpb25hbEVuZFRhZ3MpOwogICAgCn07Cm9vcC5pbmhlcml0cyhGb2xkTW9kZSwgQmFzZUZvbGRNb2RlKTsKCnZhciBUYWcgPSBmdW5jdGlvbigpIHsKICAgIHRoaXMudGFnTmFtZSA9ICIiOwogICAgdGhpcy5jbG9zaW5nID0gZmFsc2U7CiAgICB0aGlzLnNlbGZDbG9zaW5nID0gZmFsc2U7CiAgICB0aGlzLnN0YXJ0ID0ge3JvdzogMCwgY29sdW1uOiAwfTsKICAgIHRoaXMuZW5kID0ge3JvdzogMCwgY29sdW1uOiAwfTsKfTsKCmZ1bmN0aW9uIGlzKHRva2VuLCB0eXBlKSB7CiAgICByZXR1cm4gdG9rZW4udHlwZS5sYXN0SW5kZXhPZih0eXBlICsgIi54bWwiKSA+IC0xOwp9CgooZnVuY3Rpb24oKSB7CgogICAgdGhpcy5nZXRGb2xkV2lkZ2V0ID0gZnVuY3Rpb24oc2Vzc2lvbiwgZm9sZFN0eWxlLCByb3cpIHsKICAgICAgICB2YXIgdGFnID0gdGhpcy5fZ2V0Rmlyc3RUYWdJbkxpbmUoc2Vzc2lvbiwgcm93KTsKCiAgICAgICAgaWYgKCF0YWcpCiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldENvbW1lbnRGb2xkV2lkZ2V0KHNlc3Npb24sIHJvdyk7CgogICAgICAgIGlmICh0YWcuY2xvc2luZyB8fCAoIXRhZy50YWdOYW1lICYmIHRhZy5zZWxmQ2xvc2luZykpCiAgICAgICAgICAgIHJldHVybiBmb2xkU3R5bGUgPT0gIm1hcmtiZWdpbmVuZCIgPyAiZW5kIiA6ICIiOwoKICAgICAgICBpZiAoIXRhZy50YWdOYW1lIHx8IHRhZy5zZWxmQ2xvc2luZyB8fCB0aGlzLnZvaWRFbGVtZW50cy5oYXNPd25Qcm9wZXJ0eSh0YWcudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSkKICAgICAgICAgICAgcmV0dXJuICIiOwoKICAgICAgICBpZiAodGhpcy5fZmluZEVuZFRhZ0luTGluZShzZXNzaW9uLCByb3csIHRhZy50YWdOYW1lLCB0YWcuZW5kLmNvbHVtbikpCiAgICAgICAgICAgIHJldHVybiAiIjsKCiAgICAgICAgcmV0dXJuICJzdGFydCI7CiAgICB9OwogICAgCiAgICB0aGlzLmdldENvbW1lbnRGb2xkV2lkZ2V0ID0gZnVuY3Rpb24oc2Vzc2lvbiwgcm93KSB7CiAgICAgICAgaWYgKC9jb21tZW50Ly50ZXN0KHNlc3Npb24uZ2V0U3RhdGUocm93KSkgJiYgLzwhLS8udGVzdChzZXNzaW9uLmdldExpbmUocm93KSkpCiAgICAgICAgICAgIHJldHVybiAic3RhcnQiOwogICAgICAgIHJldHVybiAiIjsKICAgIH07CiAgICB0aGlzLl9nZXRGaXJzdFRhZ0luTGluZSA9IGZ1bmN0aW9uKHNlc3Npb24sIHJvdykgewogICAgICAgIHZhciB0b2tlbnMgPSBzZXNzaW9uLmdldFRva2Vucyhyb3cpOwogICAgICAgIHZhciB0YWcgPSBuZXcgVGFnKCk7CgogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTsKICAgICAgICAgICAgaWYgKGlzKHRva2VuLCAidGFnLW9wZW4iKSkgewogICAgICAgICAgICAgICAgdGFnLmVuZC5jb2x1bW4gPSB0YWcuc3RhcnQuY29sdW1uICsgdG9rZW4udmFsdWUubGVuZ3RoOwogICAgICAgICAgICAgICAgdGFnLmNsb3NpbmcgPSBpcyh0b2tlbiwgImVuZC10YWctb3BlbiIpOwogICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlbnNbKytpXTsKICAgICAgICAgICAgICAgIGlmICghdG9rZW4pCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICB0YWcudGFnTmFtZSA9IHRva2VuLnZhbHVlOwogICAgICAgICAgICAgICAgdGFnLmVuZC5jb2x1bW4gKz0gdG9rZW4udmFsdWUubGVuZ3RoOwogICAgICAgICAgICAgICAgZm9yIChpKys7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTsKICAgICAgICAgICAgICAgICAgICB0YWcuZW5kLmNvbHVtbiArPSB0b2tlbi52YWx1ZS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgaWYgKGlzKHRva2VuLCAidGFnLWNsb3NlIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGFnLnNlbGZDbG9zaW5nID0gdG9rZW4udmFsdWUgPT0gJy8+JzsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRhZzsKICAgICAgICAgICAgfSBlbHNlIGlmIChpcyh0b2tlbiwgInRhZy1jbG9zZSIpKSB7CiAgICAgICAgICAgICAgICB0YWcuc2VsZkNsb3NpbmcgPSB0b2tlbi52YWx1ZSA9PSAnLz4nOwogICAgICAgICAgICAgICAgcmV0dXJuIHRhZzsKICAgICAgICAgICAgfQogICAgICAgICAgICB0YWcuc3RhcnQuY29sdW1uICs9IHRva2VuLnZhbHVlLmxlbmd0aDsKICAgICAgICB9CgogICAgICAgIHJldHVybiBudWxsOwogICAgfTsKCiAgICB0aGlzLl9maW5kRW5kVGFnSW5MaW5lID0gZnVuY3Rpb24oc2Vzc2lvbiwgcm93LCB0YWdOYW1lLCBzdGFydENvbHVtbikgewogICAgICAgIHZhciB0b2tlbnMgPSBzZXNzaW9uLmdldFRva2Vucyhyb3cpOwogICAgICAgIHZhciBjb2x1bW4gPSAwOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTsKICAgICAgICAgICAgY29sdW1uICs9IHRva2VuLnZhbHVlLmxlbmd0aDsKICAgICAgICAgICAgaWYgKGNvbHVtbiA8IHN0YXJ0Q29sdW1uKQogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIGlmIChpcyh0b2tlbiwgImVuZC10YWctb3BlbiIpKSB7CiAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpICsgMV07CiAgICAgICAgICAgICAgICBpZiAodG9rZW4gJiYgdG9rZW4udmFsdWUgPT0gdGFnTmFtZSkKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gZmFsc2U7CiAgICB9OwogICAgdGhpcy5fcmVhZFRhZ0ZvcndhcmQgPSBmdW5jdGlvbihpdGVyYXRvcikgewogICAgICAgIHZhciB0b2tlbiA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlbigpOwogICAgICAgIGlmICghdG9rZW4pCiAgICAgICAgICAgIHJldHVybiBudWxsOwoKICAgICAgICB2YXIgdGFnID0gbmV3IFRhZygpOwogICAgICAgIGRvIHsKICAgICAgICAgICAgaWYgKGlzKHRva2VuLCAidGFnLW9wZW4iKSkgewogICAgICAgICAgICAgICAgdGFnLmNsb3NpbmcgPSBpcyh0b2tlbiwgImVuZC10YWctb3BlbiIpOwogICAgICAgICAgICAgICAgdGFnLnN0YXJ0LnJvdyA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlblJvdygpOwogICAgICAgICAgICAgICAgdGFnLnN0YXJ0LmNvbHVtbiA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlbkNvbHVtbigpOwogICAgICAgICAgICB9IGVsc2UgaWYgKGlzKHRva2VuLCAidGFnLW5hbWUiKSkgewogICAgICAgICAgICAgICAgdGFnLnRhZ05hbWUgPSB0b2tlbi52YWx1ZTsKICAgICAgICAgICAgfSBlbHNlIGlmIChpcyh0b2tlbiwgInRhZy1jbG9zZSIpKSB7CiAgICAgICAgICAgICAgICB0YWcuc2VsZkNsb3NpbmcgPSB0b2tlbi52YWx1ZSA9PSAiLz4iOwogICAgICAgICAgICAgICAgdGFnLmVuZC5yb3cgPSBpdGVyYXRvci5nZXRDdXJyZW50VG9rZW5Sb3coKTsKICAgICAgICAgICAgICAgIHRhZy5lbmQuY29sdW1uID0gaXRlcmF0b3IuZ2V0Q3VycmVudFRva2VuQ29sdW1uKCkgKyB0b2tlbi52YWx1ZS5sZW5ndGg7CiAgICAgICAgICAgICAgICBpdGVyYXRvci5zdGVwRm9yd2FyZCgpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRhZzsKICAgICAgICAgICAgfQogICAgICAgIH0gd2hpbGUodG9rZW4gPSBpdGVyYXRvci5zdGVwRm9yd2FyZCgpKTsKCiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9OwogICAgCiAgICB0aGlzLl9yZWFkVGFnQmFja3dhcmQgPSBmdW5jdGlvbihpdGVyYXRvcikgewogICAgICAgIHZhciB0b2tlbiA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlbigpOwogICAgICAgIGlmICghdG9rZW4pCiAgICAgICAgICAgIHJldHVybiBudWxsOwoKICAgICAgICB2YXIgdGFnID0gbmV3IFRhZygpOwogICAgICAgIGRvIHsKICAgICAgICAgICAgaWYgKGlzKHRva2VuLCAidGFnLW9wZW4iKSkgewogICAgICAgICAgICAgICAgdGFnLmNsb3NpbmcgPSBpcyh0b2tlbiwgImVuZC10YWctb3BlbiIpOwogICAgICAgICAgICAgICAgdGFnLnN0YXJ0LnJvdyA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlblJvdygpOwogICAgICAgICAgICAgICAgdGFnLnN0YXJ0LmNvbHVtbiA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlbkNvbHVtbigpOwogICAgICAgICAgICAgICAgaXRlcmF0b3Iuc3RlcEJhY2t3YXJkKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdGFnOwogICAgICAgICAgICB9IGVsc2UgaWYgKGlzKHRva2VuLCAidGFnLW5hbWUiKSkgewogICAgICAgICAgICAgICAgdGFnLnRhZ05hbWUgPSB0b2tlbi52YWx1ZTsKICAgICAgICAgICAgfSBlbHNlIGlmIChpcyh0b2tlbiwgInRhZy1jbG9zZSIpKSB7CiAgICAgICAgICAgICAgICB0YWcuc2VsZkNsb3NpbmcgPSB0b2tlbi52YWx1ZSA9PSAiLz4iOwogICAgICAgICAgICAgICAgdGFnLmVuZC5yb3cgPSBpdGVyYXRvci5nZXRDdXJyZW50VG9rZW5Sb3coKTsKICAgICAgICAgICAgICAgIHRhZy5lbmQuY29sdW1uID0gaXRlcmF0b3IuZ2V0Q3VycmVudFRva2VuQ29sdW1uKCkgKyB0b2tlbi52YWx1ZS5sZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICB9IHdoaWxlKHRva2VuID0gaXRlcmF0b3Iuc3RlcEJhY2t3YXJkKCkpOwoKICAgICAgICByZXR1cm4gbnVsbDsKICAgIH07CiAgICAKICAgIHRoaXMuX3BvcCA9IGZ1bmN0aW9uKHN0YWNrLCB0YWcpIHsKICAgICAgICB3aGlsZSAoc3RhY2subGVuZ3RoKSB7CiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgdG9wID0gc3RhY2tbc3RhY2subGVuZ3RoLTFdOwogICAgICAgICAgICBpZiAoIXRhZyB8fCB0b3AudGFnTmFtZSA9PSB0YWcudGFnTmFtZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHN0YWNrLnBvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMub3B0aW9uYWxFbmRUYWdzLmhhc093blByb3BlcnR5KHRvcC50YWdOYW1lKSkgewogICAgICAgICAgICAgICAgc3RhY2sucG9wKCk7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfTsKICAgIAogICAgdGhpcy5nZXRGb2xkV2lkZ2V0UmFuZ2UgPSBmdW5jdGlvbihzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdykgewogICAgICAgIHZhciBmaXJzdFRhZyA9IHRoaXMuX2dldEZpcnN0VGFnSW5MaW5lKHNlc3Npb24sIHJvdyk7CiAgICAgICAgCiAgICAgICAgaWYgKCFmaXJzdFRhZykgewogICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21tZW50Rm9sZFdpZGdldChzZXNzaW9uLCByb3cpCiAgICAgICAgICAgICAgICAmJiBzZXNzaW9uLmdldENvbW1lbnRGb2xkUmFuZ2Uocm93LCBzZXNzaW9uLmdldExpbmUocm93KS5sZW5ndGgpOwogICAgICAgIH0KICAgICAgICAKICAgICAgICB2YXIgaXNCYWNrd2FyZCA9IGZpcnN0VGFnLmNsb3NpbmcgfHwgZmlyc3RUYWcuc2VsZkNsb3Npbmc7CiAgICAgICAgdmFyIHN0YWNrID0gW107CiAgICAgICAgdmFyIHRhZzsKICAgICAgICAKICAgICAgICBpZiAoIWlzQmFja3dhcmQpIHsKICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gbmV3IFRva2VuSXRlcmF0b3Ioc2Vzc2lvbiwgcm93LCBmaXJzdFRhZy5zdGFydC5jb2x1bW4pOwogICAgICAgICAgICB2YXIgc3RhcnQgPSB7CiAgICAgICAgICAgICAgICByb3c6IHJvdywKICAgICAgICAgICAgICAgIGNvbHVtbjogZmlyc3RUYWcuc3RhcnQuY29sdW1uICsgZmlyc3RUYWcudGFnTmFtZS5sZW5ndGggKyAyCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGlmIChmaXJzdFRhZy5zdGFydC5yb3cgPT0gZmlyc3RUYWcuZW5kLnJvdykKICAgICAgICAgICAgICAgIHN0YXJ0LmNvbHVtbiA9IGZpcnN0VGFnLmVuZC5jb2x1bW47CiAgICAgICAgICAgIHdoaWxlICh0YWcgPSB0aGlzLl9yZWFkVGFnRm9yd2FyZChpdGVyYXRvcikpIHsKICAgICAgICAgICAgICAgIGlmICh0YWcuc2VsZkNsb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YWNrLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICB0YWcuc3RhcnQuY29sdW1uICs9IHRhZy50YWdOYW1lLmxlbmd0aCArIDI7CiAgICAgICAgICAgICAgICAgICAgICAgIHRhZy5lbmQuY29sdW1uIC09IDI7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSYW5nZS5mcm9tUG9pbnRzKHRhZy5zdGFydCwgdGFnLmVuZCk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBpZiAodGFnLmNsb3NpbmcpIHsKICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3Aoc3RhY2ssIHRhZyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA9PSAwKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmFuZ2UuZnJvbVBvaW50cyhzdGFydCwgdGFnLnN0YXJ0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHN0YWNrLnB1c2godGFnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gbmV3IFRva2VuSXRlcmF0b3Ioc2Vzc2lvbiwgcm93LCBmaXJzdFRhZy5lbmQuY29sdW1uKTsKICAgICAgICAgICAgdmFyIGVuZCA9IHsKICAgICAgICAgICAgICAgIHJvdzogcm93LAogICAgICAgICAgICAgICAgY29sdW1uOiBmaXJzdFRhZy5zdGFydC5jb2x1bW4KICAgICAgICAgICAgfTsKICAgICAgICAgICAgCiAgICAgICAgICAgIHdoaWxlICh0YWcgPSB0aGlzLl9yZWFkVGFnQmFja3dhcmQoaXRlcmF0b3IpKSB7CiAgICAgICAgICAgICAgICBpZiAodGFnLnNlbGZDbG9zaW5nKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGFjay5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGFnLnN0YXJ0LmNvbHVtbiArPSB0YWcudGFnTmFtZS5sZW5ndGggKyAyOwogICAgICAgICAgICAgICAgICAgICAgICB0YWcuZW5kLmNvbHVtbiAtPSAyOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUmFuZ2UuZnJvbVBvaW50cyh0YWcuc3RhcnQsIHRhZy5lbmQpOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZQogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKCF0YWcuY2xvc2luZykgewogICAgICAgICAgICAgICAgICAgIHRoaXMuX3BvcChzdGFjaywgdGFnKTsKICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGFnLnN0YXJ0LmNvbHVtbiArPSB0YWcudGFnTmFtZS5sZW5ndGggKyAyOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFnLnN0YXJ0LnJvdyA9PSB0YWcuZW5kLnJvdyAmJiB0YWcuc3RhcnQuY29sdW1uIDwgdGFnLmVuZC5jb2x1bW4pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWcuc3RhcnQuY29sdW1uID0gdGFnLmVuZC5jb2x1bW47CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBSYW5nZS5mcm9tUG9pbnRzKHRhZy5zdGFydCwgZW5kKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBzdGFjay5wdXNoKHRhZyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgCiAgICB9OwoKfSkuY2FsbChGb2xkTW9kZS5wcm90b3R5cGUpOwoKfSk7CgphY2UuZGVmaW5lKCJhY2UvbW9kZS94bWwiLFsicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJhY2UvbGliL29vcCIsImFjZS9saWIvbGFuZyIsImFjZS9tb2RlL3RleHQiLCJhY2UvbW9kZS94bWxfaGlnaGxpZ2h0X3J1bGVzIiwiYWNlL21vZGUvYmVoYXZpb3VyL3htbCIsImFjZS9tb2RlL2ZvbGRpbmcveG1sIiwiYWNlL3dvcmtlci93b3JrZXJfY2xpZW50Il0sIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkgewoidXNlIHN0cmljdCI7Cgp2YXIgb29wID0gcmVxdWlyZSgiLi4vbGliL29vcCIpOwp2YXIgbGFuZyA9IHJlcXVpcmUoIi4uL2xpYi9sYW5nIik7CnZhciBUZXh0TW9kZSA9IHJlcXVpcmUoIi4vdGV4dCIpLk1vZGU7CnZhciBYbWxIaWdobGlnaHRSdWxlcyA9IHJlcXVpcmUoIi4veG1sX2hpZ2hsaWdodF9ydWxlcyIpLlhtbEhpZ2hsaWdodFJ1bGVzOwp2YXIgWG1sQmVoYXZpb3VyID0gcmVxdWlyZSgiLi9iZWhhdmlvdXIveG1sIikuWG1sQmVoYXZpb3VyOwp2YXIgWG1sRm9sZE1vZGUgPSByZXF1aXJlKCIuL2ZvbGRpbmcveG1sIikuRm9sZE1vZGU7CnZhciBXb3JrZXJDbGllbnQgPSByZXF1aXJlKCIuLi93b3JrZXIvd29ya2VyX2NsaWVudCIpLldvcmtlckNsaWVudDsKCnZhciBNb2RlID0gZnVuY3Rpb24oKSB7CiAgIHRoaXMuSGlnaGxpZ2h0UnVsZXMgPSBYbWxIaWdobGlnaHRSdWxlczsKICAgdGhpcy4kYmVoYXZpb3VyID0gbmV3IFhtbEJlaGF2aW91cigpOwogICB0aGlzLmZvbGRpbmdSdWxlcyA9IG5ldyBYbWxGb2xkTW9kZSgpOwp9OwoKb29wLmluaGVyaXRzKE1vZGUsIFRleHRNb2RlKTsKCihmdW5jdGlvbigpIHsKCiAgICB0aGlzLnZvaWRFbGVtZW50cyA9IGxhbmcuYXJyYXlUb01hcChbXSk7CgogICAgdGhpcy5ibG9ja0NvbW1lbnQgPSB7c3RhcnQ6ICI8IS0tIiwgZW5kOiAiLS0+In07CgogICAgdGhpcy5jcmVhdGVXb3JrZXIgPSBmdW5jdGlvbihzZXNzaW9uKSB7CiAgICAgICAgdmFyIHdvcmtlciA9IG5ldyBXb3JrZXJDbGllbnQoWyJhY2UiXSwgImFjZS9tb2RlL3htbF93b3JrZXIiLCAiV29ya2VyIik7CiAgICAgICAgd29ya2VyLmF0dGFjaFRvRG9jdW1lbnQoc2Vzc2lvbi5nZXREb2N1bWVudCgpKTsKCiAgICAgICAgd29ya2VyLm9uKCJlcnJvciIsIGZ1bmN0aW9uKGUpIHsKICAgICAgICAgICAgc2Vzc2lvbi5zZXRBbm5vdGF0aW9ucyhlLmRhdGEpOwogICAgICAgIH0pOwoKICAgICAgICB3b3JrZXIub24oInRlcm1pbmF0ZSIsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBzZXNzaW9uLmNsZWFyQW5ub3RhdGlvbnMoKTsKICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIHdvcmtlcjsKICAgIH07CiAgICAKICAgIHRoaXMuJGlkID0gImFjZS9tb2RlL3htbCI7Cn0pLmNhbGwoTW9kZS5wcm90b3R5cGUpOwoKZXhwb3J0cy5Nb2RlID0gTW9kZTsKfSk7CgphY2UuZGVmaW5lKCJhY2UvbW9kZS9kb2NfY29tbWVudF9oaWdobGlnaHRfcnVsZXMiLFsicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJhY2UvbGliL29vcCIsImFjZS9tb2RlL3RleHRfaGlnaGxpZ2h0X3J1bGVzIl0sIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkgewoidXNlIHN0cmljdCI7Cgp2YXIgb29wID0gcmVxdWlyZSgiLi4vbGliL29vcCIpOwp2YXIgVGV4dEhpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZSgiLi90ZXh0X2hpZ2hsaWdodF9ydWxlcyIpLlRleHRIaWdobGlnaHRSdWxlczsKCnZhciBEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMgPSBmdW5jdGlvbigpIHsKICAgIHRoaXMuJHJ1bGVzID0gewogICAgICAgICJzdGFydCIgOiBbIHsKICAgICAgICAgICAgdG9rZW4gOiAiY29tbWVudC5kb2MudGFnIiwKICAgICAgICAgICAgcmVnZXggOiAiQFtcXHdcXGRfXSsiIC8vIFRPRE86IGZpeCBlbWFpbCBhZGRyZXNzZXMKICAgICAgICB9LCAKICAgICAgICBEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMuZ2V0VGFnUnVsZSgpLAogICAgICAgIHsKICAgICAgICAgICAgZGVmYXVsdFRva2VuIDogImNvbW1lbnQuZG9jIiwKICAgICAgICAgICAgY2FzZUluc2Vuc2l0aXZlOiB0cnVlCiAgICAgICAgfV0KICAgIH07Cn07Cgpvb3AuaW5oZXJpdHMoRG9jQ29tbWVudEhpZ2hsaWdodFJ1bGVzLCBUZXh0SGlnaGxpZ2h0UnVsZXMpOwoKRG9jQ29tbWVudEhpZ2hsaWdodFJ1bGVzLmdldFRhZ1J1bGUgPSBmdW5jdGlvbihzdGFydCkgewogICAgcmV0dXJuIHsKICAgICAgICB0b2tlbiA6ICJjb21tZW50LmRvYy50YWcuc3RvcmFnZS50eXBlIiwKICAgICAgICByZWdleCA6ICJcXGIoPzpUT0RPfEZJWE1FfFhYWHxIQUNLKVxcYiIKICAgIH07Cn07CgpEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMuZ2V0U3RhcnRSdWxlID0gZnVuY3Rpb24oc3RhcnQpIHsKICAgIHJldHVybiB7CiAgICAgICAgdG9rZW4gOiAiY29tbWVudC5kb2MiLCAvLyBkb2MgY29tbWVudAogICAgICAgIHJlZ2V4IDogIlxcL1xcKig/PVxcKikiLAogICAgICAgIG5leHQgIDogc3RhcnQKICAgIH07Cn07CgpEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMuZ2V0RW5kUnVsZSA9IGZ1bmN0aW9uIChzdGFydCkgewogICAgcmV0dXJuIHsKICAgICAgICB0b2tlbiA6ICJjb21tZW50LmRvYyIsIC8vIGNsb3NpbmcgY29tbWVudAogICAgICAgIHJlZ2V4IDogIlxcKlxcLyIsCiAgICAgICAgbmV4dCAgOiBzdGFydAogICAgfTsKfTsKCgpleHBvcnRzLkRvY0NvbW1lbnRIaWdobGlnaHRSdWxlcyA9IERvY0NvbW1lbnRIaWdobGlnaHRSdWxlczsKCn0pOwoKYWNlLmRlZmluZSgiYWNlL21vZGUvamF2YXNjcmlwdF9oaWdobGlnaHRfcnVsZXMiLFsicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJhY2UvbGliL29vcCIsImFjZS9tb2RlL2RvY19jb21tZW50X2hpZ2hsaWdodF9ydWxlcyIsImFjZS9tb2RlL3RleHRfaGlnaGxpZ2h0X3J1bGVzIl0sIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkgewoidXNlIHN0cmljdCI7Cgp2YXIgb29wID0gcmVxdWlyZSgiLi4vbGliL29vcCIpOwp2YXIgRG9jQ29tbWVudEhpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZSgiLi9kb2NfY29tbWVudF9oaWdobGlnaHRfcnVsZXMiKS5Eb2NDb21tZW50SGlnaGxpZ2h0UnVsZXM7CnZhciBUZXh0SGlnaGxpZ2h0UnVsZXMgPSByZXF1aXJlKCIuL3RleHRfaGlnaGxpZ2h0X3J1bGVzIikuVGV4dEhpZ2hsaWdodFJ1bGVzOwp2YXIgaWRlbnRpZmllclJlID0gIlthLXpBLVpcXCRfXHUwMGExLVx1ZmZmZl1bYS16QS1aXFxkXFwkX1x1MDBhMS1cdWZmZmZdKiI7Cgp2YXIgSmF2YVNjcmlwdEhpZ2hsaWdodFJ1bGVzID0gZnVuY3Rpb24ob3B0aW9ucykgewogICAgdmFyIGtleXdvcmRNYXBwZXIgPSB0aGlzLmNyZWF0ZUtleXdvcmRNYXBwZXIoewogICAgICAgICJ2YXJpYWJsZS5sYW5ndWFnZSI6CiAgICAgICAgICAgICJBcnJheXxCb29sZWFufERhdGV8RnVuY3Rpb258SXRlcmF0b3J8TnVtYmVyfE9iamVjdHxSZWdFeHB8U3RyaW5nfFByb3h5fCIgICsgLy8gQ29uc3RydWN0b3JzCiAgICAgICAgICAgICJOYW1lc3BhY2V8UU5hbWV8WE1MfFhNTExpc3R8IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgLy8gRTRYCiAgICAgICAgICAgICJBcnJheUJ1ZmZlcnxGbG9hdDMyQXJyYXl8RmxvYXQ2NEFycmF5fEludDE2QXJyYXl8SW50MzJBcnJheXxJbnQ4QXJyYXl8IiAgICsKICAgICAgICAgICAgIlVpbnQxNkFycmF5fFVpbnQzMkFycmF5fFVpbnQ4QXJyYXl8VWludDhDbGFtcGVkQXJyYXl8IiAgICAgICAgICAgICAgICAgICAgKwogICAgICAgICAgICAiRXJyb3J8RXZhbEVycm9yfEludGVybmFsRXJyb3J8UmFuZ2VFcnJvcnxSZWZlcmVuY2VFcnJvcnxTdG9wSXRlcmF0aW9ufCIgICArIC8vIEVycm9ycwogICAgICAgICAgICAiU3ludGF4RXJyb3J8VHlwZUVycm9yfFVSSUVycm9yfCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArCiAgICAgICAgICAgICJkZWNvZGVVUkl8ZGVjb2RlVVJJQ29tcG9uZW50fGVuY29kZVVSSXxlbmNvZGVVUklDb21wb25lbnR8ZXZhbHxpc0Zpbml0ZXwiICsgLy8gTm9uLWNvbnN0cnVjdG9yIGZ1bmN0aW9ucwogICAgICAgICAgICAiaXNOYU58cGFyc2VGbG9hdHxwYXJzZUludHwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArCiAgICAgICAgICAgICJKU09OfE1hdGh8IiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgLy8gT3RoZXIKICAgICAgICAgICAgInRoaXN8YXJndW1lbnRzfHByb3RvdHlwZXx3aW5kb3d8ZG9jdW1lbnQiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLCAvLyBQc2V1ZG8KICAgICAgICAia2V5d29yZCI6CiAgICAgICAgICAgICJjb25zdHx5aWVsZHxpbXBvcnR8Z2V0fHNldHxhc3luY3xhd2FpdHwiICsKICAgICAgICAgICAgImJyZWFrfGNhc2V8Y2F0Y2h8Y29udGludWV8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxmaW5hbGx5fGZvcnxmdW5jdGlvbnwiICsKICAgICAgICAgICAgImlmfGlufG9mfGluc3RhbmNlb2Z8bmV3fHJldHVybnxzd2l0Y2h8dGhyb3d8dHJ5fHR5cGVvZnxsZXR8dmFyfHdoaWxlfHdpdGh8ZGVidWdnZXJ8IiArCiAgICAgICAgICAgICJfX3BhcmVudF9ffF9fY291bnRfX3xlc2NhcGV8dW5lc2NhcGV8d2l0aHxfX3Byb3RvX198IiArCiAgICAgICAgICAgICJjbGFzc3xlbnVtfGV4dGVuZHN8c3VwZXJ8ZXhwb3J0fGltcGxlbWVudHN8cHJpdmF0ZXxwdWJsaWN8aW50ZXJmYWNlfHBhY2thZ2V8cHJvdGVjdGVkfHN0YXRpYyIsCiAgICAgICAgInN0b3JhZ2UudHlwZSI6CiAgICAgICAgICAgICJjb25zdHxsZXR8dmFyfGZ1bmN0aW9uIiwKICAgICAgICAiY29uc3RhbnQubGFuZ3VhZ2UiOgogICAgICAgICAgICAibnVsbHxJbmZpbml0eXxOYU58dW5kZWZpbmVkIiwKICAgICAgICAic3VwcG9ydC5mdW5jdGlvbiI6CiAgICAgICAgICAgICJhbGVydCIsCiAgICAgICAgImNvbnN0YW50Lmxhbmd1YWdlLmJvb2xlYW4iOiAidHJ1ZXxmYWxzZSIKICAgIH0sICJpZGVudGlmaWVyIik7CiAgICB2YXIga3dCZWZvcmVSZSA9ICJjYXNlfGRvfGVsc2V8ZmluYWxseXxpbnxpbnN0YW5jZW9mfHJldHVybnx0aHJvd3x0cnl8dHlwZW9mfHlpZWxkfHZvaWQiOwoKICAgIHZhciBlc2NhcGVkUmUgPSAiXFxcXCg/OnhbMC05YS1mQS1GXXsyfXwiICsgLy8gaGV4CiAgICAgICAgInVbMC05YS1mQS1GXXs0fXwiICsgLy8gdW5pY29kZQogICAgICAgICJ1e1swLTlhLWZBLUZdezEsNn19fCIgKyAvLyBlczYgdW5pY29kZQogICAgICAgICJbMC0yXVswLTddezAsMn18IiArIC8vIG9jdAogICAgICAgICIzWzAtN11bMC03XT98IiArIC8vIG9jdAogICAgICAgICJbNC03XVswLTddP3wiICsgLy9vY3QKICAgICAgICAiLikiOwoKICAgIHRoaXMuJHJ1bGVzID0gewogICAgICAgICJub19yZWdleCIgOiBbCiAgICAgICAgICAgIERvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5nZXRTdGFydFJ1bGUoImRvYy1zdGFydCIpLAogICAgICAgICAgICBjb21tZW50cygibm9fcmVnZXgiKSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdG9rZW4gOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgIHJlZ2V4IDogIicoPz0uKSIsCiAgICAgICAgICAgICAgICBuZXh0ICA6ICJxc3RyaW5nIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbiA6ICJzdHJpbmciLAogICAgICAgICAgICAgICAgcmVnZXggOiAnIig/PS4pJywKICAgICAgICAgICAgICAgIG5leHQgIDogInFxc3RyaW5nIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbiA6ICJjb25zdGFudC5udW1lcmljIiwgLy8gaGV4YWRlY2ltYWwsIG9jdGFsIGFuZCBiaW5hcnkKICAgICAgICAgICAgICAgIHJlZ2V4IDogLzAoPzpbeFhdWzAtOWEtZkEtRl0rfFtvT11bMC03XSt8W2JCXVswMV0rKVxiLwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbiA6ICJjb25zdGFudC5udW1lcmljIiwgLy8gZGVjaW1hbCBpbnRlZ2VycyBhbmQgZmxvYXRzCiAgICAgICAgICAgICAgICByZWdleCA6IC8oPzpcZFxkKig/OlwuXGQqKT98XC5cZCspKD86W2VFXVsrLV0/XGQrXGIpPy8KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiBbCiAgICAgICAgICAgICAgICAgICAgInN0b3JhZ2UudHlwZSIsICJwdW5jdHVhdGlvbi5vcGVyYXRvciIsICJzdXBwb3J0LmZ1bmN0aW9uIiwKICAgICAgICAgICAgICAgICAgICAicHVuY3R1YXRpb24ub3BlcmF0b3IiLCAiZW50aXR5Lm5hbWUuZnVuY3Rpb24iLCAidGV4dCIsImtleXdvcmQub3BlcmF0b3IiCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgcmVnZXggOiAiKCIgKyBpZGVudGlmaWVyUmUgKyAiKShcXC4pKHByb3RvdHlwZSkoXFwuKSgiICsgaWRlbnRpZmllclJlICsiKShcXHMqKSg9KSIsCiAgICAgICAgICAgICAgICBuZXh0OiAiZnVuY3Rpb25fYXJndW1lbnRzIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbiA6IFsKICAgICAgICAgICAgICAgICAgICAic3RvcmFnZS50eXBlIiwgInB1bmN0dWF0aW9uLm9wZXJhdG9yIiwgImVudGl0eS5uYW1lLmZ1bmN0aW9uIiwgInRleHQiLAogICAgICAgICAgICAgICAgICAgICJrZXl3b3JkLm9wZXJhdG9yIiwgInRleHQiLCAic3RvcmFnZS50eXBlIiwgInRleHQiLCAicGFyZW4ubHBhcmVuIgogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHJlZ2V4IDogIigiICsgaWRlbnRpZmllclJlICsgIikoXFwuKSgiICsgaWRlbnRpZmllclJlICsiKShcXHMqKSg9KShcXHMqKShmdW5jdGlvbikoXFxzKikoXFwoKSIsCiAgICAgICAgICAgICAgICBuZXh0OiAiZnVuY3Rpb25fYXJndW1lbnRzIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbiA6IFsKICAgICAgICAgICAgICAgICAgICAiZW50aXR5Lm5hbWUuZnVuY3Rpb24iLCAidGV4dCIsICJrZXl3b3JkLm9wZXJhdG9yIiwgInRleHQiLCAic3RvcmFnZS50eXBlIiwKICAgICAgICAgICAgICAgICAgICAidGV4dCIsICJwYXJlbi5scGFyZW4iCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgcmVnZXggOiAiKCIgKyBpZGVudGlmaWVyUmUgKyIpKFxccyopKD0pKFxccyopKGZ1bmN0aW9uKShcXHMqKShcXCgpIiwKICAgICAgICAgICAgICAgIG5leHQ6ICJmdW5jdGlvbl9hcmd1bWVudHMiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuIDogWwogICAgICAgICAgICAgICAgICAgICJzdG9yYWdlLnR5cGUiLCAicHVuY3R1YXRpb24ub3BlcmF0b3IiLCAiZW50aXR5Lm5hbWUuZnVuY3Rpb24iLCAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgImtleXdvcmQub3BlcmF0b3IiLCAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgInN0b3JhZ2UudHlwZSIsICJ0ZXh0IiwgImVudGl0eS5uYW1lLmZ1bmN0aW9uIiwgInRleHQiLCAicGFyZW4ubHBhcmVuIgogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHJlZ2V4IDogIigiICsgaWRlbnRpZmllclJlICsgIikoXFwuKSgiICsgaWRlbnRpZmllclJlICsiKShcXHMqKSg9KShcXHMqKShmdW5jdGlvbikoXFxzKykoXFx3KykoXFxzKikoXFwoKSIsCiAgICAgICAgICAgICAgICBuZXh0OiAiZnVuY3Rpb25fYXJndW1lbnRzIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbiA6IFsKICAgICAgICAgICAgICAgICAgICAic3RvcmFnZS50eXBlIiwgInRleHQiLCAiZW50aXR5Lm5hbWUuZnVuY3Rpb24iLCAidGV4dCIsICJwYXJlbi5scGFyZW4iCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgcmVnZXggOiAiKGZ1bmN0aW9uKShcXHMrKSgiICsgaWRlbnRpZmllclJlICsgIikoXFxzKikoXFwoKSIsCiAgICAgICAgICAgICAgICBuZXh0OiAiZnVuY3Rpb25fYXJndW1lbnRzIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbiA6IFsKICAgICAgICAgICAgICAgICAgICAiZW50aXR5Lm5hbWUuZnVuY3Rpb24iLCAidGV4dCIsICJwdW5jdHVhdGlvbi5vcGVyYXRvciIsCiAgICAgICAgICAgICAgICAgICAgInRleHQiLCAic3RvcmFnZS50eXBlIiwgInRleHQiLCAicGFyZW4ubHBhcmVuIgogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHJlZ2V4IDogIigiICsgaWRlbnRpZmllclJlICsgIikoXFxzKikoOikoXFxzKikoZnVuY3Rpb24pKFxccyopKFxcKCkiLAogICAgICAgICAgICAgICAgbmV4dDogImZ1bmN0aW9uX2FyZ3VtZW50cyIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiBbCiAgICAgICAgICAgICAgICAgICAgInRleHQiLCAidGV4dCIsICJzdG9yYWdlLnR5cGUiLCAidGV4dCIsICJwYXJlbi5scGFyZW4iCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgcmVnZXggOiAiKDopKFxccyopKGZ1bmN0aW9uKShcXHMqKShcXCgpIiwKICAgICAgICAgICAgICAgIG5leHQ6ICJmdW5jdGlvbl9hcmd1bWVudHMiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuIDogImtleXdvcmQiLAogICAgICAgICAgICAgICAgcmVnZXggOiAiZnJvbSg/PVxccyooJ3xcIikpIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbiA6ICJrZXl3b3JkIiwKICAgICAgICAgICAgICAgIHJlZ2V4IDogIig/OiIgKyBrd0JlZm9yZVJlICsgIilcXGIiLAogICAgICAgICAgICAgICAgbmV4dCA6ICJzdGFydCIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiBbInN1cHBvcnQuY29uc3RhbnQiXSwKICAgICAgICAgICAgICAgIHJlZ2V4IDogL3RoYXRcYi8KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiBbInN0b3JhZ2UudHlwZSIsICJwdW5jdHVhdGlvbi5vcGVyYXRvciIsICJzdXBwb3J0LmZ1bmN0aW9uLmZpcmVidWciXSwKICAgICAgICAgICAgICAgIHJlZ2V4IDogLyhjb25zb2xlKShcLikod2FybnxpbmZvfGxvZ3xlcnJvcnx0aW1lfHRyYWNlfHRpbWVFbmR8YXNzZXJ0KVxiLwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbiA6IGtleXdvcmRNYXBwZXIsCiAgICAgICAgICAgICAgICByZWdleCA6IGlkZW50aWZpZXJSZQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbiA6ICJwdW5jdHVhdGlvbi5vcGVyYXRvciIsCiAgICAgICAgICAgICAgICByZWdleCA6IC9bLl0oPyFbLl0pLywKICAgICAgICAgICAgICAgIG5leHQgIDogInByb3BlcnR5IgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbiA6ICJzdG9yYWdlLnR5cGUiLAogICAgICAgICAgICAgICAgcmVnZXggOiAvPT4vLAogICAgICAgICAgICAgICAgbmV4dCAgOiAic3RhcnQiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuIDogImtleXdvcmQub3BlcmF0b3IiLAogICAgICAgICAgICAgICAgcmVnZXggOiAvLS18XCtcK3xcLnszfXw9PT18PT18PXwhPXwhPT18PCs9P3w+Kz0/fCF8JiZ8XHxcfHxcPzp8WyEkJSYqK1wtflwvXl09Py8sCiAgICAgICAgICAgICAgICBuZXh0ICA6ICJzdGFydCIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiAicHVuY3R1YXRpb24ub3BlcmF0b3IiLAogICAgICAgICAgICAgICAgcmVnZXggOiAvWz86LDsuXS8sCiAgICAgICAgICAgICAgICBuZXh0ICA6ICJzdGFydCIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiAicGFyZW4ubHBhcmVuIiwKICAgICAgICAgICAgICAgIHJlZ2V4IDogL1tcWyh7XS8sCiAgICAgICAgICAgICAgICBuZXh0ICA6ICJzdGFydCIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiAicGFyZW4ucnBhcmVuIiwKICAgICAgICAgICAgICAgIHJlZ2V4IDogL1tcXSl9XS8KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJjb21tZW50IiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAvXiMhLiokLwogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICBwcm9wZXJ0eTogW3sKICAgICAgICAgICAgICAgIHRva2VuIDogInRleHQiLAogICAgICAgICAgICAgICAgcmVnZXggOiAiXFxzKyIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiBbCiAgICAgICAgICAgICAgICAgICAgInN0b3JhZ2UudHlwZSIsICJwdW5jdHVhdGlvbi5vcGVyYXRvciIsICJlbnRpdHkubmFtZS5mdW5jdGlvbiIsICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAia2V5d29yZC5vcGVyYXRvciIsICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAic3RvcmFnZS50eXBlIiwgInRleHQiLCAiZW50aXR5Lm5hbWUuZnVuY3Rpb24iLCAidGV4dCIsICJwYXJlbi5scGFyZW4iCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgcmVnZXggOiAiKCIgKyBpZGVudGlmaWVyUmUgKyAiKShcXC4pKCIgKyBpZGVudGlmaWVyUmUgKyIpKFxccyopKD0pKFxccyopKGZ1bmN0aW9uKSg/OihcXHMrKShcXHcrKSk/KFxccyopKFxcKCkiLAogICAgICAgICAgICAgICAgbmV4dDogImZ1bmN0aW9uX2FyZ3VtZW50cyIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiAicHVuY3R1YXRpb24ub3BlcmF0b3IiLAogICAgICAgICAgICAgICAgcmVnZXggOiAvWy5dKD8hWy5dKS8KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiAic3VwcG9ydC5mdW5jdGlvbiIsCiAgICAgICAgICAgICAgICByZWdleCA6IC8ocyg/OmgoPzppZnR8b3coPzpNb2QoPzplbGVzc0RpYWxvZ3xhbERpYWxvZyl8SGVscCkpfGNyb2xsKD86WHxCeSg/OlBhZ2VzfExpbmVzKT98WXxUbyk/fHQoPzpvcHxyaWtlKXxpKD86bnx6ZVRvQ29udGVudHxkZWJhcnxnblRleHQpfG9ydHx1KD86cHxiKD86c3RyKD86aW5nKT8pPyl8cGxpKD86Y2V8dCl8ZSg/Om5kfHQoPzpSZSg/OnNpemFibGV8cXVlc3RIZWFkZXIpfE0oPzppKD86bnV0ZXN8bGxpc2Vjb25kcyl8b250aCl8U2Vjb25kc3xIbyg/OnRLZXlzfHVycyl8WWVhcnxDdXJzb3J8VGltZSg/Om91dCk/fEludGVydmFsfFpPcHRpb25zfERhdGV8VVRDKD86TSg/OmkoPzpudXRlc3xsbGlzZWNvbmRzKXxvbnRoKXxTZWNvbmRzfEhvdXJzfERhdGV8RnVsbFllYXIpfEZ1bGxZZWFyfEFjdGl2ZSl8YXJjaCl8cXJ0fGxpY2V8YXZlUHJlZmVyZW5jZXN8bWFsbCl8aCg/Om9tZXxhbmRsZUV2ZW50KXxuYXZpZ2F0ZXxjKD86aGFyKD86Q29kZUF0fEF0KXxvKD86c3xuKD86Y2F0fHRleHR1YWx8ZmlybSl8bXBpbGUpfGVpbHxsZWFyKD86VGltZW91dHxJbnRlcnZhbCk/fGEoPzpwdHVyZUV2ZW50c3xsbCl8cmVhdGUoPzpTdHlsZVNoZWV0fFBvcHVwfEV2ZW50T2JqZWN0KSl8dCg/Om8oPzpHTVRTdHJpbmd8Uyg/OnRyaW5nfG91cmNlKXxVKD86VENTdHJpbmd8cHBlckNhc2UpfExvKD86Y2FsZVN0cmluZ3x3ZXJDYXNlKSl8ZXN0fGEoPzpufGludCg/OkVuYWJsZWQpPykpfGkoPzpzKD86TmFOfEZpbml0ZSl8bmRleE9mfHRhbGljcyl8ZCg/OmlzYWJsZUV4dGVybmFsQ2FwdHVyZXx1bXB8ZXRhY2hFdmVudCl8dSg/Om4oPzpzaGlmdHx0YWludHxlc2NhcGV8d2F0Y2gpfHBkYXRlQ29tbWFuZHMpfGooPzpvaW58YXZhRW5hYmxlZCl8cCg/Om8oPzpwfHcpfHVzaHxsdWdpbnMucmVmcmVzaHxhKD86ZGRpbmdzfHJzZSg/OkludHxGbG9hdCk/KXxyKD86aW50fG9tcHR8ZWZlcmVuY2UpKXxlKD86c2NhcGV8bmFibGVFeHRlcm5hbENhcHR1cmV8dmFsfGxlbWVudEZyb21Qb2ludHx4KD86cHxlYyg/OlNjcmlwdHxDb21tYW5kKT8pKXx2YWx1ZU9mfFVUQ3xxdWVyeUNvbW1hbmQoPzpTdGF0ZXxJbmRldGVybXxFbmFibGVkfFZhbHVlKXxmKD86aSg/Om5kfGxlKD86TW9kaWZpZWREYXRlfFNpemV8Q3JlYXRlZERhdGV8VXBkYXRlZERhdGUpfHhlZCl8byg/Om50KD86c2l6ZXxjb2xvcil8cndhcmQpfGxvb3J8cm9tQ2hhckNvZGUpfHdhdGNofGwoPzppbmt8byg/OmFkfGcpfGFzdEluZGV4T2YpfGEoPzpzaW58bmNob3J8Y29zfHQoPzp0YWNoRXZlbnR8b2J8YW4oPzoyKT8pfHBwbHl8bGVydHxiKD86c3xvcnQpKXxyKD86b3UoPzpuZHx0ZUV2ZW50cyl8ZSg/OnNpemUoPzpCeXxUbyl8Y2FsY3x0dXJuVmFsdWV8cGxhY2V8dmVyc2V8bCg/Om9hZHxlYXNlKD86Q2FwdHVyZXxFdmVudHMpKSl8YW5kb20pfGcoPzpvfGV0KD86UmVzcG9uc2VIZWFkZXJ8TSg/OmkoPzpudXRlc3xsbGlzZWNvbmRzKXxvbnRoKXxTZSg/OmNvbmRzfGxlY3Rpb24pfEhvdXJzfFllYXJ8VGltZSg/OnpvbmVPZmZzZXQpP3xEYSg/Onl8dGUpfFVUQyg/Ok0oPzppKD86bnV0ZXN8bGxpc2Vjb25kcyl8b250aCl8U2Vjb25kc3xIb3Vyc3xEYSg/Onl8dGUpfEZ1bGxZZWFyKXxGdWxsWWVhcnxBKD86dHRlbnRpb258bGxSZXNwb25zZUhlYWRlcnMpKSl8bSg/OmlufG92ZSg/OkIoPzp5fGVsb3cpfFRvKD86QWJzb2x1dGUpP3xBYm92ZSl8ZXJnZUF0dHJpYnV0ZXN8YSg/OnRjaHxyZ2luc3x4KSl8Yig/OnRvYXxpZ3xvKD86bGR8cmRlcldpZHRocyl8bGlua3xhY2spKVxiKD89XCgpLwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbiA6ICJzdXBwb3J0LmZ1bmN0aW9uLmRvbSIsCiAgICAgICAgICAgICAgICByZWdleCA6IC8ocyg/OnViKD86c3RyaW5nRGF0YXxtaXQpfHBsaXRUZXh0fGUoPzp0KD86TmFtZWRJdGVtfEF0dHJpYnV0ZSg/Ok5vZGUpPyl8bGVjdCkpfGhhcyg/OkNoaWxkTm9kZXN8RmVhdHVyZSl8bmFtZWRJdGVtfGMoPzpsKD86aWNrfG8oPzpzZXxuZU5vZGUpKXxyZWF0ZSg/OkMoPzpvbW1lbnR8REFUQVNlY3Rpb258YXB0aW9uKXxUKD86SGVhZHxleHROb2RlfEZvb3QpfERvY3VtZW50RnJhZ21lbnR8UHJvY2Vzc2luZ0luc3RydWN0aW9ufEUoPzpudGl0eVJlZmVyZW5jZXxsZW1lbnQpfEF0dHJpYnV0ZSkpfHRhYkluZGV4fGkoPzpuc2VydCg/OlJvd3xCZWZvcmV8Q2VsbHxEYXRhKXx0ZW0pfG9wZW58ZGVsZXRlKD86Um93fEMoPzplbGx8YXB0aW9uKXxUKD86SGVhZHxGb290KXxEYXRhKXxmb2N1c3x3cml0ZSg/OmxuKT98YSg/OmRkfHBwZW5kKD86Q2hpbGR8RGF0YSkpfHJlKD86c2V0fHBsYWNlKD86Q2hpbGR8RGF0YSl8bW92ZSg/Ok5hbWVkSXRlbXxDaGlsZHxBdHRyaWJ1dGUoPzpOb2RlKT8pPyl8Z2V0KD86TmFtZWRJdGVtfEVsZW1lbnQoPzpzQnkoPzpOYW1lfFRhZ05hbWV8Q2xhc3NOYW1lKXxCeUlkKXxBdHRyaWJ1dGUoPzpOb2RlKT8pfGJsdXIpXGIoPz1cKCkvCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuIDogICJzdXBwb3J0LmNvbnN0YW50IiwKICAgICAgICAgICAgICAgIHJlZ2V4IDogLyhzKD86eXN0ZW1MYW5ndWFnZXxjcig/OmlwdHN8b2xsYmFyc3xlZW4oPzpYfFl8VG9wfExlZnQpKXx0KD86eWxlKD86U2hlZXRzKT98YXR1cyg/OlRleHR8YmFyKT8pfGlibGluZyg/OkJlbG93fEFib3ZlKXxvdXJjZXx1ZmZpeGVzfGUoPzpjdXJpdHkoPzpQb2xpY3kpP3xsKD86ZWN0aW9ufGYpKSl8aCg/OmlzdG9yeXxvc3QoPzpuYW1lKT98YXMoPzpofEZvY3VzKSl8eXxYKD86TUxEb2N1bWVudHxTTERvY3VtZW50KXxuKD86ZXh0fGFtZSg/OnNwYWNlKD86c3xVUkkpfFByb3ApKXxNKD86SU5fVkFMVUV8QVhfVkFMVUUpfGMoPzpoYXJhY3RlclNldHxvKD86big/OnN0cnVjdG9yfHRyb2xsZXJzKXxva2llRW5hYmxlZHxsb3JEZXB0aHxtcCg/Om9uZW50c3xsZXRlKSl8dXJyZW50fHB1Q2xhc3N8bCg/OmkoPzpwKD86Ym9hcmREYXRhKT98ZW50SW5mb3JtYXRpb24pfG9zZWR8YXNzZXMpfGFsbGUoPzplfHIpfHJ5cHRvKXx0KD86byg/Om9sYmFyfHApfGV4dCg/OlRyYW5zZm9ybXxJbmRlbnR8RGVjb3JhdGlvbnxBbGlnbil8YWdzKXxTUVJUKD86MV8yfDIpfGkoPzpuKD86bmVyKD86SGVpZ2h0fFdpZHRoKXxwdXQpfGRzfGdub3JlQ2FzZSl8ekluZGV4fG8oPzpzY3B1fG4oPzpyZWFkeXN0YXRlY2hhbmdlfExpbmUpfHV0ZXIoPzpIZWlnaHR8V2lkdGgpfHAoPzpzUHJvZmlsZXxlbmVyKXxmZnNjcmVlbkJ1ZmZlcmluZyl8TkVHQVRJVkVfSU5GSU5JVFl8ZCg/OmkoPzpzcGxheXxhbG9nKD86SGVpZ2h0fFRvcHxXaWR0aHxMZWZ0fEFyZ3VtZW50cyl8cmVjdG9yaWVzKXxlKD86c2NyaXB0aW9ufGZhdWx0KD86U3RhdHVzfENoKD86ZWNrZWR8YXJzZXQpfFZpZXcpKSl8dSg/OnNlcig/OlByb2ZpbGV8TGFuZ3VhZ2V8QWdlbnQpfG4oPzppcXVlSUR8ZGVmaW5lZCl8cGRhdGVJbnRlcnZhbCl8X2NvbnRlbnR8cCg/Oml4ZWxEZXB0aHxvcnR8ZXJzb25hbGJhcnxrY3MxMXxsKD86dWdpbnN8YXRmb3JtKXxhKD86dGhuYW1lfGRkaW5nKD86UmlnaHR8Qm90dG9tfFRvcHxMZWZ0KXxyZW50KD86V2luZG93fExheWVyKT98Z2UoPzpYKD86T2Zmc2V0KT98WSg/Ok9mZnNldCk/KSl8cig/Om8oPzp0byg/OmNvbHx0eXBlKXxkdWN0KD86U3ViKT98bXB0ZXIpfGUoPzp2aW91c3xmaXgpKSl8ZSg/Om4oPzpjb2Rpbmd8YWJsZWRQbHVnaW4pfHgoPzp0ZXJuYWx8cGFuZG8pfG1iZWRzKXx2KD86aXNpYmlsaXR5fGVuZG9yKD86U3ViKT98TGlua2NvbG9yKXxVUkxVbmVuY29kZWR8UCg/Okl8T1NJVElWRV9JTkZJTklUWSl8Zig/OmlsZW5hbWV8byg/Om50KD86U2l6ZXxGYW1pbHl8V2VpZ2h0KXxybU5hbWUpfHJhbWUoPzpzfEVsZW1lbnQpfGdDb2xvcil8RXx3aGl0ZVNwYWNlfGwoPzppKD86c3RTdHlsZVR5cGV8big/OmVIZWlnaHR8a0NvbG9yKSl8byg/OmNhKD86dGlvbig/OmJhcik/fGxOYW1lKXx3c3JjKXxlKD86bmd0aHxmdCg/OkNvbnRleHQpPyl8YSg/OnN0KD86TSg/Om9kaWZpZWR8YXRjaCl8SW5kZXh8UGFyZW4pfHllcig/OnN8WCl8bmd1YWdlKSl8YSg/OnBwKD86TWlub3JWZXJzaW9ufE5hbWV8Q28oPzpkZU5hbWV8cmUpfFZlcnNpb24pfHZhaWwoPzpIZWlnaHR8VG9wfFdpZHRofExlZnQpfGxsfHIoPzppdHl8Z3VtZW50cyl8TGlua2NvbG9yfGJvdmUpfHIoPzppZ2h0KD86Q29udGV4dCk/fGUoPzpzcG9uc2UoPzpYTUx8VGV4dCl8YWR5U3RhdGUpKXxnbG9iYWx8eHxtKD86aW1lVHlwZXN8dWx0aWxpbmV8ZW51YmFyfGFyZ2luKD86UmlnaHR8Qm90dG9tfFRvcHxMZWZ0KSl8TCg/Ok4oPzoxMHwyKXxPRyg/OjEwRXwyRSkpfGIoPzpvKD86dHRvbXxyZGVyKD86V2lkdGh8UmlnaHRXaWR0aHxCb3R0b21XaWR0aHxTdHlsZXxDb2xvcnxUb3BXaWR0aHxMZWZ0V2lkdGgpKXx1ZmZlckRlcHRofGVsb3d8YWNrZ3JvdW5kKD86Q29sb3J8SW1hZ2UpKSlcYi8KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiAiaWRlbnRpZmllciIsCiAgICAgICAgICAgICAgICByZWdleCA6IGlkZW50aWZpZXJSZQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICByZWdleDogIiIsCiAgICAgICAgICAgICAgICB0b2tlbjogImVtcHR5IiwKICAgICAgICAgICAgICAgIG5leHQ6ICJub19yZWdleCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInN0YXJ0IjogWwogICAgICAgICAgICBEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMuZ2V0U3RhcnRSdWxlKCJkb2Mtc3RhcnQiKSwKICAgICAgICAgICAgY29tbWVudHMoInN0YXJ0IiksCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRva2VuOiAic3RyaW5nLnJlZ2V4cCIsCiAgICAgICAgICAgICAgICByZWdleDogIlxcLyIsCiAgICAgICAgICAgICAgICBuZXh0OiAicmVnZXgiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuIDogInRleHQiLAogICAgICAgICAgICAgICAgcmVnZXggOiAiXFxzK3xeJCIsCiAgICAgICAgICAgICAgICBuZXh0IDogInN0YXJ0IgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImVtcHR5IiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiIiwKICAgICAgICAgICAgICAgIG5leHQ6ICJub19yZWdleCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJlZ2V4IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0b2tlbjogInJlZ2V4cC5rZXl3b3JkLm9wZXJhdG9yIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiXFxcXCg/OnVbXFxkYS1mQS1GXXs0fXx4W1xcZGEtZkEtRl17Mn18LikiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAic3RyaW5nLnJlZ2V4cCIsCiAgICAgICAgICAgICAgICByZWdleDogIi9bc3huZ2lteV0qIiwKICAgICAgICAgICAgICAgIG5leHQ6ICJub19yZWdleCIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiAiaW52YWxpZCIsCiAgICAgICAgICAgICAgICByZWdleDogL1x7XGQrXGIsP1xkKlx9WysqXXxbKyokXj9dWysqXXxbJF5dWz9dfFw/ezMsfS8KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiAiY29uc3RhbnQubGFuZ3VhZ2UuZXNjYXBlIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAvXChcP1s6PSFdfFwpfFx7XGQrXGIsP1xkKlx9fFsrKl1cP3xbKCkkXisqPy5dLwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbiA6ICJjb25zdGFudC5sYW5ndWFnZS5kZWxpbWl0ZXIiLAogICAgICAgICAgICAgICAgcmVnZXg6IC9cfC8KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJjb25zdGFudC5sYW5ndWFnZS5lc2NhcGUiLAogICAgICAgICAgICAgICAgcmVnZXg6IC9cW1xePy8sCiAgICAgICAgICAgICAgICBuZXh0OiAicmVnZXhfY2hhcmFjdGVyX2NsYXNzIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImVtcHR5IiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiJCIsCiAgICAgICAgICAgICAgICBuZXh0OiAibm9fcmVnZXgiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRlZmF1bHRUb2tlbjogInN0cmluZy5yZWdleHAiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJyZWdleF9jaGFyYWN0ZXJfY2xhc3MiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRva2VuOiAicmVnZXhwLmNoYXJjbGFzcy5rZXl3b3JkLm9wZXJhdG9yIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiXFxcXCg/OnVbXFxkYS1mQS1GXXs0fXx4W1xcZGEtZkEtRl17Mn18LikiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAiY29uc3RhbnQubGFuZ3VhZ2UuZXNjYXBlIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiXSIsCiAgICAgICAgICAgICAgICBuZXh0OiAicmVnZXgiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAiY29uc3RhbnQubGFuZ3VhZ2UuZXNjYXBlIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiLSIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJlbXB0eSIsCiAgICAgICAgICAgICAgICByZWdleDogIiQiLAogICAgICAgICAgICAgICAgbmV4dDogIm5vX3JlZ2V4IgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBkZWZhdWx0VG9rZW46ICJzdHJpbmcucmVnZXhwLmNoYXJhY2h0ZXJjbGFzcyIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImZ1bmN0aW9uX2FyZ3VtZW50cyI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdG9rZW46ICJ2YXJpYWJsZS5wYXJhbWV0ZXIiLAogICAgICAgICAgICAgICAgcmVnZXg6IGlkZW50aWZpZXJSZQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogInB1bmN0dWF0aW9uLm9wZXJhdG9yIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiWywgXSsiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAicHVuY3R1YXRpb24ub3BlcmF0b3IiLAogICAgICAgICAgICAgICAgcmVnZXg6ICIkIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImVtcHR5IiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiIiwKICAgICAgICAgICAgICAgIG5leHQ6ICJub19yZWdleCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInFxc3RyaW5nIiA6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdG9rZW4gOiAiY29uc3RhbnQubGFuZ3VhZ2UuZXNjYXBlIiwKICAgICAgICAgICAgICAgIHJlZ2V4IDogZXNjYXBlZFJlCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuIDogInN0cmluZyIsCiAgICAgICAgICAgICAgICByZWdleCA6ICJcXFxcJCIsCiAgICAgICAgICAgICAgICBjb25zdW1lTGluZUVuZCAgOiB0cnVlCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuIDogInN0cmluZyIsCiAgICAgICAgICAgICAgICByZWdleCA6ICcifCQnLAogICAgICAgICAgICAgICAgbmV4dCAgOiAibm9fcmVnZXgiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRlZmF1bHRUb2tlbjogInN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInFzdHJpbmciIDogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0b2tlbiA6ICJjb25zdGFudC5sYW5ndWFnZS5lc2NhcGUiLAogICAgICAgICAgICAgICAgcmVnZXggOiBlc2NhcGVkUmUKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgIHJlZ2V4IDogIlxcXFwkIiwKICAgICAgICAgICAgICAgIGNvbnN1bWVMaW5lRW5kICA6IHRydWUKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgIHJlZ2V4IDogIid8JCIsCiAgICAgICAgICAgICAgICBuZXh0ICA6ICJub19yZWdleCIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgZGVmYXVsdFRva2VuOiAic3RyaW5nIgogICAgICAgICAgICB9CiAgICAgICAgXQogICAgfTsKCgogICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLm5vRVM2KSB7CiAgICAgICAgdGhpcy4kcnVsZXMubm9fcmVnZXgudW5zaGlmdCh7CiAgICAgICAgICAgIHJlZ2V4OiAiW3t9XSIsIG9uTWF0Y2g6IGZ1bmN0aW9uKHZhbCwgc3RhdGUsIHN0YWNrKSB7CiAgICAgICAgICAgICAgICB0aGlzLm5leHQgPSB2YWwgPT0gInsiID8gdGhpcy5uZXh0U3RhdGUgOiAiIjsKICAgICAgICAgICAgICAgIGlmICh2YWwgPT0gInsiICYmIHN0YWNrLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIHN0YWNrLnVuc2hpZnQoInN0YXJ0Iiwgc3RhdGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsID09ICJ9IiAmJiBzdGFjay5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dCA9IHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubmV4dC5pbmRleE9mKCJzdHJpbmciKSAhPSAtMSB8fCB0aGlzLm5leHQuaW5kZXhPZigianN4IikgIT0gLTEpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAicGFyZW4ucXVhc2kuZW5kIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB2YWwgPT0gInsiID8gInBhcmVuLmxwYXJlbiIgOiAicGFyZW4ucnBhcmVuIjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbmV4dFN0YXRlOiAic3RhcnQiCiAgICAgICAgfSwgewogICAgICAgICAgICB0b2tlbiA6ICJzdHJpbmcucXVhc2kuc3RhcnQiLAogICAgICAgICAgICByZWdleCA6IC9gLywKICAgICAgICAgICAgcHVzaCAgOiBbewogICAgICAgICAgICAgICAgdG9rZW4gOiAiY29uc3RhbnQubGFuZ3VhZ2UuZXNjYXBlIiwKICAgICAgICAgICAgICAgIHJlZ2V4IDogZXNjYXBlZFJlCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuIDogInBhcmVuLnF1YXNpLnN0YXJ0IiwKICAgICAgICAgICAgICAgIHJlZ2V4IDogL1wkey8sCiAgICAgICAgICAgICAgICBwdXNoICA6ICJzdGFydCIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW4gOiAic3RyaW5nLnF1YXNpLmVuZCIsCiAgICAgICAgICAgICAgICByZWdleCA6IC9gLywKICAgICAgICAgICAgICAgIG5leHQgIDogInBvcCIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgZGVmYXVsdFRva2VuOiAic3RyaW5nLnF1YXNpIgogICAgICAgICAgICB9XQogICAgICAgIH0pOwoKICAgICAgICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5qc3ggIT0gZmFsc2UpCiAgICAgICAgICAgIEpTWC5jYWxsKHRoaXMpOwogICAgfQoKICAgIHRoaXMuZW1iZWRSdWxlcyhEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMsICJkb2MtIiwKICAgICAgICBbIERvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5nZXRFbmRSdWxlKCJub19yZWdleCIpIF0pOwoKICAgIHRoaXMubm9ybWFsaXplUnVsZXMoKTsKfTsKCm9vcC5pbmhlcml0cyhKYXZhU2NyaXB0SGlnaGxpZ2h0UnVsZXMsIFRleHRIaWdobGlnaHRSdWxlcyk7CgpmdW5jdGlvbiBKU1goKSB7CiAgICB2YXIgdGFnUmVnZXggPSBpZGVudGlmaWVyUmUucmVwbGFjZSgiXFxkIiwgIlxcZFxcLSIpOwogICAgdmFyIGpzeFRhZyA9IHsKICAgICAgICBvbk1hdGNoIDogZnVuY3Rpb24odmFsLCBzdGF0ZSwgc3RhY2spIHsKICAgICAgICAgICAgdmFyIG9mZnNldCA9IHZhbC5jaGFyQXQoMSkgPT0gIi8iID8gMiA6IDE7CiAgICAgICAgICAgIGlmIChvZmZzZXQgPT0gMSkgewogICAgICAgICAgICAgICAgaWYgKHN0YXRlICE9IHRoaXMubmV4dFN0YXRlKQogICAgICAgICAgICAgICAgICAgIHN0YWNrLnVuc2hpZnQodGhpcy5uZXh0LCB0aGlzLm5leHRTdGF0ZSwgMCk7CiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgc3RhY2sudW5zaGlmdCh0aGlzLm5leHQpOwogICAgICAgICAgICAgICAgc3RhY2tbMl0rKzsKICAgICAgICAgICAgfSBlbHNlIGlmIChvZmZzZXQgPT0gMikgewogICAgICAgICAgICAgICAgaWYgKHN0YXRlID09IHRoaXMubmV4dFN0YXRlKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhY2tbMV0tLTsKICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YWNrWzFdIHx8IHN0YWNrWzFdIDwgMCkgewogICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgICAgICAgICAgICBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gW3sKICAgICAgICAgICAgICAgIHR5cGU6ICJtZXRhLnRhZy5wdW5jdHVhdGlvbi4iICsgKG9mZnNldCA9PSAxID8gIiIgOiAiZW5kLSIpICsgInRhZy1vcGVuLnhtbCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsLnNsaWNlKDAsIG9mZnNldCkKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdHlwZTogIm1ldGEudGFnLnRhZy1uYW1lLnhtbCIsCiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsLnN1YnN0cihvZmZzZXQpCiAgICAgICAgICAgIH1dOwogICAgICAgIH0sCiAgICAgICAgcmVnZXggOiAiPC8/IiArIHRhZ1JlZ2V4ICsgIiIsCiAgICAgICAgbmV4dDogImpzeEF0dHJpYnV0ZXMiLAogICAgICAgIG5leHRTdGF0ZTogImpzeCIKICAgIH07CiAgICB0aGlzLiRydWxlcy5zdGFydC51bnNoaWZ0KGpzeFRhZyk7CiAgICB2YXIganN4SnNSdWxlID0gewogICAgICAgIHJlZ2V4OiAieyIsCiAgICAgICAgdG9rZW46ICJwYXJlbi5xdWFzaS5zdGFydCIsCiAgICAgICAgcHVzaDogInN0YXJ0IgogICAgfTsKICAgIHRoaXMuJHJ1bGVzLmpzeCA9IFsKICAgICAgICBqc3hKc1J1bGUsCiAgICAgICAganN4VGFnLAogICAgICAgIHtpbmNsdWRlIDogInJlZmVyZW5jZSJ9LAogICAgICAgIHtkZWZhdWx0VG9rZW46ICJzdHJpbmcifQogICAgXTsKICAgIHRoaXMuJHJ1bGVzLmpzeEF0dHJpYnV0ZXMgPSBbewogICAgICAgIHRva2VuIDogIm1ldGEudGFnLnB1bmN0dWF0aW9uLnRhZy1jbG9zZS54bWwiLAogICAgICAgIHJlZ2V4IDogIi8/PiIsCiAgICAgICAgb25NYXRjaCA6IGZ1bmN0aW9uKHZhbHVlLCBjdXJyZW50U3RhdGUsIHN0YWNrKSB7CiAgICAgICAgICAgIGlmIChjdXJyZW50U3RhdGUgPT0gc3RhY2tbMF0pCiAgICAgICAgICAgICAgICBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09IDIpIHsKICAgICAgICAgICAgICAgIGlmIChzdGFja1swXSA9PSB0aGlzLm5leHRTdGF0ZSkKICAgICAgICAgICAgICAgICAgICBzdGFja1sxXS0tOwogICAgICAgICAgICAgICAgaWYgKCFzdGFja1sxXSB8fCBzdGFja1sxXSA8IDApIHsKICAgICAgICAgICAgICAgICAgICBzdGFjay5zcGxpY2UoMCwgMik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdGhpcy5uZXh0ID0gc3RhY2tbMF0gfHwgInN0YXJ0IjsKICAgICAgICAgICAgcmV0dXJuIFt7dHlwZTogdGhpcy50b2tlbiwgdmFsdWU6IHZhbHVlfV07CiAgICAgICAgfSwKICAgICAgICBuZXh0U3RhdGU6ICJqc3giCiAgICB9LAogICAganN4SnNSdWxlLAogICAgY29tbWVudHMoImpzeEF0dHJpYnV0ZXMiKSwKICAgIHsKICAgICAgICB0b2tlbiA6ICJlbnRpdHkub3RoZXIuYXR0cmlidXRlLW5hbWUueG1sIiwKICAgICAgICByZWdleCA6IHRhZ1JlZ2V4CiAgICB9LCB7CiAgICAgICAgdG9rZW4gOiAia2V5d29yZC5vcGVyYXRvci5hdHRyaWJ1dGUtZXF1YWxzLnhtbCIsCiAgICAgICAgcmVnZXggOiAiPSIKICAgIH0sIHsKICAgICAgICB0b2tlbiA6ICJ0ZXh0LnRhZy13aGl0ZXNwYWNlLnhtbCIsCiAgICAgICAgcmVnZXggOiAiXFxzKyIKICAgIH0sIHsKICAgICAgICB0b2tlbiA6ICJzdHJpbmcuYXR0cmlidXRlLXZhbHVlLnhtbCIsCiAgICAgICAgcmVnZXggOiAiJyIsCiAgICAgICAgc3RhdGVOYW1lIDogImpzeF9hdHRyX3EiLAogICAgICAgIHB1c2ggOiBbCiAgICAgICAgICAgIHt0b2tlbiA6ICJzdHJpbmcuYXR0cmlidXRlLXZhbHVlLnhtbCIsIHJlZ2V4OiAiJyIsIG5leHQ6ICJwb3AifSwKICAgICAgICAgICAge2luY2x1ZGUgOiAicmVmZXJlbmNlIn0sCiAgICAgICAgICAgIHtkZWZhdWx0VG9rZW4gOiAic3RyaW5nLmF0dHJpYnV0ZS12YWx1ZS54bWwifQogICAgICAgIF0KICAgIH0sIHsKICAgICAgICB0b2tlbiA6ICJzdHJpbmcuYXR0cmlidXRlLXZhbHVlLnhtbCIsCiAgICAgICAgcmVnZXggOiAnIicsCiAgICAgICAgc3RhdGVOYW1lIDogImpzeF9hdHRyX3FxIiwKICAgICAgICBwdXNoIDogWwogICAgICAgICAgICB7dG9rZW4gOiAic3RyaW5nLmF0dHJpYnV0ZS12YWx1ZS54bWwiLCByZWdleDogJyInLCBuZXh0OiAicG9wIn0sCiAgICAgICAgICAgIHtpbmNsdWRlIDogInJlZmVyZW5jZSJ9LAogICAgICAgICAgICB7ZGVmYXVsdFRva2VuIDogInN0cmluZy5hdHRyaWJ1dGUtdmFsdWUueG1sIn0KICAgICAgICBdCiAgICB9LAogICAganN4VGFnCiAgICBdOwogICAgdGhpcy4kcnVsZXMucmVmZXJlbmNlID0gW3sKICAgICAgICB0b2tlbiA6ICJjb25zdGFudC5sYW5ndWFnZS5lc2NhcGUucmVmZXJlbmNlLnhtbCIsCiAgICAgICAgcmVnZXggOiAiKD86JiNbMC05XSs7KXwoPzomI3hbMC05YS1mQS1GXSs7KXwoPzomW2EtekEtWjAtOV86XFwuLV0rOykiCiAgICB9XTsKfQoKZnVuY3Rpb24gY29tbWVudHMobmV4dCkgewogICAgcmV0dXJuIFsKICAgICAgICB7CiAgICAgICAgICAgIHRva2VuIDogImNvbW1lbnQiLCAvLyBtdWx0aSBsaW5lIGNvbW1lbnQKICAgICAgICAgICAgcmVnZXggOiAvXC9cKi8sCiAgICAgICAgICAgIG5leHQ6IFsKICAgICAgICAgICAgICAgIERvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5nZXRUYWdSdWxlKCksCiAgICAgICAgICAgICAgICB7dG9rZW4gOiAiY29tbWVudCIsIHJlZ2V4IDogIlxcKlxcLyIsIG5leHQgOiBuZXh0IHx8ICJwb3AifSwKICAgICAgICAgICAgICAgIHtkZWZhdWx0VG9rZW4gOiAiY29tbWVudCIsIGNhc2VJbnNlbnNpdGl2ZTogdHJ1ZX0KICAgICAgICAgICAgXQogICAgICAgIH0sIHsKICAgICAgICAgICAgdG9rZW4gOiAiY29tbWVudCIsCiAgICAgICAgICAgIHJlZ2V4IDogIlxcL1xcLyIsCiAgICAgICAgICAgIG5leHQ6IFsKICAgICAgICAgICAgICAgIERvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5nZXRUYWdSdWxlKCksCiAgICAgICAgICAgICAgICB7dG9rZW4gOiAiY29tbWVudCIsIHJlZ2V4IDogIiR8XiIsIG5leHQgOiBuZXh0IHx8ICJwb3AifSwKICAgICAgICAgICAgICAgIHtkZWZhdWx0VG9rZW4gOiAiY29tbWVudCIsIGNhc2VJbnNlbnNpdGl2ZTogdHJ1ZX0KICAgICAgICAgICAgXQogICAgICAgIH0KICAgIF07Cn0KZXhwb3J0cy5KYXZhU2NyaXB0SGlnaGxpZ2h0UnVsZXMgPSBKYXZhU2NyaXB0SGlnaGxpZ2h0UnVsZXM7Cn0pOwoKYWNlLmRlZmluZSgiYWNlL21vZGUvbWF0Y2hpbmdfYnJhY2Vfb3V0ZGVudCIsWyJyZXF1aXJlIiwiZXhwb3J0cyIsIm1vZHVsZSIsImFjZS9yYW5nZSJdLCBmdW5jdGlvbihyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpIHsKInVzZSBzdHJpY3QiOwoKdmFyIFJhbmdlID0gcmVxdWlyZSgiLi4vcmFuZ2UiKS5SYW5nZTsKCnZhciBNYXRjaGluZ0JyYWNlT3V0ZGVudCA9IGZ1bmN0aW9uKCkge307CgooZnVuY3Rpb24oKSB7CgogICAgdGhpcy5jaGVja091dGRlbnQgPSBmdW5jdGlvbihsaW5lLCBpbnB1dCkgewogICAgICAgIGlmICghIC9eXHMrJC8udGVzdChsaW5lKSkKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwoKICAgICAgICByZXR1cm4gL15ccypcfS8udGVzdChpbnB1dCk7CiAgICB9OwoKICAgIHRoaXMuYXV0b091dGRlbnQgPSBmdW5jdGlvbihkb2MsIHJvdykgewogICAgICAgIHZhciBsaW5lID0gZG9jLmdldExpbmUocm93KTsKICAgICAgICB2YXIgbWF0Y2ggPSBsaW5lLm1hdGNoKC9eKFxzKlx9KS8pOwoKICAgICAgICBpZiAoIW1hdGNoKSByZXR1cm4gMDsKCiAgICAgICAgdmFyIGNvbHVtbiA9IG1hdGNoWzFdLmxlbmd0aDsKICAgICAgICB2YXIgb3BlbkJyYWNlUG9zID0gZG9jLmZpbmRNYXRjaGluZ0JyYWNrZXQoe3Jvdzogcm93LCBjb2x1bW46IGNvbHVtbn0pOwoKICAgICAgICBpZiAoIW9wZW5CcmFjZVBvcyB8fCBvcGVuQnJhY2VQb3Mucm93ID09IHJvdykgcmV0dXJuIDA7CgogICAgICAgIHZhciBpbmRlbnQgPSB0aGlzLiRnZXRJbmRlbnQoZG9jLmdldExpbmUob3BlbkJyYWNlUG9zLnJvdykpOwogICAgICAgIGRvYy5yZXBsYWNlKG5ldyBSYW5nZShyb3csIDAsIHJvdywgY29sdW1uLTEpLCBpbmRlbnQpOwogICAgfTsKCiAgICB0aGlzLiRnZXRJbmRlbnQgPSBmdW5jdGlvbihsaW5lKSB7CiAgICAgICAgcmV0dXJuIGxpbmUubWF0Y2goL15ccyovKVswXTsKICAgIH07Cgp9KS5jYWxsKE1hdGNoaW5nQnJhY2VPdXRkZW50LnByb3RvdHlwZSk7CgpleHBvcnRzLk1hdGNoaW5nQnJhY2VPdXRkZW50ID0gTWF0Y2hpbmdCcmFjZU91dGRlbnQ7Cn0pOwoKYWNlLmRlZmluZSgiYWNlL21vZGUvZm9sZGluZy9jc3R5bGUiLFsicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJhY2UvbGliL29vcCIsImFjZS9yYW5nZSIsImFjZS9tb2RlL2ZvbGRpbmcvZm9sZF9tb2RlIl0sIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkgewoidXNlIHN0cmljdCI7Cgp2YXIgb29wID0gcmVxdWlyZSgiLi4vLi4vbGliL29vcCIpOwp2YXIgUmFuZ2UgPSByZXF1aXJlKCIuLi8uLi9yYW5nZSIpLlJhbmdlOwp2YXIgQmFzZUZvbGRNb2RlID0gcmVxdWlyZSgiLi9mb2xkX21vZGUiKS5Gb2xkTW9kZTsKCnZhciBGb2xkTW9kZSA9IGV4cG9ydHMuRm9sZE1vZGUgPSBmdW5jdGlvbihjb21tZW50UmVnZXgpIHsKICAgIGlmIChjb21tZW50UmVnZXgpIHsKICAgICAgICB0aGlzLmZvbGRpbmdTdGFydE1hcmtlciA9IG5ldyBSZWdFeHAoCiAgICAgICAgICAgIHRoaXMuZm9sZGluZ1N0YXJ0TWFya2VyLnNvdXJjZS5yZXBsYWNlKC9cfFtefF0qPyQvLCAifCIgKyBjb21tZW50UmVnZXguc3RhcnQpCiAgICAgICAgKTsKICAgICAgICB0aGlzLmZvbGRpbmdTdG9wTWFya2VyID0gbmV3IFJlZ0V4cCgKICAgICAgICAgICAgdGhpcy5mb2xkaW5nU3RvcE1hcmtlci5zb3VyY2UucmVwbGFjZSgvXHxbXnxdKj8kLywgInwiICsgY29tbWVudFJlZ2V4LmVuZCkKICAgICAgICApOwogICAgfQp9Owpvb3AuaW5oZXJpdHMoRm9sZE1vZGUsIEJhc2VGb2xkTW9kZSk7CgooZnVuY3Rpb24oKSB7CiAgICAKICAgIHRoaXMuZm9sZGluZ1N0YXJ0TWFya2VyID0gLyhbXHtcW1woXSlbXlx9XF1cKV0qJHxeXHMqKFwvXCopLzsKICAgIHRoaXMuZm9sZGluZ1N0b3BNYXJrZXIgPSAvXlteXFtce1woXSooW1x9XF1cKV0pfF5bXHNcKl0qKFwqXC8pLzsKICAgIHRoaXMuc2luZ2xlTGluZUJsb2NrQ29tbWVudFJlPSAvXlxzKihcL1wqKS4qXCpcL1xzKiQvOwogICAgdGhpcy50cmlwbGVTdGFyQmxvY2tDb21tZW50UmUgPSAvXlxzKihcL1wqXCpcKikuKlwqXC9ccyokLzsKICAgIHRoaXMuc3RhcnRSZWdpb25SZSA9IC9eXHMqKFwvXCp8XC9cLykjP3JlZ2lvblxiLzsKICAgIHRoaXMuX2dldEZvbGRXaWRnZXRCYXNlID0gdGhpcy5nZXRGb2xkV2lkZ2V0OwogICAgdGhpcy5nZXRGb2xkV2lkZ2V0ID0gZnVuY3Rpb24oc2Vzc2lvbiwgZm9sZFN0eWxlLCByb3cpIHsKICAgICAgICB2YXIgbGluZSA9IHNlc3Npb24uZ2V0TGluZShyb3cpOwogICAgCiAgICAgICAgaWYgKHRoaXMuc2luZ2xlTGluZUJsb2NrQ29tbWVudFJlLnRlc3QobGluZSkpIHsKICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXJ0UmVnaW9uUmUudGVzdChsaW5lKSAmJiAhdGhpcy50cmlwbGVTdGFyQmxvY2tDb21tZW50UmUudGVzdChsaW5lKSkKICAgICAgICAgICAgICAgIHJldHVybiAiIjsKICAgICAgICB9CiAgICAKICAgICAgICB2YXIgZncgPSB0aGlzLl9nZXRGb2xkV2lkZ2V0QmFzZShzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdyk7CiAgICAKICAgICAgICBpZiAoIWZ3ICYmIHRoaXMuc3RhcnRSZWdpb25SZS50ZXN0KGxpbmUpKQogICAgICAgICAgICByZXR1cm4gInN0YXJ0IjsgLy8gbGluZUNvbW1lbnRSZWdpb25TdGFydAogICAgCiAgICAgICAgcmV0dXJuIGZ3OwogICAgfTsKCiAgICB0aGlzLmdldEZvbGRXaWRnZXRSYW5nZSA9IGZ1bmN0aW9uKHNlc3Npb24sIGZvbGRTdHlsZSwgcm93LCBmb3JjZU11bHRpbGluZSkgewogICAgICAgIHZhciBsaW5lID0gc2Vzc2lvbi5nZXRMaW5lKHJvdyk7CiAgICAgICAgCiAgICAgICAgaWYgKHRoaXMuc3RhcnRSZWdpb25SZS50ZXN0KGxpbmUpKQogICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21tZW50UmVnaW9uQmxvY2soc2Vzc2lvbiwgbGluZSwgcm93KTsKICAgICAgICAKICAgICAgICB2YXIgbWF0Y2ggPSBsaW5lLm1hdGNoKHRoaXMuZm9sZGluZ1N0YXJ0TWFya2VyKTsKICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgICAgdmFyIGkgPSBtYXRjaC5pbmRleDsKCiAgICAgICAgICAgIGlmIChtYXRjaFsxXSkKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wZW5pbmdCcmFja2V0QmxvY2soc2Vzc2lvbiwgbWF0Y2hbMV0sIHJvdywgaSk7CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgdmFyIHJhbmdlID0gc2Vzc2lvbi5nZXRDb21tZW50Rm9sZFJhbmdlKHJvdywgaSArIG1hdGNoWzBdLmxlbmd0aCwgMSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAocmFuZ2UgJiYgIXJhbmdlLmlzTXVsdGlMaW5lKCkpIHsKICAgICAgICAgICAgICAgIGlmIChmb3JjZU11bHRpbGluZSkgewogICAgICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRTZWN0aW9uUmFuZ2Uoc2Vzc2lvbiwgcm93KTsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZm9sZFN0eWxlICE9ICJhbGwiKQogICAgICAgICAgICAgICAgICAgIHJhbmdlID0gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgcmV0dXJuIHJhbmdlOwogICAgICAgIH0KCiAgICAgICAgaWYgKGZvbGRTdHlsZSA9PT0gIm1hcmtiZWdpbiIpCiAgICAgICAgICAgIHJldHVybjsKCiAgICAgICAgdmFyIG1hdGNoID0gbGluZS5tYXRjaCh0aGlzLmZvbGRpbmdTdG9wTWFya2VyKTsKICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgICAgdmFyIGkgPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDsKCiAgICAgICAgICAgIGlmIChtYXRjaFsxXSkKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb3NpbmdCcmFja2V0QmxvY2soc2Vzc2lvbiwgbWF0Y2hbMV0sIHJvdywgaSk7CgogICAgICAgICAgICByZXR1cm4gc2Vzc2lvbi5nZXRDb21tZW50Rm9sZFJhbmdlKHJvdywgaSwgLTEpOwogICAgICAgIH0KICAgIH07CiAgICAKICAgIHRoaXMuZ2V0U2VjdGlvblJhbmdlID0gZnVuY3Rpb24oc2Vzc2lvbiwgcm93KSB7CiAgICAgICAgdmFyIGxpbmUgPSBzZXNzaW9uLmdldExpbmUocm93KTsKICAgICAgICB2YXIgc3RhcnRJbmRlbnQgPSBsaW5lLnNlYXJjaCgvXFMvKTsKICAgICAgICB2YXIgc3RhcnRSb3cgPSByb3c7CiAgICAgICAgdmFyIHN0YXJ0Q29sdW1uID0gbGluZS5sZW5ndGg7CiAgICAgICAgcm93ID0gcm93ICsgMTsKICAgICAgICB2YXIgZW5kUm93ID0gcm93OwogICAgICAgIHZhciBtYXhSb3cgPSBzZXNzaW9uLmdldExlbmd0aCgpOwogICAgICAgIHdoaWxlICgrK3JvdyA8IG1heFJvdykgewogICAgICAgICAgICBsaW5lID0gc2Vzc2lvbi5nZXRMaW5lKHJvdyk7CiAgICAgICAgICAgIHZhciBpbmRlbnQgPSBsaW5lLnNlYXJjaCgvXFMvKTsKICAgICAgICAgICAgaWYgKGluZGVudCA9PT0gLTEpCiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgaWYgIChzdGFydEluZGVudCA+IGluZGVudCkKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB2YXIgc3ViUmFuZ2UgPSB0aGlzLmdldEZvbGRXaWRnZXRSYW5nZShzZXNzaW9uLCAiYWxsIiwgcm93KTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChzdWJSYW5nZSkgewogICAgICAgICAgICAgICAgaWYgKHN1YlJhbmdlLnN0YXJ0LnJvdyA8PSBzdGFydFJvdykgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdWJSYW5nZS5pc011bHRpTGluZSgpKSB7CiAgICAgICAgICAgICAgICAgICAgcm93ID0gc3ViUmFuZ2UuZW5kLnJvdzsKICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnRJbmRlbnQgPT0gaW5kZW50KSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZW5kUm93ID0gcm93OwogICAgICAgIH0KICAgICAgICAKICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHN0YXJ0Um93LCBzdGFydENvbHVtbiwgZW5kUm93LCBzZXNzaW9uLmdldExpbmUoZW5kUm93KS5sZW5ndGgpOwogICAgfTsKICAgIHRoaXMuZ2V0Q29tbWVudFJlZ2lvbkJsb2NrID0gZnVuY3Rpb24oc2Vzc2lvbiwgbGluZSwgcm93KSB7CiAgICAgICAgdmFyIHN0YXJ0Q29sdW1uID0gbGluZS5zZWFyY2goL1xzKiQvKTsKICAgICAgICB2YXIgbWF4Um93ID0gc2Vzc2lvbi5nZXRMZW5ndGgoKTsKICAgICAgICB2YXIgc3RhcnRSb3cgPSByb3c7CiAgICAgICAgCiAgICAgICAgdmFyIHJlID0gL15ccyooPzpcL1wqfFwvXC98LS0pIz8oZW5kKT9yZWdpb25cYi87CiAgICAgICAgdmFyIGRlcHRoID0gMTsKICAgICAgICB3aGlsZSAoKytyb3cgPCBtYXhSb3cpIHsKICAgICAgICAgICAgbGluZSA9IHNlc3Npb24uZ2V0TGluZShyb3cpOwogICAgICAgICAgICB2YXIgbSA9IHJlLmV4ZWMobGluZSk7CiAgICAgICAgICAgIGlmICghbSkgY29udGludWU7CiAgICAgICAgICAgIGlmIChtWzFdKSBkZXB0aC0tOwogICAgICAgICAgICBlbHNlIGRlcHRoKys7CgogICAgICAgICAgICBpZiAoIWRlcHRoKSBicmVhazsKICAgICAgICB9CgogICAgICAgIHZhciBlbmRSb3cgPSByb3c7CiAgICAgICAgaWYgKGVuZFJvdyA+IHN0YXJ0Um93KSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2Uoc3RhcnRSb3csIHN0YXJ0Q29sdW1uLCBlbmRSb3csIGxpbmUubGVuZ3RoKTsKICAgICAgICB9CiAgICB9OwoKfSkuY2FsbChGb2xkTW9kZS5wcm90b3R5cGUpOwoKfSk7CgphY2UuZGVmaW5lKCJhY2UvbW9kZS9qYXZhc2NyaXB0IixbInJlcXVpcmUiLCJleHBvcnRzIiwibW9kdWxlIiwiYWNlL2xpYi9vb3AiLCJhY2UvbW9kZS90ZXh0IiwiYWNlL21vZGUvamF2YXNjcmlwdF9oaWdobGlnaHRfcnVsZXMiLCJhY2UvbW9kZS9tYXRjaGluZ19icmFjZV9vdXRkZW50IiwiYWNlL3dvcmtlci93b3JrZXJfY2xpZW50IiwiYWNlL21vZGUvYmVoYXZpb3VyL2NzdHlsZSIsImFjZS9tb2RlL2ZvbGRpbmcvY3N0eWxlIl0sIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkgewoidXNlIHN0cmljdCI7Cgp2YXIgb29wID0gcmVxdWlyZSgiLi4vbGliL29vcCIpOwp2YXIgVGV4dE1vZGUgPSByZXF1aXJlKCIuL3RleHQiKS5Nb2RlOwp2YXIgSmF2YVNjcmlwdEhpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZSgiLi9qYXZhc2NyaXB0X2hpZ2hsaWdodF9ydWxlcyIpLkphdmFTY3JpcHRIaWdobGlnaHRSdWxlczsKdmFyIE1hdGNoaW5nQnJhY2VPdXRkZW50ID0gcmVxdWlyZSgiLi9tYXRjaGluZ19icmFjZV9vdXRkZW50IikuTWF0Y2hpbmdCcmFjZU91dGRlbnQ7CnZhciBXb3JrZXJDbGllbnQgPSByZXF1aXJlKCIuLi93b3JrZXIvd29ya2VyX2NsaWVudCIpLldvcmtlckNsaWVudDsKdmFyIENzdHlsZUJlaGF2aW91ciA9IHJlcXVpcmUoIi4vYmVoYXZpb3VyL2NzdHlsZSIpLkNzdHlsZUJlaGF2aW91cjsKdmFyIENTdHlsZUZvbGRNb2RlID0gcmVxdWlyZSgiLi9mb2xkaW5nL2NzdHlsZSIpLkZvbGRNb2RlOwoKdmFyIE1vZGUgPSBmdW5jdGlvbigpIHsKICAgIHRoaXMuSGlnaGxpZ2h0UnVsZXMgPSBKYXZhU2NyaXB0SGlnaGxpZ2h0UnVsZXM7CiAgICAKICAgIHRoaXMuJG91dGRlbnQgPSBuZXcgTWF0Y2hpbmdCcmFjZU91dGRlbnQoKTsKICAgIHRoaXMuJGJlaGF2aW91ciA9IG5ldyBDc3R5bGVCZWhhdmlvdXIoKTsKICAgIHRoaXMuZm9sZGluZ1J1bGVzID0gbmV3IENTdHlsZUZvbGRNb2RlKCk7Cn07Cm9vcC5pbmhlcml0cyhNb2RlLCBUZXh0TW9kZSk7CgooZnVuY3Rpb24oKSB7CgogICAgdGhpcy5saW5lQ29tbWVudFN0YXJ0ID0gIi8vIjsKICAgIHRoaXMuYmxvY2tDb21tZW50ID0ge3N0YXJ0OiAiLyoiLCBlbmQ6ICIqLyJ9OwogICAgdGhpcy4kcXVvdGVzID0geyciJzogJyInLCAiJyI6ICInIiwgImAiOiAiYCJ9OwoKICAgIHRoaXMuZ2V0TmV4dExpbmVJbmRlbnQgPSBmdW5jdGlvbihzdGF0ZSwgbGluZSwgdGFiKSB7CiAgICAgICAgdmFyIGluZGVudCA9IHRoaXMuJGdldEluZGVudChsaW5lKTsKCiAgICAgICAgdmFyIHRva2VuaXplZExpbmUgPSB0aGlzLmdldFRva2VuaXplcigpLmdldExpbmVUb2tlbnMobGluZSwgc3RhdGUpOwogICAgICAgIHZhciB0b2tlbnMgPSB0b2tlbml6ZWRMaW5lLnRva2VuczsKICAgICAgICB2YXIgZW5kU3RhdGUgPSB0b2tlbml6ZWRMaW5lLnN0YXRlOwoKICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCAmJiB0b2tlbnNbdG9rZW5zLmxlbmd0aC0xXS50eXBlID09ICJjb21tZW50IikgewogICAgICAgICAgICByZXR1cm4gaW5kZW50OwogICAgICAgIH0KCiAgICAgICAgaWYgKHN0YXRlID09ICJzdGFydCIgfHwgc3RhdGUgPT0gIm5vX3JlZ2V4IikgewogICAgICAgICAgICB2YXIgbWF0Y2ggPSBsaW5lLm1hdGNoKC9eLiooPzpcYmNhc2VcYi4qOnxbXHtcKFxbXSlccyokLyk7CiAgICAgICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgICAgICAgaW5kZW50ICs9IHRhYjsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgPT0gImRvYy1zdGFydCIpIHsKICAgICAgICAgICAgaWYgKGVuZFN0YXRlID09ICJzdGFydCIgfHwgZW5kU3RhdGUgPT0gIm5vX3JlZ2V4IikgewogICAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBtYXRjaCA9IGxpbmUubWF0Y2goL15ccyooXC8/KVwqLyk7CiAgICAgICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgICAgICAgaWYgKG1hdGNoWzFdKSB7CiAgICAgICAgICAgICAgICAgICAgaW5kZW50ICs9ICIgIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGluZGVudCArPSAiKiAiOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gaW5kZW50OwogICAgfTsKCiAgICB0aGlzLmNoZWNrT3V0ZGVudCA9IGZ1bmN0aW9uKHN0YXRlLCBsaW5lLCBpbnB1dCkgewogICAgICAgIHJldHVybiB0aGlzLiRvdXRkZW50LmNoZWNrT3V0ZGVudChsaW5lLCBpbnB1dCk7CiAgICB9OwoKICAgIHRoaXMuYXV0b091dGRlbnQgPSBmdW5jdGlvbihzdGF0ZSwgZG9jLCByb3cpIHsKICAgICAgICB0aGlzLiRvdXRkZW50LmF1dG9PdXRkZW50KGRvYywgcm93KTsKICAgIH07CgogICAgdGhpcy5jcmVhdGVXb3JrZXIgPSBmdW5jdGlvbihzZXNzaW9uKSB7CiAgICAgICAgdmFyIHdvcmtlciA9IG5ldyBXb3JrZXJDbGllbnQoWyJhY2UiXSwgImFjZS9tb2RlL2phdmFzY3JpcHRfd29ya2VyIiwgIkphdmFTY3JpcHRXb3JrZXIiKTsKICAgICAgICB3b3JrZXIuYXR0YWNoVG9Eb2N1bWVudChzZXNzaW9uLmdldERvY3VtZW50KCkpOwoKICAgICAgICB3b3JrZXIub24oImFubm90YXRlIiwgZnVuY3Rpb24ocmVzdWx0cykgewogICAgICAgICAgICBzZXNzaW9uLnNldEFubm90YXRpb25zKHJlc3VsdHMuZGF0YSk7CiAgICAgICAgfSk7CgogICAgICAgIHdvcmtlci5vbigidGVybWluYXRlIiwgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHNlc3Npb24uY2xlYXJBbm5vdGF0aW9ucygpOwogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gd29ya2VyOwogICAgfTsKCiAgICB0aGlzLiRpZCA9ICJhY2UvbW9kZS9qYXZhc2NyaXB0IjsKICAgIHRoaXMuc25pcHBldEZpbGVJZCA9ICJhY2Uvc25pcHBldHMvamF2YXNjcmlwdCI7Cn0pLmNhbGwoTW9kZS5wcm90b3R5cGUpOwoKZXhwb3J0cy5Nb2RlID0gTW9kZTsKfSk7CgphY2UuZGVmaW5lKCJhY2UvbW9kZS9zdmdfaGlnaGxpZ2h0X3J1bGVzIixbInJlcXVpcmUiLCJleHBvcnRzIiwibW9kdWxlIiwiYWNlL2xpYi9vb3AiLCJhY2UvbW9kZS9qYXZhc2NyaXB0X2hpZ2hsaWdodF9ydWxlcyIsImFjZS9tb2RlL3htbF9oaWdobGlnaHRfcnVsZXMiXSwgZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKSB7CiJ1c2Ugc3RyaWN0IjsKCnZhciBvb3AgPSByZXF1aXJlKCIuLi9saWIvb29wIik7CnZhciBKYXZhU2NyaXB0SGlnaGxpZ2h0UnVsZXMgPSByZXF1aXJlKCIuL2phdmFzY3JpcHRfaGlnaGxpZ2h0X3J1bGVzIikuSmF2YVNjcmlwdEhpZ2hsaWdodFJ1bGVzOwp2YXIgWG1sSGlnaGxpZ2h0UnVsZXMgPSByZXF1aXJlKCIuL3htbF9oaWdobGlnaHRfcnVsZXMiKS5YbWxIaWdobGlnaHRSdWxlczsKCnZhciBTdmdIaWdobGlnaHRSdWxlcyA9IGZ1bmN0aW9uKCkgewogICAgWG1sSGlnaGxpZ2h0UnVsZXMuY2FsbCh0aGlzKTsKCiAgICB0aGlzLmVtYmVkVGFnUnVsZXMoSmF2YVNjcmlwdEhpZ2hsaWdodFJ1bGVzLCAianMtIiwgInNjcmlwdCIpOwoKICAgIHRoaXMubm9ybWFsaXplUnVsZXMoKTsKfTsKCm9vcC5pbmhlcml0cyhTdmdIaWdobGlnaHRSdWxlcywgWG1sSGlnaGxpZ2h0UnVsZXMpOwoKZXhwb3J0cy5TdmdIaWdobGlnaHRSdWxlcyA9IFN2Z0hpZ2hsaWdodFJ1bGVzOwp9KTsKCmFjZS5kZWZpbmUoImFjZS9tb2RlL2ZvbGRpbmcvbWl4ZWQiLFsicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJhY2UvbGliL29vcCIsImFjZS9tb2RlL2ZvbGRpbmcvZm9sZF9tb2RlIl0sIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkgewoidXNlIHN0cmljdCI7Cgp2YXIgb29wID0gcmVxdWlyZSgiLi4vLi4vbGliL29vcCIpOwp2YXIgQmFzZUZvbGRNb2RlID0gcmVxdWlyZSgiLi9mb2xkX21vZGUiKS5Gb2xkTW9kZTsKCnZhciBGb2xkTW9kZSA9IGV4cG9ydHMuRm9sZE1vZGUgPSBmdW5jdGlvbihkZWZhdWx0TW9kZSwgc3ViTW9kZXMpIHsKICAgIHRoaXMuZGVmYXVsdE1vZGUgPSBkZWZhdWx0TW9kZTsKICAgIHRoaXMuc3ViTW9kZXMgPSBzdWJNb2RlczsKfTsKb29wLmluaGVyaXRzKEZvbGRNb2RlLCBCYXNlRm9sZE1vZGUpOwoKKGZ1bmN0aW9uKCkgewoKCiAgICB0aGlzLiRnZXRNb2RlID0gZnVuY3Rpb24oc3RhdGUpIHsKICAgICAgICBpZiAodHlwZW9mIHN0YXRlICE9ICJzdHJpbmciKSAKICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZVswXTsKICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5zdWJNb2RlcykgewogICAgICAgICAgICBpZiAoc3RhdGUuaW5kZXhPZihrZXkpID09PSAwKQogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3ViTW9kZXNba2V5XTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9OwogICAgCiAgICB0aGlzLiR0cnlNb2RlID0gZnVuY3Rpb24oc3RhdGUsIHNlc3Npb24sIGZvbGRTdHlsZSwgcm93KSB7CiAgICAgICAgdmFyIG1vZGUgPSB0aGlzLiRnZXRNb2RlKHN0YXRlKTsKICAgICAgICByZXR1cm4gKG1vZGUgPyBtb2RlLmdldEZvbGRXaWRnZXQoc2Vzc2lvbiwgZm9sZFN0eWxlLCByb3cpIDogIiIpOwogICAgfTsKCiAgICB0aGlzLmdldEZvbGRXaWRnZXQgPSBmdW5jdGlvbihzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdykgewogICAgICAgIHJldHVybiAoCiAgICAgICAgICAgIHRoaXMuJHRyeU1vZGUoc2Vzc2lvbi5nZXRTdGF0ZShyb3ctMSksIHNlc3Npb24sIGZvbGRTdHlsZSwgcm93KSB8fAogICAgICAgICAgICB0aGlzLiR0cnlNb2RlKHNlc3Npb24uZ2V0U3RhdGUocm93KSwgc2Vzc2lvbiwgZm9sZFN0eWxlLCByb3cpIHx8CiAgICAgICAgICAgIHRoaXMuZGVmYXVsdE1vZGUuZ2V0Rm9sZFdpZGdldChzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdykKICAgICAgICApOwogICAgfTsKCiAgICB0aGlzLmdldEZvbGRXaWRnZXRSYW5nZSA9IGZ1bmN0aW9uKHNlc3Npb24sIGZvbGRTdHlsZSwgcm93KSB7CiAgICAgICAgdmFyIG1vZGUgPSB0aGlzLiRnZXRNb2RlKHNlc3Npb24uZ2V0U3RhdGUocm93LTEpKTsKICAgICAgICAKICAgICAgICBpZiAoIW1vZGUgfHwgIW1vZGUuZ2V0Rm9sZFdpZGdldChzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdykpCiAgICAgICAgICAgIG1vZGUgPSB0aGlzLiRnZXRNb2RlKHNlc3Npb24uZ2V0U3RhdGUocm93KSk7CiAgICAgICAgCiAgICAgICAgaWYgKCFtb2RlIHx8ICFtb2RlLmdldEZvbGRXaWRnZXQoc2Vzc2lvbiwgZm9sZFN0eWxlLCByb3cpKQogICAgICAgICAgICBtb2RlID0gdGhpcy5kZWZhdWx0TW9kZTsKICAgICAgICAKICAgICAgICByZXR1cm4gbW9kZS5nZXRGb2xkV2lkZ2V0UmFuZ2Uoc2Vzc2lvbiwgZm9sZFN0eWxlLCByb3cpOwogICAgfTsKCn0pLmNhbGwoRm9sZE1vZGUucHJvdG90eXBlKTsKCn0pOwoKYWNlLmRlZmluZSgiYWNlL21vZGUvc3ZnIixbInJlcXVpcmUiLCJleHBvcnRzIiwibW9kdWxlIiwiYWNlL2xpYi9vb3AiLCJhY2UvbW9kZS94bWwiLCJhY2UvbW9kZS9qYXZhc2NyaXB0IiwiYWNlL21vZGUvc3ZnX2hpZ2hsaWdodF9ydWxlcyIsImFjZS9tb2RlL2ZvbGRpbmcvbWl4ZWQiLCJhY2UvbW9kZS9mb2xkaW5nL3htbCIsImFjZS9tb2RlL2ZvbGRpbmcvY3N0eWxlIl0sIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSkgewoidXNlIHN0cmljdCI7Cgp2YXIgb29wID0gcmVxdWlyZSgiLi4vbGliL29vcCIpOwp2YXIgWG1sTW9kZSA9IHJlcXVpcmUoIi4veG1sIikuTW9kZTsKdmFyIEphdmFTY3JpcHRNb2RlID0gcmVxdWlyZSgiLi9qYXZhc2NyaXB0IikuTW9kZTsKdmFyIFN2Z0hpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZSgiLi9zdmdfaGlnaGxpZ2h0X3J1bGVzIikuU3ZnSGlnaGxpZ2h0UnVsZXM7CnZhciBNaXhlZEZvbGRNb2RlID0gcmVxdWlyZSgiLi9mb2xkaW5nL21peGVkIikuRm9sZE1vZGU7CnZhciBYbWxGb2xkTW9kZSA9IHJlcXVpcmUoIi4vZm9sZGluZy94bWwiKS5Gb2xkTW9kZTsKdmFyIENTdHlsZUZvbGRNb2RlID0gcmVxdWlyZSgiLi9mb2xkaW5nL2NzdHlsZSIpLkZvbGRNb2RlOwoKdmFyIE1vZGUgPSBmdW5jdGlvbigpIHsKICAgIFhtbE1vZGUuY2FsbCh0aGlzKTsKICAgIAogICAgdGhpcy5IaWdobGlnaHRSdWxlcyA9IFN2Z0hpZ2hsaWdodFJ1bGVzOwogICAgCiAgICB0aGlzLmNyZWF0ZU1vZGVEZWxlZ2F0ZXMoewogICAgICAgICJqcy0iOiBKYXZhU2NyaXB0TW9kZQogICAgfSk7CiAgICAKICAgIHRoaXMuZm9sZGluZ1J1bGVzID0gbmV3IE1peGVkRm9sZE1vZGUobmV3IFhtbEZvbGRNb2RlKCksIHsKICAgICAgICAianMtIjogbmV3IENTdHlsZUZvbGRNb2RlKCkKICAgIH0pOwp9OwoKb29wLmluaGVyaXRzKE1vZGUsIFhtbE1vZGUpOwoKKGZ1bmN0aW9uKCkgewoKICAgIHRoaXMuZ2V0TmV4dExpbmVJbmRlbnQgPSBmdW5jdGlvbihzdGF0ZSwgbGluZSwgdGFiKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJGdldEluZGVudChsaW5lKTsKICAgIH07CiAgICAKCiAgICB0aGlzLiRpZCA9ICJhY2UvbW9kZS9zdmciOwp9KS5jYWxsKE1vZGUucHJvdG90eXBlKTsKCmV4cG9ydHMuTW9kZSA9IE1vZGU7Cn0pOyAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgYWNlLnJlcXVpcmUoWyJhY2UvbW9kZS9zdmciXSwgZnVuY3Rpb24obSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1vZHVsZSA9PSAib2JqZWN0IiAmJiB0eXBlb2YgZXhwb3J0cyA9PSAib2JqZWN0IiAmJiBtb2R1bGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gbTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSkoKTsKICAgICAgICAgICAg";