export default"data:application/javascript;charset=utf-8;base64,YWNlLmRlZmluZSgiYWNlL21vZGUveG1sX2hpZ2hsaWdodF9ydWxlcyIsWyJyZXF1aXJlIiwiZXhwb3J0cyIsIm1vZHVsZSIsImFjZS9saWIvb29wIiwiYWNlL21vZGUvdGV4dF9oaWdobGlnaHRfcnVsZXMiXSwgZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKXsidXNlIHN0cmljdCI7CnZhciBvb3AgPSByZXF1aXJlKCIuLi9saWIvb29wIik7CnZhciBUZXh0SGlnaGxpZ2h0UnVsZXMgPSByZXF1aXJlKCIuL3RleHRfaGlnaGxpZ2h0X3J1bGVzIikuVGV4dEhpZ2hsaWdodFJ1bGVzOwp2YXIgWG1sSGlnaGxpZ2h0UnVsZXMgPSBmdW5jdGlvbiAobm9ybWFsaXplKSB7CiAgICB2YXIgdGFnUmVnZXggPSAiW186YS16QS1aXHhjMC1cdWZmZmZdWy1fOi5hLXpBLVowLTlceGMwLVx1ZmZmZl0qIjsKICAgIHRoaXMuJHJ1bGVzID0gewogICAgICAgIHN0YXJ0OiBbCiAgICAgICAgICAgIHsgdG9rZW46ICJzdHJpbmcuY2RhdGEueG1sIiwgcmVnZXg6ICI8XFwhXFxbQ0RBVEFcXFsiLCBuZXh0OiAiY2RhdGEiIH0sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRva2VuOiBbInB1bmN0dWF0aW9uLmluc3RydWN0aW9uLnhtbCIsICJrZXl3b3JkLmluc3RydWN0aW9uLnhtbCJdLAogICAgICAgICAgICAgICAgcmVnZXg6ICIoPFxcPykoIiArIHRhZ1JlZ2V4ICsgIikiLCBuZXh0OiAicHJvY2Vzc2luZ19pbnN0cnVjdGlvbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgeyB0b2tlbjogImNvbW1lbnQuc3RhcnQueG1sIiwgcmVnZXg6ICI8XFwhLS0iLCBuZXh0OiAiY29tbWVudCIgfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdG9rZW46IFsieG1sLXBlLmRvY3R5cGUueG1sIiwgInhtbC1wZS5kb2N0eXBlLnhtbCJdLAogICAgICAgICAgICAgICAgcmVnZXg6ICIoPFxcISkoRE9DVFlQRSkoPz1bXFxzXSkiLCBuZXh0OiAiZG9jdHlwZSIsIGNhc2VJbnNlbnNpdGl2ZTogdHJ1ZQogICAgICAgICAgICB9LAogICAgICAgICAgICB7IGluY2x1ZGU6ICJ0YWciIH0sCiAgICAgICAgICAgIHsgdG9rZW46ICJ0ZXh0LmVuZC10YWctb3Blbi54bWwiLCByZWdleDogIjwvIiB9LAogICAgICAgICAgICB7IHRva2VuOiAidGV4dC50YWctb3Blbi54bWwiLCByZWdleDogIjwiIH0sCiAgICAgICAgICAgIHsgaW5jbHVkZTogInJlZmVyZW5jZSIgfSwKICAgICAgICAgICAgeyBkZWZhdWx0VG9rZW46ICJ0ZXh0LnhtbCIgfQogICAgICAgIF0sCiAgICAgICAgcHJvY2Vzc2luZ19pbnN0cnVjdGlvbjogW3sKICAgICAgICAgICAgICAgIHRva2VuOiAiZW50aXR5Lm90aGVyLmF0dHJpYnV0ZS1uYW1lLmRlY2wtYXR0cmlidXRlLW5hbWUueG1sIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiB0YWdSZWdleAogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImtleXdvcmQub3BlcmF0b3IuZGVjbC1hdHRyaWJ1dGUtZXF1YWxzLnhtbCIsCiAgICAgICAgICAgICAgICByZWdleDogIj0iCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGluY2x1ZGU6ICJ3aGl0ZXNwYWNlIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBpbmNsdWRlOiAic3RyaW5nIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogInB1bmN0dWF0aW9uLnhtbC1kZWNsLnhtbCIsCiAgICAgICAgICAgICAgICByZWdleDogIlxcPz4iLAogICAgICAgICAgICAgICAgbmV4dDogInN0YXJ0IgogICAgICAgICAgICB9XSwKICAgICAgICBkb2N0eXBlOiBbCiAgICAgICAgICAgIHsgaW5jbHVkZTogIndoaXRlc3BhY2UiIH0sCiAgICAgICAgICAgIHsgaW5jbHVkZTogInN0cmluZyIgfSwKICAgICAgICAgICAgeyB0b2tlbjogInhtbC1wZS5kb2N0eXBlLnhtbCIsIHJlZ2V4OiAiPiIsIG5leHQ6ICJzdGFydCIgfSwKICAgICAgICAgICAgeyB0b2tlbjogInhtbC1wZS54bWwiLCByZWdleDogIlstX2EtekEtWjAtOTpdKyIgfSwKICAgICAgICAgICAgeyB0b2tlbjogInB1bmN0dWF0aW9uLmludC1zdWJzZXQiLCByZWdleDogIlxcWyIsIHB1c2g6ICJpbnRfc3Vic2V0IiB9CiAgICAgICAgXSwKICAgICAgICBpbnRfc3Vic2V0OiBbewogICAgICAgICAgICAgICAgdG9rZW46ICJ0ZXh0LnhtbCIsCiAgICAgICAgICAgICAgICByZWdleDogIlxccysiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAicHVuY3R1YXRpb24uaW50LXN1YnNldC54bWwiLAogICAgICAgICAgICAgICAgcmVnZXg6ICJdIiwKICAgICAgICAgICAgICAgIG5leHQ6ICJwb3AiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiBbInB1bmN0dWF0aW9uLm1hcmt1cC1kZWNsLnhtbCIsICJrZXl3b3JkLm1hcmt1cC1kZWNsLnhtbCJdLAogICAgICAgICAgICAgICAgcmVnZXg6ICIoPFxcISkoIiArIHRhZ1JlZ2V4ICsgIikiLAogICAgICAgICAgICAgICAgcHVzaDogW3sKICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46ICJ0ZXh0IiwKICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXg6ICJcXHMrIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogInB1bmN0dWF0aW9uLm1hcmt1cC1kZWNsLnhtbCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4OiAiPiIsCiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6ICJwb3AiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7IGluY2x1ZGU6ICJzdHJpbmciIH1dCiAgICAgICAgICAgIH1dLAogICAgICAgIGNkYXRhOiBbCiAgICAgICAgICAgIHsgdG9rZW46ICJzdHJpbmcuY2RhdGEueG1sIiwgcmVnZXg6ICJcXF1cXF0+IiwgbmV4dDogInN0YXJ0IiB9LAogICAgICAgICAgICB7IHRva2VuOiAidGV4dC54bWwiLCByZWdleDogIlxccysiIH0sCiAgICAgICAgICAgIHsgdG9rZW46ICJ0ZXh0LnhtbCIsIHJlZ2V4OiAiKD86W15cXF1dfFxcXSg/IVxcXT4pKSsiIH0KICAgICAgICBdLAogICAgICAgIGNvbW1lbnQ6IFsKICAgICAgICAgICAgeyB0b2tlbjogImNvbW1lbnQuZW5kLnhtbCIsIHJlZ2V4OiAiLS0+IiwgbmV4dDogInN0YXJ0IiB9LAogICAgICAgICAgICB7IGRlZmF1bHRUb2tlbjogImNvbW1lbnQueG1sIiB9CiAgICAgICAgXSwKICAgICAgICByZWZlcmVuY2U6IFt7CiAgICAgICAgICAgICAgICB0b2tlbjogImNvbnN0YW50Lmxhbmd1YWdlLmVzY2FwZS5yZWZlcmVuY2UueG1sIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiKD86JiNbMC05XSs7KXwoPzomI3hbMC05YS1mQS1GXSs7KXwoPzomW2EtekEtWjAtOV86XFwuLV0rOykiCiAgICAgICAgICAgIH1dLAogICAgICAgIGF0dHJfcmVmZXJlbmNlOiBbewogICAgICAgICAgICAgICAgdG9rZW46ICJjb25zdGFudC5sYW5ndWFnZS5lc2NhcGUucmVmZXJlbmNlLmF0dHJpYnV0ZS12YWx1ZS54bWwiLAogICAgICAgICAgICAgICAgcmVnZXg6ICIoPzomI1swLTldKzspfCg/OiYjeFswLTlhLWZBLUZdKzspfCg/OiZbYS16QS1aMC05XzpcXC4tXSs7KSIKICAgICAgICAgICAgfV0sCiAgICAgICAgdGFnOiBbewogICAgICAgICAgICAgICAgdG9rZW46IFsibWV0YS50YWcucHVuY3R1YXRpb24udGFnLW9wZW4ueG1sIiwgIm1ldGEudGFnLnB1bmN0dWF0aW9uLmVuZC10YWctb3Blbi54bWwiLCAibWV0YS50YWcudGFnLW5hbWUueG1sIl0sCiAgICAgICAgICAgICAgICByZWdleDogIig/Oig8KXwoPC8pKSgoPzoiICsgdGFnUmVnZXggKyAiOik/IiArIHRhZ1JlZ2V4ICsgIikiLAogICAgICAgICAgICAgICAgbmV4dDogWwogICAgICAgICAgICAgICAgICAgIHsgaW5jbHVkZTogImF0dHJpYnV0ZXMiIH0sCiAgICAgICAgICAgICAgICAgICAgeyB0b2tlbjogIm1ldGEudGFnLnB1bmN0dWF0aW9uLnRhZy1jbG9zZS54bWwiLCByZWdleDogIi8/PiIsIG5leHQ6ICJzdGFydCIgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9XSwKICAgICAgICB0YWdfd2hpdGVzcGFjZTogWwogICAgICAgICAgICB7IHRva2VuOiAidGV4dC50YWctd2hpdGVzcGFjZS54bWwiLCByZWdleDogIlxccysiIH0KICAgICAgICBdLAogICAgICAgIHdoaXRlc3BhY2U6IFsKICAgICAgICAgICAgeyB0b2tlbjogInRleHQud2hpdGVzcGFjZS54bWwiLCByZWdleDogIlxccysiIH0KICAgICAgICBdLAogICAgICAgIHN0cmluZzogW3sKICAgICAgICAgICAgICAgIHRva2VuOiAic3RyaW5nLnhtbCIsCiAgICAgICAgICAgICAgICByZWdleDogIiciLAogICAgICAgICAgICAgICAgcHVzaDogWwogICAgICAgICAgICAgICAgICAgIHsgdG9rZW46ICJzdHJpbmcueG1sIiwgcmVnZXg6ICInIiwgbmV4dDogInBvcCIgfSwKICAgICAgICAgICAgICAgICAgICB7IGRlZmF1bHRUb2tlbjogInN0cmluZy54bWwiIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJzdHJpbmcueG1sIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAnIicsCiAgICAgICAgICAgICAgICBwdXNoOiBbCiAgICAgICAgICAgICAgICAgICAgeyB0b2tlbjogInN0cmluZy54bWwiLCByZWdleDogJyInLCBuZXh0OiAicG9wIiB9LAogICAgICAgICAgICAgICAgICAgIHsgZGVmYXVsdFRva2VuOiAic3RyaW5nLnhtbCIgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9XSwKICAgICAgICBhdHRyaWJ1dGVzOiBbewogICAgICAgICAgICAgICAgdG9rZW46ICJlbnRpdHkub3RoZXIuYXR0cmlidXRlLW5hbWUueG1sIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiB0YWdSZWdleAogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImtleXdvcmQub3BlcmF0b3IuYXR0cmlidXRlLWVxdWFscy54bWwiLAogICAgICAgICAgICAgICAgcmVnZXg6ICI9IgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBpbmNsdWRlOiAidGFnX3doaXRlc3BhY2UiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGluY2x1ZGU6ICJhdHRyaWJ1dGVfdmFsdWUiCiAgICAgICAgICAgIH1dLAogICAgICAgIGF0dHJpYnV0ZV92YWx1ZTogW3sKICAgICAgICAgICAgICAgIHRva2VuOiAic3RyaW5nLmF0dHJpYnV0ZS12YWx1ZS54bWwiLAogICAgICAgICAgICAgICAgcmVnZXg6ICInIiwKICAgICAgICAgICAgICAgIHB1c2g6IFsKICAgICAgICAgICAgICAgICAgICB7IHRva2VuOiAic3RyaW5nLmF0dHJpYnV0ZS12YWx1ZS54bWwiLCByZWdleDogIiciLCBuZXh0OiAicG9wIiB9LAogICAgICAgICAgICAgICAgICAgIHsgaW5jbHVkZTogImF0dHJfcmVmZXJlbmNlIiB9LAogICAgICAgICAgICAgICAgICAgIHsgZGVmYXVsdFRva2VuOiAic3RyaW5nLmF0dHJpYnV0ZS12YWx1ZS54bWwiIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJzdHJpbmcuYXR0cmlidXRlLXZhbHVlLnhtbCIsCiAgICAgICAgICAgICAgICByZWdleDogJyInLAogICAgICAgICAgICAgICAgcHVzaDogWwogICAgICAgICAgICAgICAgICAgIHsgdG9rZW46ICJzdHJpbmcuYXR0cmlidXRlLXZhbHVlLnhtbCIsIHJlZ2V4OiAnIicsIG5leHQ6ICJwb3AiIH0sCiAgICAgICAgICAgICAgICAgICAgeyBpbmNsdWRlOiAiYXR0cl9yZWZlcmVuY2UiIH0sCiAgICAgICAgICAgICAgICAgICAgeyBkZWZhdWx0VG9rZW46ICJzdHJpbmcuYXR0cmlidXRlLXZhbHVlLnhtbCIgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9XQogICAgfTsKICAgIGlmICh0aGlzLmNvbnN0cnVjdG9yID09PSBYbWxIaWdobGlnaHRSdWxlcykKICAgICAgICB0aGlzLm5vcm1hbGl6ZVJ1bGVzKCk7Cn07CihmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmVtYmVkVGFnUnVsZXMgPSBmdW5jdGlvbiAoSGlnaGxpZ2h0UnVsZXMsIHByZWZpeCwgdGFnKSB7CiAgICAgICAgdGhpcy4kcnVsZXMudGFnLnVuc2hpZnQoewogICAgICAgICAgICB0b2tlbjogWyJtZXRhLnRhZy5wdW5jdHVhdGlvbi50YWctb3Blbi54bWwiLCAibWV0YS50YWcuIiArIHRhZyArICIudGFnLW5hbWUueG1sIl0sCiAgICAgICAgICAgIHJlZ2V4OiAiKDwpKCIgKyB0YWcgKyAiKD89XFxzfD58JCkpIiwKICAgICAgICAgICAgbmV4dDogWwogICAgICAgICAgICAgICAgeyBpbmNsdWRlOiAiYXR0cmlidXRlcyIgfSwKICAgICAgICAgICAgICAgIHsgdG9rZW46ICJtZXRhLnRhZy5wdW5jdHVhdGlvbi50YWctY2xvc2UueG1sIiwgcmVnZXg6ICIvPz4iLCBuZXh0OiBwcmVmaXggKyAic3RhcnQiIH0KICAgICAgICAgICAgXQogICAgICAgIH0pOwogICAgICAgIHRoaXMuJHJ1bGVzW3RhZyArICItZW5kIl0gPSBbCiAgICAgICAgICAgIHsgaW5jbHVkZTogImF0dHJpYnV0ZXMiIH0sCiAgICAgICAgICAgIHsgdG9rZW46ICJtZXRhLnRhZy5wdW5jdHVhdGlvbi50YWctY2xvc2UueG1sIiwgcmVnZXg6ICIvPz4iLCBuZXh0OiAic3RhcnQiLAogICAgICAgICAgICAgICAgb25NYXRjaDogZnVuY3Rpb24gKHZhbHVlLCBjdXJyZW50U3RhdGUsIHN0YWNrKSB7CiAgICAgICAgICAgICAgICAgICAgc3RhY2suc3BsaWNlKDApOwogICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRva2VuOwogICAgICAgICAgICAgICAgfSB9CiAgICAgICAgXTsKICAgICAgICB0aGlzLmVtYmVkUnVsZXMoSGlnaGxpZ2h0UnVsZXMsIHByZWZpeCwgW3sKICAgICAgICAgICAgICAgIHRva2VuOiBbIm1ldGEudGFnLnB1bmN0dWF0aW9uLmVuZC10YWctb3Blbi54bWwiLCAibWV0YS50YWcuIiArIHRhZyArICIudGFnLW5hbWUueG1sIl0sCiAgICAgICAgICAgICAgICByZWdleDogIig8LykoIiArIHRhZyArICIoPz1cXHN8PnwkKSkiLAogICAgICAgICAgICAgICAgbmV4dDogdGFnICsgIi1lbmQiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAic3RyaW5nLmNkYXRhLnhtbCIsCiAgICAgICAgICAgICAgICByZWdleDogIjxcXCFcXFtDREFUQVxcWyIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJzdHJpbmcuY2RhdGEueG1sIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiXFxdXFxdPiIKICAgICAgICAgICAgfV0pOwogICAgfTsKfSkuY2FsbChUZXh0SGlnaGxpZ2h0UnVsZXMucHJvdG90eXBlKTsKb29wLmluaGVyaXRzKFhtbEhpZ2hsaWdodFJ1bGVzLCBUZXh0SGlnaGxpZ2h0UnVsZXMpOwpleHBvcnRzLlhtbEhpZ2hsaWdodFJ1bGVzID0gWG1sSGlnaGxpZ2h0UnVsZXM7Cgp9KTsKCmFjZS5kZWZpbmUoImFjZS9tb2RlL2JlaGF2aW91ci94bWwiLFsicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJhY2UvbGliL29vcCIsImFjZS9tb2RlL2JlaGF2aW91ciIsImFjZS90b2tlbl9pdGVyYXRvciIsImFjZS9saWIvbGFuZyJdLCBmdW5jdGlvbihyZXF1aXJlLCBleHBvcnRzLCBtb2R1bGUpeyJ1c2Ugc3RyaWN0IjsKdmFyIG9vcCA9IHJlcXVpcmUoIi4uLy4uL2xpYi9vb3AiKTsKdmFyIEJlaGF2aW91ciA9IHJlcXVpcmUoIi4uL2JlaGF2aW91ciIpLkJlaGF2aW91cjsKdmFyIFRva2VuSXRlcmF0b3IgPSByZXF1aXJlKCIuLi8uLi90b2tlbl9pdGVyYXRvciIpLlRva2VuSXRlcmF0b3I7CnZhciBsYW5nID0gcmVxdWlyZSgiLi4vLi4vbGliL2xhbmciKTsKZnVuY3Rpb24gaXModG9rZW4sIHR5cGUpIHsKICAgIHJldHVybiB0b2tlbiAmJiB0b2tlbi50eXBlLmxhc3RJbmRleE9mKHR5cGUgKyAiLnhtbCIpID4gLTE7Cn0KdmFyIFhtbEJlaGF2aW91ciA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuYWRkKCJzdHJpbmdfZHF1b3RlcyIsICJpbnNlcnRpb24iLCBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbiwgZWRpdG9yLCBzZXNzaW9uLCB0ZXh0KSB7CiAgICAgICAgaWYgKHRleHQgPT0gJyInIHx8IHRleHQgPT0gIiciKSB7CiAgICAgICAgICAgIHZhciBxdW90ZSA9IHRleHQ7CiAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IHNlc3Npb24uZG9jLmdldFRleHRSYW5nZShlZGl0b3IuZ2V0U2VsZWN0aW9uUmFuZ2UoKSk7CiAgICAgICAgICAgIGlmIChzZWxlY3RlZCAhPT0gIiIgJiYgc2VsZWN0ZWQgIT09ICInIiAmJiBzZWxlY3RlZCAhPSAnIicgJiYgZWRpdG9yLmdldFdyYXBCZWhhdmlvdXJzRW5hYmxlZCgpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHRleHQ6IHF1b3RlICsgc2VsZWN0ZWQgKyBxdW90ZSwKICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb246IGZhbHNlCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yUG9zaXRpb24oKTsKICAgICAgICAgICAgdmFyIGxpbmUgPSBzZXNzaW9uLmRvYy5nZXRMaW5lKGN1cnNvci5yb3cpOwogICAgICAgICAgICB2YXIgcmlnaHRDaGFyID0gbGluZS5zdWJzdHJpbmcoY3Vyc29yLmNvbHVtbiwgY3Vyc29yLmNvbHVtbiArIDEpOwogICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgVG9rZW5JdGVyYXRvcihzZXNzaW9uLCBjdXJzb3Iucm93LCBjdXJzb3IuY29sdW1uKTsKICAgICAgICAgICAgdmFyIHRva2VuID0gaXRlcmF0b3IuZ2V0Q3VycmVudFRva2VuKCk7CiAgICAgICAgICAgIGlmIChyaWdodENoYXIgPT0gcXVvdGUgJiYgKGlzKHRva2VuLCAiYXR0cmlidXRlLXZhbHVlIikgfHwgaXModG9rZW4sICJzdHJpbmciKSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgdGV4dDogIiIsCiAgICAgICAgICAgICAgICAgICAgc2VsZWN0aW9uOiBbMSwgMV0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKCF0b2tlbikKICAgICAgICAgICAgICAgIHRva2VuID0gaXRlcmF0b3Iuc3RlcEJhY2t3YXJkKCk7CiAgICAgICAgICAgIGlmICghdG9rZW4pCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIHdoaWxlIChpcyh0b2tlbiwgInRhZy13aGl0ZXNwYWNlIikgfHwgaXModG9rZW4sICJ3aGl0ZXNwYWNlIikpIHsKICAgICAgICAgICAgICAgIHRva2VuID0gaXRlcmF0b3Iuc3RlcEJhY2t3YXJkKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIHJpZ2h0U3BhY2UgPSAhcmlnaHRDaGFyIHx8IHJpZ2h0Q2hhci5tYXRjaCgvXHMvKTsKICAgICAgICAgICAgaWYgKGlzKHRva2VuLCAiYXR0cmlidXRlLWVxdWFscyIpICYmIChyaWdodFNwYWNlIHx8IHJpZ2h0Q2hhciA9PSAnPicpIHx8IChpcyh0b2tlbiwgImRlY2wtYXR0cmlidXRlLWVxdWFscyIpICYmIChyaWdodFNwYWNlIHx8IHJpZ2h0Q2hhciA9PSAnPycpKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICB0ZXh0OiBxdW90ZSArIHF1b3RlLAogICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbjogWzEsIDFdCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7CiAgICB0aGlzLmFkZCgic3RyaW5nX2RxdW90ZXMiLCAiZGVsZXRpb24iLCBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbiwgZWRpdG9yLCBzZXNzaW9uLCByYW5nZSkgewogICAgICAgIHZhciBzZWxlY3RlZCA9IHNlc3Npb24uZG9jLmdldFRleHRSYW5nZShyYW5nZSk7CiAgICAgICAgaWYgKCFyYW5nZS5pc011bHRpTGluZSgpICYmIChzZWxlY3RlZCA9PSAnIicgfHwgc2VsZWN0ZWQgPT0gIiciKSkgewogICAgICAgICAgICB2YXIgbGluZSA9IHNlc3Npb24uZG9jLmdldExpbmUocmFuZ2Uuc3RhcnQucm93KTsKICAgICAgICAgICAgdmFyIHJpZ2h0Q2hhciA9IGxpbmUuc3Vic3RyaW5nKHJhbmdlLnN0YXJ0LmNvbHVtbiArIDEsIHJhbmdlLnN0YXJ0LmNvbHVtbiArIDIpOwogICAgICAgICAgICBpZiAocmlnaHRDaGFyID09IHNlbGVjdGVkKSB7CiAgICAgICAgICAgICAgICByYW5nZS5lbmQuY29sdW1uKys7CiAgICAgICAgICAgICAgICByZXR1cm4gcmFuZ2U7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKICAgIHRoaXMuYWRkKCJhdXRvY2xvc2luZyIsICJpbnNlcnRpb24iLCBmdW5jdGlvbiAoc3RhdGUsIGFjdGlvbiwgZWRpdG9yLCBzZXNzaW9uLCB0ZXh0KSB7CiAgICAgICAgaWYgKHRleHQgPT0gJz4nKSB7CiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IGVkaXRvci5nZXRTZWxlY3Rpb25SYW5nZSgpLnN0YXJ0OwogICAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBuZXcgVG9rZW5JdGVyYXRvcihzZXNzaW9uLCBwb3NpdGlvbi5yb3csIHBvc2l0aW9uLmNvbHVtbik7CiAgICAgICAgICAgIHZhciB0b2tlbiA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlbigpIHx8IGl0ZXJhdG9yLnN0ZXBCYWNrd2FyZCgpOwogICAgICAgICAgICBpZiAoIXRva2VuIHx8ICEoaXModG9rZW4sICJ0YWctbmFtZSIpIHx8IGlzKHRva2VuLCAidGFnLXdoaXRlc3BhY2UiKSB8fCBpcyh0b2tlbiwgImF0dHJpYnV0ZS1uYW1lIikgfHwgaXModG9rZW4sICJhdHRyaWJ1dGUtZXF1YWxzIikgfHwgaXModG9rZW4sICJhdHRyaWJ1dGUtdmFsdWUiKSkpCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIGlmIChpcyh0b2tlbiwgInJlZmVyZW5jZS5hdHRyaWJ1dGUtdmFsdWUiKSkKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgaWYgKGlzKHRva2VuLCAiYXR0cmlidXRlLXZhbHVlIikpIHsKICAgICAgICAgICAgICAgIHZhciB0b2tlbkVuZENvbHVtbiA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlbkNvbHVtbigpICsgdG9rZW4udmFsdWUubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uLmNvbHVtbiA8IHRva2VuRW5kQ29sdW1uKQogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbi5jb2x1bW4gPT0gdG9rZW5FbmRDb2x1bW4pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFRva2VuID0gaXRlcmF0b3Iuc3RlcEZvcndhcmQoKTsKICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFRva2VuICYmIGlzKG5leHRUb2tlbiwgImF0dHJpYnV0ZS12YWx1ZSIpKQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3Iuc3RlcEJhY2t3YXJkKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKC9eXHMqPi8udGVzdChzZXNzaW9uLmdldExpbmUocG9zaXRpb24ucm93KS5zbGljZShwb3NpdGlvbi5jb2x1bW4pKSkKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgd2hpbGUgKCFpcyh0b2tlbiwgInRhZy1uYW1lIikpIHsKICAgICAgICAgICAgICAgIHRva2VuID0gaXRlcmF0b3Iuc3RlcEJhY2t3YXJkKCk7CiAgICAgICAgICAgICAgICBpZiAodG9rZW4udmFsdWUgPT0gIjwiKSB7CiAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSBpdGVyYXRvci5zdGVwRm9yd2FyZCgpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciB0b2tlblJvdyA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlblJvdygpOwogICAgICAgICAgICB2YXIgdG9rZW5Db2x1bW4gPSBpdGVyYXRvci5nZXRDdXJyZW50VG9rZW5Db2x1bW4oKTsKICAgICAgICAgICAgaWYgKGlzKGl0ZXJhdG9yLnN0ZXBCYWNrd2FyZCgpLCAiZW5kLXRhZy1vcGVuIikpCiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdG9rZW4udmFsdWU7CiAgICAgICAgICAgIGlmICh0b2tlblJvdyA9PSBwb3NpdGlvbi5yb3cpCiAgICAgICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5zdWJzdHJpbmcoMCwgcG9zaXRpb24uY29sdW1uIC0gdG9rZW5Db2x1bW4pOwogICAgICAgICAgICBpZiAodGhpcy52b2lkRWxlbWVudHMuaGFzT3duUHJvcGVydHkoZWxlbWVudC50b0xvd2VyQ2FzZSgpKSkKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHRleHQ6ICI+IiArICI8LyIgKyBlbGVtZW50ICsgIj4iLAogICAgICAgICAgICAgICAgc2VsZWN0aW9uOiBbMSwgMV0KICAgICAgICAgICAgfTsKICAgICAgICB9CiAgICB9KTsKICAgIHRoaXMuYWRkKCJhdXRvaW5kZW50IiwgImluc2VydGlvbiIsIGZ1bmN0aW9uIChzdGF0ZSwgYWN0aW9uLCBlZGl0b3IsIHNlc3Npb24sIHRleHQpIHsKICAgICAgICBpZiAodGV4dCA9PSAiXG4iKSB7CiAgICAgICAgICAgIHZhciBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yUG9zaXRpb24oKTsKICAgICAgICAgICAgdmFyIGxpbmUgPSBzZXNzaW9uLmdldExpbmUoY3Vyc29yLnJvdyk7CiAgICAgICAgICAgIHZhciBpdGVyYXRvciA9IG5ldyBUb2tlbkl0ZXJhdG9yKHNlc3Npb24sIGN1cnNvci5yb3csIGN1cnNvci5jb2x1bW4pOwogICAgICAgICAgICB2YXIgdG9rZW4gPSBpdGVyYXRvci5nZXRDdXJyZW50VG9rZW4oKTsKICAgICAgICAgICAgaWYgKHRva2VuICYmIHRva2VuLnR5cGUuaW5kZXhPZigidGFnLWNsb3NlIikgIT09IC0xKSB7CiAgICAgICAgICAgICAgICBpZiAodG9rZW4udmFsdWUgPT0gIi8+IikKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB3aGlsZSAodG9rZW4gJiYgdG9rZW4udHlwZS5pbmRleE9mKCJ0YWctbmFtZSIpID09PSAtMSkgewogICAgICAgICAgICAgICAgICAgIHRva2VuID0gaXRlcmF0b3Iuc3RlcEJhY2t3YXJkKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoIXRva2VuKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIHRhZyA9IHRva2VuLnZhbHVlOwogICAgICAgICAgICAgICAgdmFyIHJvdyA9IGl0ZXJhdG9yLmdldEN1cnJlbnRUb2tlblJvdygpOwogICAgICAgICAgICAgICAgdG9rZW4gPSBpdGVyYXRvci5zdGVwQmFja3dhcmQoKTsKICAgICAgICAgICAgICAgIGlmICghdG9rZW4gfHwgdG9rZW4udHlwZS5pbmRleE9mKCJlbmQtdGFnIikgIT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKHRoaXMudm9pZEVsZW1lbnRzICYmICF0aGlzLnZvaWRFbGVtZW50c1t0YWddKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5leHRUb2tlbiA9IHNlc3Npb24uZ2V0VG9rZW5BdChjdXJzb3Iucm93LCBjdXJzb3IuY29sdW1uICsgMSk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmUgPSBzZXNzaW9uLmdldExpbmUocm93KTsKICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dEluZGVudCA9IHRoaXMuJGdldEluZGVudChsaW5lKTsKICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZW50ID0gbmV4dEluZGVudCArIHNlc3Npb24uZ2V0VGFiU3RyaW5nKCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRUb2tlbiAmJiBuZXh0VG9rZW4udmFsdWUgPT09ICI8LyIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICJcbiIgKyBpbmRlbnQgKyAiXG4iICsgbmV4dEluZGVudCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGlvbjogWzEsIGluZGVudC5sZW5ndGgsIDEsIGluZGVudC5sZW5ndGhdCiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogIlxuIiArIGluZGVudAogICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwp9Owpvb3AuaW5oZXJpdHMoWG1sQmVoYXZpb3VyLCBCZWhhdmlvdXIpOwpleHBvcnRzLlhtbEJlaGF2aW91ciA9IFhtbEJlaGF2aW91cjsKCn0pOwoKYWNlLmRlZmluZSgiYWNlL21vZGUvZm9sZGluZy94bWwiLFsicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJhY2UvbGliL29vcCIsImFjZS9yYW5nZSIsImFjZS9tb2RlL2ZvbGRpbmcvZm9sZF9tb2RlIl0sIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSl7InVzZSBzdHJpY3QiOwp2YXIgb29wID0gcmVxdWlyZSgiLi4vLi4vbGliL29vcCIpOwp2YXIgUmFuZ2UgPSByZXF1aXJlKCIuLi8uLi9yYW5nZSIpLlJhbmdlOwp2YXIgQmFzZUZvbGRNb2RlID0gcmVxdWlyZSgiLi9mb2xkX21vZGUiKS5Gb2xkTW9kZTsKdmFyIEZvbGRNb2RlID0gZXhwb3J0cy5Gb2xkTW9kZSA9IGZ1bmN0aW9uICh2b2lkRWxlbWVudHMsIG9wdGlvbmFsRW5kVGFncykgewogICAgQmFzZUZvbGRNb2RlLmNhbGwodGhpcyk7CiAgICB0aGlzLnZvaWRFbGVtZW50cyA9IHZvaWRFbGVtZW50cyB8fCB7fTsKICAgIHRoaXMub3B0aW9uYWxFbmRUYWdzID0gb29wLm1peGluKHt9LCB0aGlzLnZvaWRFbGVtZW50cyk7CiAgICBpZiAob3B0aW9uYWxFbmRUYWdzKQogICAgICAgIG9vcC5taXhpbih0aGlzLm9wdGlvbmFsRW5kVGFncywgb3B0aW9uYWxFbmRUYWdzKTsKfTsKb29wLmluaGVyaXRzKEZvbGRNb2RlLCBCYXNlRm9sZE1vZGUpOwp2YXIgVGFnID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy50YWdOYW1lID0gIiI7CiAgICB0aGlzLmNsb3NpbmcgPSBmYWxzZTsKICAgIHRoaXMuc2VsZkNsb3NpbmcgPSBmYWxzZTsKICAgIHRoaXMuc3RhcnQgPSB7IHJvdzogMCwgY29sdW1uOiAwIH07CiAgICB0aGlzLmVuZCA9IHsgcm93OiAwLCBjb2x1bW46IDAgfTsKfTsKZnVuY3Rpb24gaXModG9rZW4sIHR5cGUpIHsKICAgIHJldHVybiB0b2tlbi50eXBlLmxhc3RJbmRleE9mKHR5cGUgKyAiLnhtbCIpID4gLTE7Cn0KKGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZ2V0Rm9sZFdpZGdldCA9IGZ1bmN0aW9uIChzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdykgewogICAgICAgIHZhciB0YWcgPSB0aGlzLl9nZXRGaXJzdFRhZ0luTGluZShzZXNzaW9uLCByb3cpOwogICAgICAgIGlmICghdGFnKQogICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRDb21tZW50Rm9sZFdpZGdldChzZXNzaW9uLCByb3cpOwogICAgICAgIGlmICh0YWcuY2xvc2luZyB8fCAoIXRhZy50YWdOYW1lICYmIHRhZy5zZWxmQ2xvc2luZykpCiAgICAgICAgICAgIHJldHVybiBmb2xkU3R5bGUgPT09ICJtYXJrYmVnaW5lbmQiID8gImVuZCIgOiAiIjsKICAgICAgICBpZiAoIXRhZy50YWdOYW1lIHx8IHRhZy5zZWxmQ2xvc2luZyB8fCB0aGlzLnZvaWRFbGVtZW50cy5oYXNPd25Qcm9wZXJ0eSh0YWcudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSkKICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgIGlmICh0aGlzLl9maW5kRW5kVGFnSW5MaW5lKHNlc3Npb24sIHJvdywgdGFnLnRhZ05hbWUsIHRhZy5lbmQuY29sdW1uKSkKICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgIHJldHVybiAic3RhcnQiOwogICAgfTsKICAgIHRoaXMuZ2V0Q29tbWVudEZvbGRXaWRnZXQgPSBmdW5jdGlvbiAoc2Vzc2lvbiwgcm93KSB7CiAgICAgICAgaWYgKC9jb21tZW50Ly50ZXN0KHNlc3Npb24uZ2V0U3RhdGUocm93KSkgJiYgLzwhLS8udGVzdChzZXNzaW9uLmdldExpbmUocm93KSkpCiAgICAgICAgICAgIHJldHVybiAic3RhcnQiOwogICAgICAgIHJldHVybiAiIjsKICAgIH07CiAgICB0aGlzLl9nZXRGaXJzdFRhZ0luTGluZSA9IGZ1bmN0aW9uIChzZXNzaW9uLCByb3cpIHsKICAgICAgICB2YXIgdG9rZW5zID0gc2Vzc2lvbi5nZXRUb2tlbnMocm93KTsKICAgICAgICB2YXIgdGFnID0gbmV3IFRhZygpOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTsKICAgICAgICAgICAgaWYgKGlzKHRva2VuLCAidGFnLW9wZW4iKSkgewogICAgICAgICAgICAgICAgdGFnLmVuZC5jb2x1bW4gPSB0YWcuc3RhcnQuY29sdW1uICsgdG9rZW4udmFsdWUubGVuZ3RoOwogICAgICAgICAgICAgICAgdGFnLmNsb3NpbmcgPSBpcyh0b2tlbiwgImVuZC10YWctb3BlbiIpOwogICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlbnNbKytpXTsKICAgICAgICAgICAgICAgIGlmICghdG9rZW4pCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICB0YWcudGFnTmFtZSA9IHRva2VuLnZhbHVlOwogICAgICAgICAgICAgICAgdGFnLmVuZC5jb2x1bW4gKz0gdG9rZW4udmFsdWUubGVuZ3RoOwogICAgICAgICAgICAgICAgZm9yIChpKys7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTsKICAgICAgICAgICAgICAgICAgICB0YWcuZW5kLmNvbHVtbiArPSB0b2tlbi52YWx1ZS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgaWYgKGlzKHRva2VuLCAidGFnLWNsb3NlIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGFnLnNlbGZDbG9zaW5nID0gdG9rZW4udmFsdWUgPT0gJy8+JzsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIHRhZzsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChpcyh0b2tlbiwgInRhZy1jbG9zZSIpKSB7CiAgICAgICAgICAgICAgICB0YWcuc2VsZkNsb3NpbmcgPSB0b2tlbi52YWx1ZSA9PSAnLz4nOwogICAgICAgICAgICAgICAgcmV0dXJuIHRhZzsKICAgICAgICAgICAgfQogICAgICAgICAgICB0YWcuc3RhcnQuY29sdW1uICs9IHRva2VuLnZhbHVlLmxlbmd0aDsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9OwogICAgdGhpcy5fZmluZEVuZFRhZ0luTGluZSA9IGZ1bmN0aW9uIChzZXNzaW9uLCByb3csIHRhZ05hbWUsIHN0YXJ0Q29sdW1uKSB7CiAgICAgICAgdmFyIHRva2VucyA9IHNlc3Npb24uZ2V0VG9rZW5zKHJvdyk7CiAgICAgICAgdmFyIGNvbHVtbiA9IDA7CiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldOwogICAgICAgICAgICBjb2x1bW4gKz0gdG9rZW4udmFsdWUubGVuZ3RoOwogICAgICAgICAgICBpZiAoY29sdW1uIDwgc3RhcnRDb2x1bW4pCiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgaWYgKGlzKHRva2VuLCAiZW5kLXRhZy1vcGVuIikpIHsKICAgICAgICAgICAgICAgIHRva2VuID0gdG9rZW5zW2kgKyAxXTsKICAgICAgICAgICAgICAgIGlmICh0b2tlbiAmJiB0b2tlbi52YWx1ZSA9PSB0YWdOYW1lKQogICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICAgIH07CiAgICB0aGlzLmdldEZvbGRXaWRnZXRSYW5nZSA9IGZ1bmN0aW9uIChzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdykgewogICAgICAgIHZhciB0YWdzID0gc2Vzc2lvbi5nZXRNYXRjaGluZ1RhZ3MoeyByb3c6IHJvdywgY29sdW1uOiAwIH0pOwogICAgICAgIGlmICh0YWdzKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgUmFuZ2UodGFncy5vcGVuVGFnLmVuZC5yb3csIHRhZ3Mub3BlblRhZy5lbmQuY29sdW1uLCB0YWdzLmNsb3NlVGFnLnN0YXJ0LnJvdywgdGFncy5jbG9zZVRhZy5zdGFydC5jb2x1bW4pOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tbWVudEZvbGRXaWRnZXQoc2Vzc2lvbiwgcm93KQogICAgICAgICAgICAgICAgJiYgc2Vzc2lvbi5nZXRDb21tZW50Rm9sZFJhbmdlKHJvdywgc2Vzc2lvbi5nZXRMaW5lKHJvdykubGVuZ3RoKTsKICAgICAgICB9CiAgICB9Owp9KS5jYWxsKEZvbGRNb2RlLnByb3RvdHlwZSk7Cgp9KTsKCmFjZS5kZWZpbmUoImFjZS9tb2RlL3htbCIsWyJyZXF1aXJlIiwiZXhwb3J0cyIsIm1vZHVsZSIsImFjZS9saWIvb29wIiwiYWNlL2xpYi9sYW5nIiwiYWNlL21vZGUvdGV4dCIsImFjZS9tb2RlL3htbF9oaWdobGlnaHRfcnVsZXMiLCJhY2UvbW9kZS9iZWhhdmlvdXIveG1sIiwiYWNlL21vZGUvZm9sZGluZy94bWwiLCJhY2Uvd29ya2VyL3dvcmtlcl9jbGllbnQiXSwgZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKXsidXNlIHN0cmljdCI7CnZhciBvb3AgPSByZXF1aXJlKCIuLi9saWIvb29wIik7CnZhciBsYW5nID0gcmVxdWlyZSgiLi4vbGliL2xhbmciKTsKdmFyIFRleHRNb2RlID0gcmVxdWlyZSgiLi90ZXh0IikuTW9kZTsKdmFyIFhtbEhpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZSgiLi94bWxfaGlnaGxpZ2h0X3J1bGVzIikuWG1sSGlnaGxpZ2h0UnVsZXM7CnZhciBYbWxCZWhhdmlvdXIgPSByZXF1aXJlKCIuL2JlaGF2aW91ci94bWwiKS5YbWxCZWhhdmlvdXI7CnZhciBYbWxGb2xkTW9kZSA9IHJlcXVpcmUoIi4vZm9sZGluZy94bWwiKS5Gb2xkTW9kZTsKdmFyIFdvcmtlckNsaWVudCA9IHJlcXVpcmUoIi4uL3dvcmtlci93b3JrZXJfY2xpZW50IikuV29ya2VyQ2xpZW50Owp2YXIgTW9kZSA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuSGlnaGxpZ2h0UnVsZXMgPSBYbWxIaWdobGlnaHRSdWxlczsKICAgIHRoaXMuJGJlaGF2aW91ciA9IG5ldyBYbWxCZWhhdmlvdXIoKTsKICAgIHRoaXMuZm9sZGluZ1J1bGVzID0gbmV3IFhtbEZvbGRNb2RlKCk7Cn07Cm9vcC5pbmhlcml0cyhNb2RlLCBUZXh0TW9kZSk7CihmdW5jdGlvbiAoKSB7CiAgICB0aGlzLnZvaWRFbGVtZW50cyA9IGxhbmcuYXJyYXlUb01hcChbXSk7CiAgICB0aGlzLmJsb2NrQ29tbWVudCA9IHsgc3RhcnQ6ICI8IS0tIiwgZW5kOiAiLS0+IiB9OwogICAgdGhpcy5jcmVhdGVXb3JrZXIgPSBmdW5jdGlvbiAoc2Vzc2lvbikgewogICAgICAgIHZhciB3b3JrZXIgPSBuZXcgV29ya2VyQ2xpZW50KFsiYWNlIl0sICJhY2UvbW9kZS94bWxfd29ya2VyIiwgIldvcmtlciIpOwogICAgICAgIHdvcmtlci5hdHRhY2hUb0RvY3VtZW50KHNlc3Npb24uZ2V0RG9jdW1lbnQoKSk7CiAgICAgICAgd29ya2VyLm9uKCJlcnJvciIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIHNlc3Npb24uc2V0QW5ub3RhdGlvbnMoZS5kYXRhKTsKICAgICAgICB9KTsKICAgICAgICB3b3JrZXIub24oInRlcm1pbmF0ZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc2Vzc2lvbi5jbGVhckFubm90YXRpb25zKCk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHdvcmtlcjsKICAgIH07CiAgICB0aGlzLiRpZCA9ICJhY2UvbW9kZS94bWwiOwp9KS5jYWxsKE1vZGUucHJvdG90eXBlKTsKZXhwb3J0cy5Nb2RlID0gTW9kZTsKCn0pOwoKYWNlLmRlZmluZSgiYWNlL21vZGUvanNkb2NfY29tbWVudF9oaWdobGlnaHRfcnVsZXMiLFsicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJhY2UvbGliL29vcCIsImFjZS9tb2RlL3RleHRfaGlnaGxpZ2h0X3J1bGVzIl0sIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSl7InVzZSBzdHJpY3QiOwp2YXIgb29wID0gcmVxdWlyZSgiLi4vbGliL29vcCIpOwp2YXIgVGV4dEhpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZSgiLi90ZXh0X2hpZ2hsaWdodF9ydWxlcyIpLlRleHRIaWdobGlnaHRSdWxlczsKdmFyIEpzRG9jQ29tbWVudEhpZ2hsaWdodFJ1bGVzID0gZnVuY3Rpb24gKCkgewogICAgdGhpcy4kcnVsZXMgPSB7CiAgICAgICAgInN0YXJ0IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0b2tlbjogWyJjb21tZW50LmRvYy50YWciLCAiY29tbWVudC5kb2MudGV4dCIsICJscGFyZW4uZG9jIl0sCiAgICAgICAgICAgICAgICByZWdleDogIihAKD86cGFyYW18bWVtYmVyfHR5cGVkZWZ8cHJvcGVydHl8bmFtZXNwYWNlfHZhcnxjb25zdHxjYWxsYmFjaykpKFxccyopKHspIiwKICAgICAgICAgICAgICAgIHB1c2g6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiAibHBhcmVuLmRvYyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4OiAieyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2g6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlOiAiZG9jLXN5bnRheCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogInJwYXJlbi5kb2MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4OiAifXwoPz0kKSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogInBvcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46IFsicnBhcmVuLmRvYyIsICJ0ZXh0LmRvYyIsICJ2YXJpYWJsZS5wYXJhbWV0ZXIuZG9jIiwgImxwYXJlbi5kb2MiLCAidmFyaWFibGUucGFyYW1ldGVyLmRvYyIsICJycGFyZW4uZG9jIl0sCiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4OiAvKH0pKFxzKikoPzooW1x3PTpcL1wuXSspfCg/OihcWykoW1x3PTpcL1wuXSspKFxdKSkpLywKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogInBvcCIKICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiAicnBhcmVuLmRvYyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4OiAifXwoPz0kKSIsCiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6ICJwb3AiCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlOiAiZG9jLXN5bnRheCIKICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRUb2tlbjogInRleHQuZG9jIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46IFsiY29tbWVudC5kb2MudGFnIiwgInRleHQuZG9jIiwgImxwYXJlbi5kb2MiXSwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiKEAoPzpyZXR1cm5zP3x5aWVsZHN8dHlwZXx0aGlzfHN1cHByZXNzfHB1YmxpY3xwcm90ZWN0ZWR8cHJpdmF0ZXxwYWNrYWdlfG1vZGlmaWVzfCIKICAgICAgICAgICAgICAgICAgICArICJpbXBsZW1lbnRzfGV4dGVybmFsfGV4Y2VwdGlvbnx0aHJvd3N8ZW51bXxkZWZpbmV8ZXh0ZW5kcykpKFxccyopKHspIiwKICAgICAgICAgICAgICAgIHB1c2g6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuOiAibHBhcmVuLmRvYyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4OiAieyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2g6IFsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlOiAiZG9jLXN5bnRheCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogInJwYXJlbi5kb2MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4OiAifXwoPz0kKSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogInBvcCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46ICJycGFyZW4uZG9jIiwKICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXg6ICJ9fCg/PSQpIiwKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogInBvcCIKICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGU6ICJkb2Mtc3ludGF4IgogICAgICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFRva2VuOiAidGV4dC5kb2MiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogWyJjb21tZW50LmRvYy50YWciLCAidGV4dC5kb2MiLCAidmFyaWFibGUucGFyYW1ldGVyLmRvYyJdLAogICAgICAgICAgICAgICAgcmVnZXg6ICIoQCg/OmFsaWFzfG1lbWJlcm9mfGluc3RhbmNlfG1vZHVsZXxuYW1lfGxlbmRzfG5hbWVzcGFjZXxleHRlcm5hbHx0aGlzfHRlbXBsYXRlfCIKICAgICAgICAgICAgICAgICAgICArICJyZXF1aXJlc3xwYXJhbXxpbXBsZW1lbnRzfGZ1bmN0aW9ufGV4dGVuZHN8dHlwZWRlZnxtaXhlc3xjb25zdHJ1Y3Rvcnx2YXJ8IgogICAgICAgICAgICAgICAgICAgICsgIm1lbWJlcm9mXFwhfGV2ZW50fGxpc3RlbnN8ZXhwb3J0c3xjbGFzc3xjb25zdHJ1Y3RzfGludGVyZmFjZXxlbWl0c3xmaXJlc3wiCiAgICAgICAgICAgICAgICAgICAgKyAidGhyb3dzfGNvbnN0fGNhbGxiYWNrfGJvcnJvd3N8YXVnbWVudHMpKShcXHMrKShcXHdbXFx3I1wuOlwvflwiXFwtXSopPyIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46IFsiY29tbWVudC5kb2MudGFnIiwgInRleHQuZG9jIiwgInZhcmlhYmxlLnBhcmFtZXRlci5kb2MiXSwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiKEBtZXRob2QpKFxccyspKFxcd1tcXHdcLlxcKFxcKV0qKSIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJjb21tZW50LmRvYy50YWciLAogICAgICAgICAgICAgICAgcmVnZXg6ICJAYWNjZXNzXFxzKyg/OnByaXZhdGV8cHVibGljfHByb3RlY3RlZCkiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAiY29tbWVudC5kb2MudGFnIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiQGtpbmRcXHMrKD86Y2xhc3N8Y29uc3RhbnR8ZXZlbnR8ZXh0ZXJuYWx8ZmlsZXxmdW5jdGlvbnxtZW1iZXJ8bWl4aW58bW9kdWxlfG5hbWVzcGFjZXx0eXBlZGVmKSIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJjb21tZW50LmRvYy50YWciLAogICAgICAgICAgICAgICAgcmVnZXg6ICJAXFx3Kyg/PVxcc3wkKSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgSnNEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMuZ2V0VGFnUnVsZSgpLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBkZWZhdWx0VG9rZW46ICJjb21tZW50LmRvYyIsCiAgICAgICAgICAgICAgICBjYXNlSW5zZW5zaXRpdmU6IHRydWUKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImRvYy1zeW50YXgiOiBbewogICAgICAgICAgICAgICAgdG9rZW46ICJvcGVyYXRvci5kb2MiLAogICAgICAgICAgICAgICAgcmVnZXg6IC9bfDpdLwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogInBhcmVuLmRvYyIsCiAgICAgICAgICAgICAgICByZWdleDogL1tcW1xdXS8KICAgICAgICAgICAgfV0KICAgIH07CiAgICB0aGlzLm5vcm1hbGl6ZVJ1bGVzKCk7Cn07Cm9vcC5pbmhlcml0cyhKc0RvY0NvbW1lbnRIaWdobGlnaHRSdWxlcywgVGV4dEhpZ2hsaWdodFJ1bGVzKTsKSnNEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMuZ2V0VGFnUnVsZSA9IGZ1bmN0aW9uIChzdGFydCkgewogICAgcmV0dXJuIHsKICAgICAgICB0b2tlbjogImNvbW1lbnQuZG9jLnRhZy5zdG9yYWdlLnR5cGUiLAogICAgICAgIHJlZ2V4OiAiXFxiKD86VE9ET3xGSVhNRXxYWFh8SEFDSylcXGIiCiAgICB9Owp9OwpKc0RvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5nZXRTdGFydFJ1bGUgPSBmdW5jdGlvbiAoc3RhcnQpIHsKICAgIHJldHVybiB7CiAgICAgICAgdG9rZW46ICJjb21tZW50LmRvYyIsIC8vIGRvYyBjb21tZW50CiAgICAgICAgcmVnZXg6ICJcXC9cXCooPz1cXCopIiwKICAgICAgICBuZXh0OiBzdGFydAogICAgfTsKfTsKSnNEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMuZ2V0RW5kUnVsZSA9IGZ1bmN0aW9uIChzdGFydCkgewogICAgcmV0dXJuIHsKICAgICAgICB0b2tlbjogImNvbW1lbnQuZG9jIiwgLy8gY2xvc2luZyBjb21tZW50CiAgICAgICAgcmVnZXg6ICJcXCpcXC8iLAogICAgICAgIG5leHQ6IHN0YXJ0CiAgICB9Owp9OwpleHBvcnRzLkpzRG9jQ29tbWVudEhpZ2hsaWdodFJ1bGVzID0gSnNEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXM7Cgp9KTsKCmFjZS5kZWZpbmUoImFjZS9tb2RlL2phdmFzY3JpcHRfaGlnaGxpZ2h0X3J1bGVzIixbInJlcXVpcmUiLCJleHBvcnRzIiwibW9kdWxlIiwiYWNlL2xpYi9vb3AiLCJhY2UvbW9kZS9qc2RvY19jb21tZW50X2hpZ2hsaWdodF9ydWxlcyIsImFjZS9tb2RlL3RleHRfaGlnaGxpZ2h0X3J1bGVzIl0sIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSl7InVzZSBzdHJpY3QiOwp2YXIgb29wID0gcmVxdWlyZSgiLi4vbGliL29vcCIpOwp2YXIgRG9jQ29tbWVudEhpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZSgiLi9qc2RvY19jb21tZW50X2hpZ2hsaWdodF9ydWxlcyIpLkpzRG9jQ29tbWVudEhpZ2hsaWdodFJ1bGVzOwp2YXIgVGV4dEhpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZSgiLi90ZXh0X2hpZ2hsaWdodF9ydWxlcyIpLlRleHRIaWdobGlnaHRSdWxlczsKdmFyIGlkZW50aWZpZXJSZSA9ICJbYS16QS1aXFwkX1x1MDBhMS1cdWZmZmZdW2EtekEtWlxcZFxcJF9cdTAwYTEtXHVmZmZmXSoiOwp2YXIgSmF2YVNjcmlwdEhpZ2hsaWdodFJ1bGVzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsKICAgIHZhciBrZXl3b3JkTWFwcGVyID0gdGhpcy5jcmVhdGVLZXl3b3JkTWFwcGVyKHsKICAgICAgICAidmFyaWFibGUubGFuZ3VhZ2UiOiAiQXJyYXl8Qm9vbGVhbnxEYXRlfEZ1bmN0aW9ufEl0ZXJhdG9yfE51bWJlcnxPYmplY3R8UmVnRXhwfFN0cmluZ3xQcm94eXxTeW1ib2x8IiArIC8vIENvbnN0cnVjdG9ycwogICAgICAgICAgICAiTmFtZXNwYWNlfFFOYW1lfFhNTHxYTUxMaXN0fCIgKyAvLyBFNFgKICAgICAgICAgICAgIkFycmF5QnVmZmVyfEZsb2F0MzJBcnJheXxGbG9hdDY0QXJyYXl8SW50MTZBcnJheXxJbnQzMkFycmF5fEludDhBcnJheXwiICsKICAgICAgICAgICAgIlVpbnQxNkFycmF5fFVpbnQzMkFycmF5fFVpbnQ4QXJyYXl8VWludDhDbGFtcGVkQXJyYXl8IiArCiAgICAgICAgICAgICJFcnJvcnxFdmFsRXJyb3J8SW50ZXJuYWxFcnJvcnxSYW5nZUVycm9yfFJlZmVyZW5jZUVycm9yfFN0b3BJdGVyYXRpb258IiArIC8vIEVycm9ycwogICAgICAgICAgICAiU3ludGF4RXJyb3J8VHlwZUVycm9yfFVSSUVycm9yfCIgKwogICAgICAgICAgICAiZGVjb2RlVVJJfGRlY29kZVVSSUNvbXBvbmVudHxlbmNvZGVVUkl8ZW5jb2RlVVJJQ29tcG9uZW50fGV2YWx8aXNGaW5pdGV8IiArIC8vIE5vbi1jb25zdHJ1Y3RvciBmdW5jdGlvbnMKICAgICAgICAgICAgImlzTmFOfHBhcnNlRmxvYXR8cGFyc2VJbnR8IiArCiAgICAgICAgICAgICJKU09OfE1hdGh8IiArIC8vIE90aGVyCiAgICAgICAgICAgICJ0aGlzfGFyZ3VtZW50c3xwcm90b3R5cGV8d2luZG93fGRvY3VtZW50IiwgLy8gUHNldWRvCiAgICAgICAgImtleXdvcmQiOiAiY29uc3R8eWllbGR8aW1wb3J0fGdldHxzZXR8YXN5bmN8YXdhaXR8IiArCiAgICAgICAgICAgICJicmVha3xjYXNlfGNhdGNofGNvbnRpbnVlfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZmluYWxseXxmb3J8ZnVuY3Rpb258IiArCiAgICAgICAgICAgICJpZnxpbnxvZnxpbnN0YW5jZW9mfG5ld3xyZXR1cm58c3dpdGNofHRocm93fHRyeXx0eXBlb2Z8bGV0fHZhcnx3aGlsZXx3aXRofGRlYnVnZ2VyfCIgKwogICAgICAgICAgICAiX19wYXJlbnRfX3xfX2NvdW50X198ZXNjYXBlfHVuZXNjYXBlfHdpdGh8X19wcm90b19ffCIgKwogICAgICAgICAgICAiY2xhc3N8ZW51bXxleHRlbmRzfHN1cGVyfGV4cG9ydHxpbXBsZW1lbnRzfHByaXZhdGV8cHVibGljfGludGVyZmFjZXxwYWNrYWdlfHByb3RlY3RlZHxzdGF0aWN8Y29uc3RydWN0b3IiLAogICAgICAgICJzdG9yYWdlLnR5cGUiOiAiY29uc3R8bGV0fHZhcnxmdW5jdGlvbiIsCiAgICAgICAgImNvbnN0YW50Lmxhbmd1YWdlIjogIm51bGx8SW5maW5pdHl8TmFOfHVuZGVmaW5lZCIsCiAgICAgICAgInN1cHBvcnQuZnVuY3Rpb24iOiAiYWxlcnQiLAogICAgICAgICJjb25zdGFudC5sYW5ndWFnZS5ib29sZWFuIjogInRydWV8ZmFsc2UiCiAgICB9LCAiaWRlbnRpZmllciIpOwogICAgdmFyIGt3QmVmb3JlUmUgPSAiY2FzZXxkb3xlbHNlfGZpbmFsbHl8aW58aW5zdGFuY2VvZnxyZXR1cm58dGhyb3d8dHJ5fHR5cGVvZnx5aWVsZHx2b2lkIjsKICAgIHZhciBlc2NhcGVkUmUgPSAiXFxcXCg/OnhbMC05YS1mQS1GXXsyfXwiICsgLy8gaGV4CiAgICAgICAgInVbMC05YS1mQS1GXXs0fXwiICsgLy8gdW5pY29kZQogICAgICAgICJ1e1swLTlhLWZBLUZdezEsNn19fCIgKyAvLyBlczYgdW5pY29kZQogICAgICAgICJbMC0yXVswLTddezAsMn18IiArIC8vIG9jdAogICAgICAgICIzWzAtN11bMC03XT98IiArIC8vIG9jdAogICAgICAgICJbNC03XVswLTddP3wiICsgLy9vY3QKICAgICAgICAiLikiOwogICAgdGhpcy4kcnVsZXMgPSB7CiAgICAgICAgIm5vX3JlZ2V4IjogWwogICAgICAgICAgICBEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMuZ2V0U3RhcnRSdWxlKCJkb2Mtc3RhcnQiKSwKICAgICAgICAgICAgY29tbWVudHMoIm5vX3JlZ2V4IiksCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRva2VuOiAic3RyaW5nIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiJyg/PS4pIiwKICAgICAgICAgICAgICAgIG5leHQ6ICJxc3RyaW5nIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogInN0cmluZyIsCiAgICAgICAgICAgICAgICByZWdleDogJyIoPz0uKScsCiAgICAgICAgICAgICAgICBuZXh0OiAicXFzdHJpbmciCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAiY29uc3RhbnQubnVtZXJpYyIsIC8vIGhleGFkZWNpbWFsLCBvY3RhbCBhbmQgYmluYXJ5CiAgICAgICAgICAgICAgICByZWdleDogLzAoPzpbeFhdWzAtOWEtZkEtRl0rfFtvT11bMC03XSt8W2JCXVswMV0rKVxiLwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImNvbnN0YW50Lm51bWVyaWMiLCAvLyBkZWNpbWFsIGludGVnZXJzIGFuZCBmbG9hdHMKICAgICAgICAgICAgICAgIHJlZ2V4OiAvKD86XGRcZCooPzpcLlxkKik/fFwuXGQrKSg/OltlRV1bKy1dP1xkK1xiKT8vCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiBbCiAgICAgICAgICAgICAgICAgICAgInN0b3JhZ2UudHlwZSIsICJwdW5jdHVhdGlvbi5vcGVyYXRvciIsICJzdXBwb3J0LmZ1bmN0aW9uIiwKICAgICAgICAgICAgICAgICAgICAicHVuY3R1YXRpb24ub3BlcmF0b3IiLCAiZW50aXR5Lm5hbWUuZnVuY3Rpb24iLCAidGV4dCIsICJrZXl3b3JkLm9wZXJhdG9yIgogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiKCIgKyBpZGVudGlmaWVyUmUgKyAiKShcXC4pKHByb3RvdHlwZSkoXFwuKSgiICsgaWRlbnRpZmllclJlICsgIikoXFxzKikoPSkiLAogICAgICAgICAgICAgICAgbmV4dDogImZ1bmN0aW9uX2FyZ3VtZW50cyIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46IFsKICAgICAgICAgICAgICAgICAgICAic3RvcmFnZS50eXBlIiwgInB1bmN0dWF0aW9uLm9wZXJhdG9yIiwgImVudGl0eS5uYW1lLmZ1bmN0aW9uIiwgInRleHQiLAogICAgICAgICAgICAgICAgICAgICJrZXl3b3JkLm9wZXJhdG9yIiwgInRleHQiLCAic3RvcmFnZS50eXBlIiwgInRleHQiLCAicGFyZW4ubHBhcmVuIgogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiKCIgKyBpZGVudGlmaWVyUmUgKyAiKShcXC4pKCIgKyBpZGVudGlmaWVyUmUgKyAiKShcXHMqKSg9KShcXHMqKShmdW5jdGlvblxcKj8pKFxccyopKFxcKCkiLAogICAgICAgICAgICAgICAgbmV4dDogImZ1bmN0aW9uX2FyZ3VtZW50cyIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46IFsKICAgICAgICAgICAgICAgICAgICAiZW50aXR5Lm5hbWUuZnVuY3Rpb24iLCAidGV4dCIsICJrZXl3b3JkLm9wZXJhdG9yIiwgInRleHQiLCAic3RvcmFnZS50eXBlIiwKICAgICAgICAgICAgICAgICAgICAidGV4dCIsICJwYXJlbi5scGFyZW4iCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgcmVnZXg6ICIoIiArIGlkZW50aWZpZXJSZSArICIpKFxccyopKD0pKFxccyopKGZ1bmN0aW9uXFwqPykoXFxzKikoXFwoKSIsCiAgICAgICAgICAgICAgICBuZXh0OiAiZnVuY3Rpb25fYXJndW1lbnRzIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogWwogICAgICAgICAgICAgICAgICAgICJzdG9yYWdlLnR5cGUiLCAicHVuY3R1YXRpb24ub3BlcmF0b3IiLCAiZW50aXR5Lm5hbWUuZnVuY3Rpb24iLCAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgImtleXdvcmQub3BlcmF0b3IiLCAidGV4dCIsCiAgICAgICAgICAgICAgICAgICAgInN0b3JhZ2UudHlwZSIsICJ0ZXh0IiwgImVudGl0eS5uYW1lLmZ1bmN0aW9uIiwgInRleHQiLCAicGFyZW4ubHBhcmVuIgogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiKCIgKyBpZGVudGlmaWVyUmUgKyAiKShcXC4pKCIgKyBpZGVudGlmaWVyUmUgKyAiKShcXHMqKSg9KShcXHMqKShmdW5jdGlvblxcKj8pKFxccyspKFxcdyspKFxccyopKFxcKCkiLAogICAgICAgICAgICAgICAgbmV4dDogImZ1bmN0aW9uX2FyZ3VtZW50cyIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46IFsKICAgICAgICAgICAgICAgICAgICAic3RvcmFnZS50eXBlIiwgInRleHQiLCAiZW50aXR5Lm5hbWUuZnVuY3Rpb24iLCAidGV4dCIsICJwYXJlbi5scGFyZW4iCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgcmVnZXg6ICIoZnVuY3Rpb25cXCo/KShcXHMrKSgiICsgaWRlbnRpZmllclJlICsgIikoXFxzKikoXFwoKSIsCiAgICAgICAgICAgICAgICBuZXh0OiAiZnVuY3Rpb25fYXJndW1lbnRzIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogWwogICAgICAgICAgICAgICAgICAgICJlbnRpdHkubmFtZS5mdW5jdGlvbiIsICJ0ZXh0IiwgInB1bmN0dWF0aW9uLm9wZXJhdG9yIiwKICAgICAgICAgICAgICAgICAgICAidGV4dCIsICJzdG9yYWdlLnR5cGUiLCAidGV4dCIsICJwYXJlbi5scGFyZW4iCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgcmVnZXg6ICIoIiArIGlkZW50aWZpZXJSZSArICIpKFxccyopKDopKFxccyopKGZ1bmN0aW9uXFwqPykoXFxzKikoXFwoKSIsCiAgICAgICAgICAgICAgICBuZXh0OiAiZnVuY3Rpb25fYXJndW1lbnRzIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogWwogICAgICAgICAgICAgICAgICAgICJ0ZXh0IiwgInRleHQiLCAic3RvcmFnZS50eXBlIiwgInRleHQiLCAicGFyZW4ubHBhcmVuIgogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiKDopKFxccyopKGZ1bmN0aW9uXFwqPykoXFxzKikoXFwoKSIsCiAgICAgICAgICAgICAgICBuZXh0OiAiZnVuY3Rpb25fYXJndW1lbnRzIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImtleXdvcmQiLAogICAgICAgICAgICAgICAgcmVnZXg6ICJmcm9tKD89XFxzKignfFwiKSkiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAia2V5d29yZCIsCiAgICAgICAgICAgICAgICByZWdleDogIig/OiIgKyBrd0JlZm9yZVJlICsgIilcXGIiLAogICAgICAgICAgICAgICAgbmV4dDogInN0YXJ0IgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogInN1cHBvcnQuY29uc3RhbnQiLAogICAgICAgICAgICAgICAgcmVnZXg6IC90aGF0XGIvCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiBbInN0b3JhZ2UudHlwZSIsICJwdW5jdHVhdGlvbi5vcGVyYXRvciIsICJzdXBwb3J0LmZ1bmN0aW9uLmZpcmVidWciXSwKICAgICAgICAgICAgICAgIHJlZ2V4OiAvKGNvbnNvbGUpKFwuKSh3YXJufGluZm98bG9nfGVycm9yfGRlYnVnfHRpbWV8dHJhY2V8dGltZUVuZHxhc3NlcnQpXGIvCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiBrZXl3b3JkTWFwcGVyLAogICAgICAgICAgICAgICAgcmVnZXg6IGlkZW50aWZpZXJSZQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogInB1bmN0dWF0aW9uLm9wZXJhdG9yIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAvWy5dKD8hWy5dKS8sCiAgICAgICAgICAgICAgICBuZXh0OiAicHJvcGVydHkiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAic3RvcmFnZS50eXBlIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAvPT4vLAogICAgICAgICAgICAgICAgbmV4dDogInN0YXJ0IgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImtleXdvcmQub3BlcmF0b3IiLAogICAgICAgICAgICAgICAgcmVnZXg6IC8tLXxcK1wrfFwuezN9fD09PXw9PXw9fCE9fCE9PXw8Kz0/fD4rPT98IXwmJnxcfFx8fFw/OnxbISQlJiorXC1+XC9eXT0/LywKICAgICAgICAgICAgICAgIG5leHQ6ICJzdGFydCIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJwdW5jdHVhdGlvbi5vcGVyYXRvciIsCiAgICAgICAgICAgICAgICByZWdleDogL1s/Oiw7Ll0vLAogICAgICAgICAgICAgICAgbmV4dDogInN0YXJ0IgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogInBhcmVuLmxwYXJlbiIsCiAgICAgICAgICAgICAgICByZWdleDogL1tcWyh7XS8sCiAgICAgICAgICAgICAgICBuZXh0OiAic3RhcnQiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAicGFyZW4ucnBhcmVuIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAvW1xdKX1dLwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImNvbW1lbnQiLAogICAgICAgICAgICAgICAgcmVnZXg6IC9eIyEuKiQvCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgIHByb3BlcnR5OiBbewogICAgICAgICAgICAgICAgdG9rZW46ICJ0ZXh0IiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiXFxzKyIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46IFsKICAgICAgICAgICAgICAgICAgICAic3RvcmFnZS50eXBlIiwgInB1bmN0dWF0aW9uLm9wZXJhdG9yIiwgImVudGl0eS5uYW1lLmZ1bmN0aW9uIiwgInRleHQiLAogICAgICAgICAgICAgICAgICAgICJrZXl3b3JkLm9wZXJhdG9yIiwgInRleHQiLAogICAgICAgICAgICAgICAgICAgICJzdG9yYWdlLnR5cGUiLCAidGV4dCIsICJlbnRpdHkubmFtZS5mdW5jdGlvbiIsICJ0ZXh0IiwgInBhcmVuLmxwYXJlbiIKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICByZWdleDogIigiICsgaWRlbnRpZmllclJlICsgIikoXFwuKSgiICsgaWRlbnRpZmllclJlICsgIikoXFxzKikoPSkoXFxzKikoZnVuY3Rpb25cXCo/KSg/OihcXHMrKShcXHcrKSk/KFxccyopKFxcKCkiLAogICAgICAgICAgICAgICAgbmV4dDogImZ1bmN0aW9uX2FyZ3VtZW50cyIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJwdW5jdHVhdGlvbi5vcGVyYXRvciIsCiAgICAgICAgICAgICAgICByZWdleDogL1suXSg/IVsuXSkvCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAic3VwcG9ydC5mdW5jdGlvbiIsCiAgICAgICAgICAgICAgICByZWdleDogLyhzKD86aCg/OmlmdHxvdyg/Ok1vZCg/OmVsZXNzRGlhbG9nfGFsRGlhbG9nKXxIZWxwKSl8Y3JvbGwoPzpYfEJ5KD86UGFnZXN8TGluZXMpP3xZfFRvKT98dCg/Om9wfHJpa2UpfGkoPzpufHplVG9Db250ZW50fGRlYmFyfGduVGV4dCl8b3J0fHUoPzpwfGIoPzpzdHIoPzppbmcpPyk/KXxwbGkoPzpjZXx0KXxlKD86bmR8dCg/OlJlKD86c2l6YWJsZXxxdWVzdEhlYWRlcil8TSg/OmkoPzpudXRlc3xsbGlzZWNvbmRzKXxvbnRoKXxTZWNvbmRzfEhvKD86dEtleXN8dXJzKXxZZWFyfEN1cnNvcnxUaW1lKD86b3V0KT98SW50ZXJ2YWx8Wk9wdGlvbnN8RGF0ZXxVVEMoPzpNKD86aSg/Om51dGVzfGxsaXNlY29uZHMpfG9udGgpfFNlY29uZHN8SG91cnN8RGF0ZXxGdWxsWWVhcil8RnVsbFllYXJ8QWN0aXZlKXxhcmNoKXxxcnR8bGljZXxhdmVQcmVmZXJlbmNlc3xtYWxsKXxoKD86b21lfGFuZGxlRXZlbnQpfG5hdmlnYXRlfGMoPzpoYXIoPzpDb2RlQXR8QXQpfG8oPzpzfG4oPzpjYXR8dGV4dHVhbHxmaXJtKXxtcGlsZSl8ZWlsfGxlYXIoPzpUaW1lb3V0fEludGVydmFsKT98YSg/OnB0dXJlRXZlbnRzfGxsKXxyZWF0ZSg/OlN0eWxlU2hlZXR8UG9wdXB8RXZlbnRPYmplY3QpKXx0KD86byg/OkdNVFN0cmluZ3xTKD86dHJpbmd8b3VyY2UpfFUoPzpUQ1N0cmluZ3xwcGVyQ2FzZSl8TG8oPzpjYWxlU3RyaW5nfHdlckNhc2UpKXxlc3R8YSg/Om58aW50KD86RW5hYmxlZCk/KSl8aSg/OnMoPzpOYU58RmluaXRlKXxuZGV4T2Z8dGFsaWNzKXxkKD86aXNhYmxlRXh0ZXJuYWxDYXB0dXJlfHVtcHxldGFjaEV2ZW50KXx1KD86big/OnNoaWZ0fHRhaW50fGVzY2FwZXx3YXRjaCl8cGRhdGVDb21tYW5kcyl8aig/Om9pbnxhdmFFbmFibGVkKXxwKD86byg/OnB8dyl8dXNofGx1Z2lucy5yZWZyZXNofGEoPzpkZGluZ3N8cnNlKD86SW50fEZsb2F0KT8pfHIoPzppbnR8b21wdHxlZmVyZW5jZSkpfGUoPzpzY2FwZXxuYWJsZUV4dGVybmFsQ2FwdHVyZXx2YWx8bGVtZW50RnJvbVBvaW50fHgoPzpwfGVjKD86U2NyaXB0fENvbW1hbmQpPykpfHZhbHVlT2Z8VVRDfHF1ZXJ5Q29tbWFuZCg/OlN0YXRlfEluZGV0ZXJtfEVuYWJsZWR8VmFsdWUpfGYoPzppKD86bmR8bHRlcnxsZSg/Ok1vZGlmaWVkRGF0ZXxTaXplfENyZWF0ZWREYXRlfFVwZGF0ZWREYXRlKXx4ZWQpfG8oPzpudCg/OnNpemV8Y29sb3IpfHJ3YXJkfHJFYWNoKXxsb29yfHJvbUNoYXJDb2RlKXx3YXRjaHxsKD86aW5rfG8oPzphZHxnKXxhc3RJbmRleE9mKXxhKD86c2lufG5jaG9yfGNvc3x0KD86dGFjaEV2ZW50fG9ifGFuKD86Mik/KXxwcGx5fGxlcnR8Yig/OnN8b3J0KSl8cig/Om91KD86bmR8dGVFdmVudHMpfGUoPzpzaXplKD86Qnl8VG8pfGNhbGN8dHVyblZhbHVlfHBsYWNlfHZlcnNlfGwoPzpvYWR8ZWFzZSg/OkNhcHR1cmV8RXZlbnRzKSkpfGFuZG9tKXxnKD86b3xldCg/OlJlc3BvbnNlSGVhZGVyfE0oPzppKD86bnV0ZXN8bGxpc2Vjb25kcyl8b250aCl8U2UoPzpjb25kc3xsZWN0aW9uKXxIb3Vyc3xZZWFyfFRpbWUoPzp6b25lT2Zmc2V0KT98RGEoPzp5fHRlKXxVVEMoPzpNKD86aSg/Om51dGVzfGxsaXNlY29uZHMpfG9udGgpfFNlY29uZHN8SG91cnN8RGEoPzp5fHRlKXxGdWxsWWVhcil8RnVsbFllYXJ8QSg/OnR0ZW50aW9ufGxsUmVzcG9uc2VIZWFkZXJzKSkpfG0oPzppbnxvdmUoPzpCKD86eXxlbG93KXxUbyg/OkFic29sdXRlKT98QWJvdmUpfGVyZ2VBdHRyaWJ1dGVzfGEoPzp0Y2h8cmdpbnN8eCkpfGIoPzp0b2F8aWd8byg/OmxkfHJkZXJXaWR0aHMpfGxpbmt8YWNrKSlcYig/PVwoKS8KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJzdXBwb3J0LmZ1bmN0aW9uLmRvbSIsCiAgICAgICAgICAgICAgICByZWdleDogLyhzKD86dWIoPzpzdHJpbmdEYXRhfG1pdCl8cGxpdFRleHR8ZSg/OnQoPzpOYW1lZEl0ZW18QXR0cmlidXRlKD86Tm9kZSk/KXxsZWN0KSl8aGFzKD86Q2hpbGROb2Rlc3xGZWF0dXJlKXxuYW1lZEl0ZW18Yyg/OmwoPzppY2t8byg/OnNlfG5lTm9kZSkpfHJlYXRlKD86Qyg/Om9tbWVudHxEQVRBU2VjdGlvbnxhcHRpb24pfFQoPzpIZWFkfGV4dE5vZGV8Rm9vdCl8RG9jdW1lbnRGcmFnbWVudHxQcm9jZXNzaW5nSW5zdHJ1Y3Rpb258RSg/Om50aXR5UmVmZXJlbmNlfGxlbWVudCl8QXR0cmlidXRlKSl8dGFiSW5kZXh8aSg/Om5zZXJ0KD86Um93fEJlZm9yZXxDZWxsfERhdGEpfHRlbSl8b3BlbnxkZWxldGUoPzpSb3d8Qyg/OmVsbHxhcHRpb24pfFQoPzpIZWFkfEZvb3QpfERhdGEpfGZvY3VzfHdyaXRlKD86bG4pP3xhKD86ZGR8cHBlbmQoPzpDaGlsZHxEYXRhKSl8cmUoPzpzZXR8cGxhY2UoPzpDaGlsZHxEYXRhKXxtb3ZlKD86TmFtZWRJdGVtfENoaWxkfEF0dHJpYnV0ZSg/Ok5vZGUpPyk/KXxnZXQoPzpOYW1lZEl0ZW18RWxlbWVudCg/OnNCeSg/Ok5hbWV8VGFnTmFtZXxDbGFzc05hbWUpfEJ5SWQpfEF0dHJpYnV0ZSg/Ok5vZGUpPyl8Ymx1cilcYig/PVwoKS8KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJzdXBwb3J0LmNvbnN0YW50IiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAvKHMoPzp5c3RlbUxhbmd1YWdlfGNyKD86aXB0c3xvbGxiYXJzfGVlbig/Olh8WXxUb3B8TGVmdCkpfHQoPzp5bGUoPzpTaGVldHMpP3xhdHVzKD86VGV4dHxiYXIpPyl8aWJsaW5nKD86QmVsb3d8QWJvdmUpfG91cmNlfHVmZml4ZXN8ZSg/OmN1cml0eSg/OlBvbGljeSk/fGwoPzplY3Rpb258ZikpKXxoKD86aXN0b3J5fG9zdCg/Om5hbWUpP3xhcyg/Omh8Rm9jdXMpKXx5fFgoPzpNTERvY3VtZW50fFNMRG9jdW1lbnQpfG4oPzpleHR8YW1lKD86c3BhY2UoPzpzfFVSSSl8UHJvcCkpfE0oPzpJTl9WQUxVRXxBWF9WQUxVRSl8Yyg/OmhhcmFjdGVyU2V0fG8oPzpuKD86c3RydWN0b3J8dHJvbGxlcnMpfG9raWVFbmFibGVkfGxvckRlcHRofG1wKD86b25lbnRzfGxldGUpKXx1cnJlbnR8cHVDbGFzc3xsKD86aSg/OnAoPzpib2FyZERhdGEpP3xlbnRJbmZvcm1hdGlvbil8b3NlZHxhc3Nlcyl8YWxsZSg/OmV8cil8cnlwdG8pfHQoPzpvKD86b2xiYXJ8cCl8ZXh0KD86VHJhbnNmb3JtfEluZGVudHxEZWNvcmF0aW9ufEFsaWduKXxhZ3MpfFNRUlQoPzoxXzJ8Mil8aSg/Om4oPzpuZXIoPzpIZWlnaHR8V2lkdGgpfHB1dCl8ZHN8Z25vcmVDYXNlKXx6SW5kZXh8byg/OnNjcHV8big/OnJlYWR5c3RhdGVjaGFuZ2V8TGluZSl8dXRlcig/OkhlaWdodHxXaWR0aCl8cCg/OnNQcm9maWxlfGVuZXIpfGZmc2NyZWVuQnVmZmVyaW5nKXxORUdBVElWRV9JTkZJTklUWXxkKD86aSg/OnNwbGF5fGFsb2coPzpIZWlnaHR8VG9wfFdpZHRofExlZnR8QXJndW1lbnRzKXxyZWN0b3JpZXMpfGUoPzpzY3JpcHRpb258ZmF1bHQoPzpTdGF0dXN8Q2goPzplY2tlZHxhcnNldCl8VmlldykpKXx1KD86c2VyKD86UHJvZmlsZXxMYW5ndWFnZXxBZ2VudCl8big/OmlxdWVJRHxkZWZpbmVkKXxwZGF0ZUludGVydmFsKXxfY29udGVudHxwKD86aXhlbERlcHRofG9ydHxlcnNvbmFsYmFyfGtjczExfGwoPzp1Z2luc3xhdGZvcm0pfGEoPzp0aG5hbWV8ZGRpbmcoPzpSaWdodHxCb3R0b218VG9wfExlZnQpfHJlbnQoPzpXaW5kb3d8TGF5ZXIpP3xnZSg/OlgoPzpPZmZzZXQpP3xZKD86T2Zmc2V0KT8pKXxyKD86byg/OnRvKD86Y29sfHR5cGUpfGR1Y3QoPzpTdWIpP3xtcHRlcil8ZSg/OnZpb3VzfGZpeCkpKXxlKD86big/OmNvZGluZ3xhYmxlZFBsdWdpbil8eCg/OnRlcm5hbHxwYW5kbyl8bWJlZHMpfHYoPzppc2liaWxpdHl8ZW5kb3IoPzpTdWIpP3xMaW5rY29sb3IpfFVSTFVuZW5jb2RlZHxQKD86SXxPU0lUSVZFX0lORklOSVRZKXxmKD86aWxlbmFtZXxvKD86bnQoPzpTaXplfEZhbWlseXxXZWlnaHQpfHJtTmFtZSl8cmFtZSg/OnN8RWxlbWVudCl8Z0NvbG9yKXxFfHdoaXRlU3BhY2V8bCg/OmkoPzpzdFN0eWxlVHlwZXxuKD86ZUhlaWdodHxrQ29sb3IpKXxvKD86Y2EoPzp0aW9uKD86YmFyKT98bE5hbWUpfHdzcmMpfGUoPzpuZ3RofGZ0KD86Q29udGV4dCk/KXxhKD86c3QoPzpNKD86b2RpZmllZHxhdGNoKXxJbmRleHxQYXJlbil8eWVyKD86c3xYKXxuZ3VhZ2UpKXxhKD86cHAoPzpNaW5vclZlcnNpb258TmFtZXxDbyg/OmRlTmFtZXxyZSl8VmVyc2lvbil8dmFpbCg/OkhlaWdodHxUb3B8V2lkdGh8TGVmdCl8bGx8cig/Oml0eXxndW1lbnRzKXxMaW5rY29sb3J8Ym92ZSl8cig/OmlnaHQoPzpDb250ZXh0KT98ZSg/OnNwb25zZSg/OlhNTHxUZXh0KXxhZHlTdGF0ZSkpfGdsb2JhbHx4fG0oPzppbWVUeXBlc3x1bHRpbGluZXxlbnViYXJ8YXJnaW4oPzpSaWdodHxCb3R0b218VG9wfExlZnQpKXxMKD86Tig/OjEwfDIpfE9HKD86MTBFfDJFKSl8Yig/Om8oPzp0dG9tfHJkZXIoPzpXaWR0aHxSaWdodFdpZHRofEJvdHRvbVdpZHRofFN0eWxlfENvbG9yfFRvcFdpZHRofExlZnRXaWR0aCkpfHVmZmVyRGVwdGh8ZWxvd3xhY2tncm91bmQoPzpDb2xvcnxJbWFnZSkpKVxiLwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImlkZW50aWZpZXIiLAogICAgICAgICAgICAgICAgcmVnZXg6IGlkZW50aWZpZXJSZQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICByZWdleDogIiIsCiAgICAgICAgICAgICAgICB0b2tlbjogImVtcHR5IiwKICAgICAgICAgICAgICAgIG5leHQ6ICJub19yZWdleCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInN0YXJ0IjogWwogICAgICAgICAgICBEb2NDb21tZW50SGlnaGxpZ2h0UnVsZXMuZ2V0U3RhcnRSdWxlKCJkb2Mtc3RhcnQiKSwKICAgICAgICAgICAgY29tbWVudHMoInN0YXJ0IiksCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRva2VuOiAic3RyaW5nLnJlZ2V4cCIsCiAgICAgICAgICAgICAgICByZWdleDogIlxcLyIsCiAgICAgICAgICAgICAgICBuZXh0OiAicmVnZXgiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAidGV4dCIsCiAgICAgICAgICAgICAgICByZWdleDogIlxccyt8XiQiLAogICAgICAgICAgICAgICAgbmV4dDogInN0YXJ0IgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImVtcHR5IiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiIiwKICAgICAgICAgICAgICAgIG5leHQ6ICJub19yZWdleCIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInJlZ2V4IjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0b2tlbjogInJlZ2V4cC5rZXl3b3JkLm9wZXJhdG9yIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiXFxcXCg/OnVbXFxkYS1mQS1GXXs0fXx4W1xcZGEtZkEtRl17Mn18LikiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAic3RyaW5nLnJlZ2V4cCIsCiAgICAgICAgICAgICAgICByZWdleDogIi9bc3huZ2lteV0qIiwKICAgICAgICAgICAgICAgIG5leHQ6ICJub19yZWdleCIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJpbnZhbGlkIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAvXHtcZCtcYiw/XGQqXH1bKypdfFsrKiReP11bKypdfFskXl1bP118XD97Myx9LwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImNvbnN0YW50Lmxhbmd1YWdlLmVzY2FwZSIsCiAgICAgICAgICAgICAgICByZWdleDogL1woXD9bOj0hXXxcKXxce1xkK1xiLD9cZCpcfXxbKypdXD98WygpJF4rKj8uXS8KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJjb25zdGFudC5sYW5ndWFnZS5kZWxpbWl0ZXIiLAogICAgICAgICAgICAgICAgcmVnZXg6IC9cfC8KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJjb25zdGFudC5sYW5ndWFnZS5lc2NhcGUiLAogICAgICAgICAgICAgICAgcmVnZXg6IC9cW1xePy8sCiAgICAgICAgICAgICAgICBuZXh0OiAicmVnZXhfY2hhcmFjdGVyX2NsYXNzIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImVtcHR5IiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiJCIsCiAgICAgICAgICAgICAgICBuZXh0OiAibm9fcmVnZXgiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRlZmF1bHRUb2tlbjogInN0cmluZy5yZWdleHAiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJyZWdleF9jaGFyYWN0ZXJfY2xhc3MiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRva2VuOiAicmVnZXhwLmNoYXJjbGFzcy5rZXl3b3JkLm9wZXJhdG9yIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiXFxcXCg/OnVbXFxkYS1mQS1GXXs0fXx4W1xcZGEtZkEtRl17Mn18LikiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAiY29uc3RhbnQubGFuZ3VhZ2UuZXNjYXBlIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiXSIsCiAgICAgICAgICAgICAgICBuZXh0OiAicmVnZXgiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAiY29uc3RhbnQubGFuZ3VhZ2UuZXNjYXBlIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiLSIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJlbXB0eSIsCiAgICAgICAgICAgICAgICByZWdleDogIiQiLAogICAgICAgICAgICAgICAgbmV4dDogIm5vX3JlZ2V4IgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBkZWZhdWx0VG9rZW46ICJzdHJpbmcucmVnZXhwLmNoYXJhY2h0ZXJjbGFzcyIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImRlZmF1bHRfcGFyYW1ldGVyIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICB0b2tlbjogInN0cmluZyIsCiAgICAgICAgICAgICAgICByZWdleDogIicoPz0uKSIsCiAgICAgICAgICAgICAgICBwdXNoOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogInN0cmluZyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4OiAiJ3wkIiwKICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDogInBvcCIKICAgICAgICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGU6ICJxc3RyaW5nIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJzdHJpbmciLAogICAgICAgICAgICAgICAgcmVnZXg6ICciKD89LiknLAogICAgICAgICAgICAgICAgcHVzaDogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW46ICJzdHJpbmciLAogICAgICAgICAgICAgICAgICAgICAgICByZWdleDogJyJ8JCcsCiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQ6ICJwb3AiCiAgICAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlOiAicXFzdHJpbmciCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImNvbnN0YW50Lmxhbmd1YWdlIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAibnVsbHxJbmZpbml0eXxOYU58dW5kZWZpbmVkIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogImNvbnN0YW50Lm51bWVyaWMiLCAvLyBoZXhhZGVjaW1hbCwgb2N0YWwgYW5kIGJpbmFyeQogICAgICAgICAgICAgICAgcmVnZXg6IC8wKD86W3hYXVswLTlhLWZBLUZdK3xbb09dWzAtN10rfFtiQl1bMDFdKylcYi8KICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJjb25zdGFudC5udW1lcmljIiwgLy8gZGVjaW1hbCBpbnRlZ2VycyBhbmQgZmxvYXRzCiAgICAgICAgICAgICAgICByZWdleDogLyg/OlxkXGQqKD86XC5cZCopP3xcLlxkKykoPzpbZUVdWystXT9cZCtcYik/LwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogInB1bmN0dWF0aW9uLm9wZXJhdG9yIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiLCIsCiAgICAgICAgICAgICAgICBuZXh0OiAiZnVuY3Rpb25fYXJndW1lbnRzIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogInRleHQiLAogICAgICAgICAgICAgICAgcmVnZXg6ICJcXHMrIgogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogInB1bmN0dWF0aW9uLm9wZXJhdG9yIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiJCIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJlbXB0eSIsCiAgICAgICAgICAgICAgICByZWdleDogIiIsCiAgICAgICAgICAgICAgICBuZXh0OiAibm9fcmVnZXgiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJmdW5jdGlvbl9hcmd1bWVudHMiOiBbCiAgICAgICAgICAgIGNvbW1lbnRzKCJmdW5jdGlvbl9hcmd1bWVudHMiKSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdG9rZW46ICJ2YXJpYWJsZS5wYXJhbWV0ZXIiLAogICAgICAgICAgICAgICAgcmVnZXg6IGlkZW50aWZpZXJSZQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogInB1bmN0dWF0aW9uLm9wZXJhdG9yIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiLCIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJ0ZXh0IiwKICAgICAgICAgICAgICAgIHJlZ2V4OiAiXFxzKyIKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJwdW5jdHVhdGlvbi5vcGVyYXRvciIsCiAgICAgICAgICAgICAgICByZWdleDogIiQiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIHRva2VuOiAiZW1wdHkiLAogICAgICAgICAgICAgICAgcmVnZXg6ICIiLAogICAgICAgICAgICAgICAgbmV4dDogIm5vX3JlZ2V4IgogICAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicXFzdHJpbmciOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRva2VuOiAiY29uc3RhbnQubGFuZ3VhZ2UuZXNjYXBlIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiBlc2NhcGVkUmUKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJzdHJpbmciLAogICAgICAgICAgICAgICAgcmVnZXg6ICJcXFxcJCIsCiAgICAgICAgICAgICAgICBjb25zdW1lTGluZUVuZDogdHJ1ZQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogInN0cmluZyIsCiAgICAgICAgICAgICAgICByZWdleDogJyJ8JCcsCiAgICAgICAgICAgICAgICBuZXh0OiAibm9fcmVnZXgiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRlZmF1bHRUb2tlbjogInN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInFzdHJpbmciOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHRva2VuOiAiY29uc3RhbnQubGFuZ3VhZ2UuZXNjYXBlIiwKICAgICAgICAgICAgICAgIHJlZ2V4OiBlc2NhcGVkUmUKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgdG9rZW46ICJzdHJpbmciLAogICAgICAgICAgICAgICAgcmVnZXg6ICJcXFxcJCIsCiAgICAgICAgICAgICAgICBjb25zdW1lTGluZUVuZDogdHJ1ZQogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICB0b2tlbjogInN0cmluZyIsCiAgICAgICAgICAgICAgICByZWdleDogIid8JCIsCiAgICAgICAgICAgICAgICBuZXh0OiAibm9fcmVnZXgiCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIGRlZmF1bHRUb2tlbjogInN0cmluZyIKICAgICAgICAgICAgfQogICAgICAgIF0KICAgIH07CiAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMubm9FUzYpIHsKICAgICAgICB0aGlzLiRydWxlcy5ub19yZWdleC51bnNoaWZ0KHsKICAgICAgICAgICAgcmVnZXg6ICJbe31dIiwgb25NYXRjaDogZnVuY3Rpb24gKHZhbCwgc3RhdGUsIHN0YWNrKSB7CiAgICAgICAgICAgICAgICB0aGlzLm5leHQgPSB2YWwgPT0gInsiID8gdGhpcy5uZXh0U3RhdGUgOiAiIjsKICAgICAgICAgICAgICAgIGlmICh2YWwgPT0gInsiICYmIHN0YWNrLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIHN0YWNrLnVuc2hpZnQoInN0YXJ0Iiwgc3RhdGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsID09ICJ9IiAmJiBzdGFjay5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dCA9IHN0YWNrLnNoaWZ0KCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubmV4dC5pbmRleE9mKCJzdHJpbmciKSAhPSAtMSB8fCB0aGlzLm5leHQuaW5kZXhPZigianN4IikgIT0gLTEpCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAicGFyZW4ucXVhc2kuZW5kIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiB2YWwgPT0gInsiID8gInBhcmVuLmxwYXJlbiIgOiAicGFyZW4ucnBhcmVuIjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbmV4dFN0YXRlOiAic3RhcnQiCiAgICAgICAgfSwgewogICAgICAgICAgICB0b2tlbjogInN0cmluZy5xdWFzaS5zdGFydCIsCiAgICAgICAgICAgIHJlZ2V4OiAvYC8sCiAgICAgICAgICAgIHB1c2g6IFt7CiAgICAgICAgICAgICAgICAgICAgdG9rZW46ICJjb25zdGFudC5sYW5ndWFnZS5lc2NhcGUiLAogICAgICAgICAgICAgICAgICAgIHJlZ2V4OiBlc2NhcGVkUmUKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0b2tlbjogInBhcmVuLnF1YXNpLnN0YXJ0IiwKICAgICAgICAgICAgICAgICAgICByZWdleDogL1wkey8sCiAgICAgICAgICAgICAgICAgICAgcHVzaDogInN0YXJ0IgogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIHRva2VuOiAic3RyaW5nLnF1YXNpLmVuZCIsCiAgICAgICAgICAgICAgICAgICAgcmVnZXg6IC9gLywKICAgICAgICAgICAgICAgICAgICBuZXh0OiAicG9wIgogICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgIGRlZmF1bHRUb2tlbjogInN0cmluZy5xdWFzaSIKICAgICAgICAgICAgICAgIH1dCiAgICAgICAgfSwgewogICAgICAgICAgICB0b2tlbjogWyJ2YXJpYWJsZS5wYXJhbWV0ZXIiLCAidGV4dCJdLAogICAgICAgICAgICByZWdleDogIigiICsgaWRlbnRpZmllclJlICsgIikoXFxzKikoPz1cXD0+KSIKICAgICAgICB9LCB7CiAgICAgICAgICAgIHRva2VuOiAicGFyZW4ubHBhcmVuIiwKICAgICAgICAgICAgcmVnZXg6ICIoXFwoKSg/PS4rXFxzKj0+KSIsCiAgICAgICAgICAgIG5leHQ6ICJmdW5jdGlvbl9hcmd1bWVudHMiCiAgICAgICAgfSwgewogICAgICAgICAgICB0b2tlbjogInZhcmlhYmxlLmxhbmd1YWdlIiwKICAgICAgICAgICAgcmVnZXg6ICIoPzooPzooPzpXZWFrKT8oPzpTZXR8TWFwKSl8UHJvbWlzZSlcXGIiCiAgICAgICAgfSk7CiAgICAgICAgdGhpcy4kcnVsZXNbImZ1bmN0aW9uX2FyZ3VtZW50cyJdLnVuc2hpZnQoewogICAgICAgICAgICB0b2tlbjogImtleXdvcmQub3BlcmF0b3IiLAogICAgICAgICAgICByZWdleDogIj0iLAogICAgICAgICAgICBuZXh0OiAiZGVmYXVsdF9wYXJhbWV0ZXIiCiAgICAgICAgfSwgewogICAgICAgICAgICB0b2tlbjogImtleXdvcmQub3BlcmF0b3IiLAogICAgICAgICAgICByZWdleDogIlxcLnszfSIKICAgICAgICB9KTsKICAgICAgICB0aGlzLiRydWxlc1sicHJvcGVydHkiXS51bnNoaWZ0KHsKICAgICAgICAgICAgdG9rZW46ICJzdXBwb3J0LmZ1bmN0aW9uIiwKICAgICAgICAgICAgcmVnZXg6ICIoZmluZEluZGV4fHJlcGVhdHxzdGFydHNXaXRofGVuZHNXaXRofGluY2x1ZGVzfGlzU2FmZUludGVnZXJ8dHJ1bmN8Y2JydHxsb2cyfGxvZzEwfHNpZ258dGhlbnxjYXRjaHwiCiAgICAgICAgICAgICAgICArICJmaW5hbGx5fHJlc29sdmV8cmVqZWN0fHJhY2V8YW55fGFsbHxhbGxTZXR0bGVkfGtleXN8ZW50cmllc3xpc0ludGVnZXIpXFxiKD89XFwoKSIKICAgICAgICB9LCB7CiAgICAgICAgICAgIHRva2VuOiAiY29uc3RhbnQubGFuZ3VhZ2UiLAogICAgICAgICAgICByZWdleDogIig/Ok1BWF9TQUZFX0lOVEVHRVJ8TUlOX1NBRkVfSU5URUdFUnxFUFNJTE9OKVxcYiIKICAgICAgICB9KTsKICAgICAgICBpZiAoIW9wdGlvbnMgfHwgb3B0aW9ucy5qc3ggIT0gZmFsc2UpCiAgICAgICAgICAgIEpTWC5jYWxsKHRoaXMpOwogICAgfQogICAgdGhpcy5lbWJlZFJ1bGVzKERvY0NvbW1lbnRIaWdobGlnaHRSdWxlcywgImRvYy0iLCBbRG9jQ29tbWVudEhpZ2hsaWdodFJ1bGVzLmdldEVuZFJ1bGUoIm5vX3JlZ2V4IildKTsKICAgIHRoaXMubm9ybWFsaXplUnVsZXMoKTsKfTsKb29wLmluaGVyaXRzKEphdmFTY3JpcHRIaWdobGlnaHRSdWxlcywgVGV4dEhpZ2hsaWdodFJ1bGVzKTsKZnVuY3Rpb24gSlNYKCkgewogICAgdmFyIHRhZ1JlZ2V4ID0gaWRlbnRpZmllclJlLnJlcGxhY2UoIlxcZCIsICJcXGRcXC0iKTsKICAgIHZhciBqc3hUYWcgPSB7CiAgICAgICAgb25NYXRjaDogZnVuY3Rpb24gKHZhbCwgc3RhdGUsIHN0YWNrKSB7CiAgICAgICAgICAgIHZhciBvZmZzZXQgPSB2YWwuY2hhckF0KDEpID09ICIvIiA/IDIgOiAxOwogICAgICAgICAgICBpZiAob2Zmc2V0ID09IDEpIHsKICAgICAgICAgICAgICAgIGlmIChzdGF0ZSAhPSB0aGlzLm5leHRTdGF0ZSkKICAgICAgICAgICAgICAgICAgICBzdGFjay51bnNoaWZ0KHRoaXMubmV4dCwgdGhpcy5uZXh0U3RhdGUsIDApOwogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHN0YWNrLnVuc2hpZnQodGhpcy5uZXh0KTsKICAgICAgICAgICAgICAgIHN0YWNrWzJdKys7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAob2Zmc2V0ID09IDIpIHsKICAgICAgICAgICAgICAgIGlmIChzdGF0ZSA9PSB0aGlzLm5leHRTdGF0ZSkgewogICAgICAgICAgICAgICAgICAgIHN0YWNrWzFdLS07CiAgICAgICAgICAgICAgICAgICAgaWYgKCFzdGFja1sxXSB8fCBzdGFja1sxXSA8IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2suc2hpZnQoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIFt7CiAgICAgICAgICAgICAgICAgICAgdHlwZTogIm1ldGEudGFnLnB1bmN0dWF0aW9uLiIgKyAob2Zmc2V0ID09IDEgPyAiIiA6ICJlbmQtIikgKyAidGFnLW9wZW4ueG1sIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsLnNsaWNlKDAsIG9mZnNldCkKICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICB0eXBlOiAibWV0YS50YWcudGFnLW5hbWUueG1sIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsLnN1YnN0cihvZmZzZXQpCiAgICAgICAgICAgICAgICB9XTsKICAgICAgICB9LAogICAgICAgIHJlZ2V4OiAiPC8/IiArIHRhZ1JlZ2V4ICsgIiIsCiAgICAgICAgbmV4dDogImpzeEF0dHJpYnV0ZXMiLAogICAgICAgIG5leHRTdGF0ZTogImpzeCIKICAgIH07CiAgICB0aGlzLiRydWxlcy5zdGFydC51bnNoaWZ0KGpzeFRhZyk7CiAgICB2YXIganN4SnNSdWxlID0gewogICAgICAgIHJlZ2V4OiAieyIsCiAgICAgICAgdG9rZW46ICJwYXJlbi5xdWFzaS5zdGFydCIsCiAgICAgICAgcHVzaDogInN0YXJ0IgogICAgfTsKICAgIHRoaXMuJHJ1bGVzLmpzeCA9IFsKICAgICAgICBqc3hKc1J1bGUsCiAgICAgICAganN4VGFnLAogICAgICAgIHsgaW5jbHVkZTogInJlZmVyZW5jZSIgfSwKICAgICAgICB7IGRlZmF1bHRUb2tlbjogInN0cmluZyIgfQogICAgXTsKICAgIHRoaXMuJHJ1bGVzLmpzeEF0dHJpYnV0ZXMgPSBbewogICAgICAgICAgICB0b2tlbjogIm1ldGEudGFnLnB1bmN0dWF0aW9uLnRhZy1jbG9zZS54bWwiLAogICAgICAgICAgICByZWdleDogIi8/PiIsCiAgICAgICAgICAgIG9uTWF0Y2g6IGZ1bmN0aW9uICh2YWx1ZSwgY3VycmVudFN0YXRlLCBzdGFjaykgewogICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTdGF0ZSA9PSBzdGFja1swXSkKICAgICAgICAgICAgICAgICAgICBzdGFjay5zaGlmdCgpOwogICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PSAyKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrWzBdID09IHRoaXMubmV4dFN0YXRlKQogICAgICAgICAgICAgICAgICAgICAgICBzdGFja1sxXS0tOwogICAgICAgICAgICAgICAgICAgIGlmICghc3RhY2tbMV0gfHwgc3RhY2tbMV0gPCAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrLnNwbGljZSgwLCAyKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB0aGlzLm5leHQgPSBzdGFja1swXSB8fCAic3RhcnQiOwogICAgICAgICAgICAgICAgcmV0dXJuIFt7IHR5cGU6IHRoaXMudG9rZW4sIHZhbHVlOiB2YWx1ZSB9XTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbmV4dFN0YXRlOiAianN4IgogICAgICAgIH0sCiAgICAgICAganN4SnNSdWxlLAogICAgICAgIGNvbW1lbnRzKCJqc3hBdHRyaWJ1dGVzIiksCiAgICAgICAgewogICAgICAgICAgICB0b2tlbjogImVudGl0eS5vdGhlci5hdHRyaWJ1dGUtbmFtZS54bWwiLAogICAgICAgICAgICByZWdleDogdGFnUmVnZXgKICAgICAgICB9LCB7CiAgICAgICAgICAgIHRva2VuOiAia2V5d29yZC5vcGVyYXRvci5hdHRyaWJ1dGUtZXF1YWxzLnhtbCIsCiAgICAgICAgICAgIHJlZ2V4OiAiPSIKICAgICAgICB9LCB7CiAgICAgICAgICAgIHRva2VuOiAidGV4dC50YWctd2hpdGVzcGFjZS54bWwiLAogICAgICAgICAgICByZWdleDogIlxccysiCiAgICAgICAgfSwgewogICAgICAgICAgICB0b2tlbjogInN0cmluZy5hdHRyaWJ1dGUtdmFsdWUueG1sIiwKICAgICAgICAgICAgcmVnZXg6ICInIiwKICAgICAgICAgICAgc3RhdGVOYW1lOiAianN4X2F0dHJfcSIsCiAgICAgICAgICAgIHB1c2g6IFsKICAgICAgICAgICAgICAgIHsgdG9rZW46ICJzdHJpbmcuYXR0cmlidXRlLXZhbHVlLnhtbCIsIHJlZ2V4OiAiJyIsIG5leHQ6ICJwb3AiIH0sCiAgICAgICAgICAgICAgICB7IGluY2x1ZGU6ICJyZWZlcmVuY2UiIH0sCiAgICAgICAgICAgICAgICB7IGRlZmF1bHRUb2tlbjogInN0cmluZy5hdHRyaWJ1dGUtdmFsdWUueG1sIiB9CiAgICAgICAgICAgIF0KICAgICAgICB9LCB7CiAgICAgICAgICAgIHRva2VuOiAic3RyaW5nLmF0dHJpYnV0ZS12YWx1ZS54bWwiLAogICAgICAgICAgICByZWdleDogJyInLAogICAgICAgICAgICBzdGF0ZU5hbWU6ICJqc3hfYXR0cl9xcSIsCiAgICAgICAgICAgIHB1c2g6IFsKICAgICAgICAgICAgICAgIHsgdG9rZW46ICJzdHJpbmcuYXR0cmlidXRlLXZhbHVlLnhtbCIsIHJlZ2V4OiAnIicsIG5leHQ6ICJwb3AiIH0sCiAgICAgICAgICAgICAgICB7IGluY2x1ZGU6ICJyZWZlcmVuY2UiIH0sCiAgICAgICAgICAgICAgICB7IGRlZmF1bHRUb2tlbjogInN0cmluZy5hdHRyaWJ1dGUtdmFsdWUueG1sIiB9CiAgICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIGpzeFRhZwogICAgXTsKICAgIHRoaXMuJHJ1bGVzLnJlZmVyZW5jZSA9IFt7CiAgICAgICAgICAgIHRva2VuOiAiY29uc3RhbnQubGFuZ3VhZ2UuZXNjYXBlLnJlZmVyZW5jZS54bWwiLAogICAgICAgICAgICByZWdleDogIig/OiYjWzAtOV0rOyl8KD86JiN4WzAtOWEtZkEtRl0rOyl8KD86JlthLXpBLVowLTlfOlxcLi1dKzspIgogICAgICAgIH1dOwp9CmZ1bmN0aW9uIGNvbW1lbnRzKG5leHQpIHsKICAgIHJldHVybiBbCiAgICAgICAgewogICAgICAgICAgICB0b2tlbjogImNvbW1lbnQiLCAvLyBtdWx0aSBsaW5lIGNvbW1lbnQKICAgICAgICAgICAgcmVnZXg6IC9cL1wqLywKICAgICAgICAgICAgbmV4dDogWwogICAgICAgICAgICAgICAgRG9jQ29tbWVudEhpZ2hsaWdodFJ1bGVzLmdldFRhZ1J1bGUoKSwKICAgICAgICAgICAgICAgIHsgdG9rZW46ICJjb21tZW50IiwgcmVnZXg6ICJcXCpcXC8iLCBuZXh0OiBuZXh0IHx8ICJwb3AiIH0sCiAgICAgICAgICAgICAgICB7IGRlZmF1bHRUb2tlbjogImNvbW1lbnQiLCBjYXNlSW5zZW5zaXRpdmU6IHRydWUgfQogICAgICAgICAgICBdCiAgICAgICAgfSwgewogICAgICAgICAgICB0b2tlbjogImNvbW1lbnQiLAogICAgICAgICAgICByZWdleDogIlxcL1xcLyIsCiAgICAgICAgICAgIG5leHQ6IFsKICAgICAgICAgICAgICAgIERvY0NvbW1lbnRIaWdobGlnaHRSdWxlcy5nZXRUYWdSdWxlKCksCiAgICAgICAgICAgICAgICB7IHRva2VuOiAiY29tbWVudCIsIHJlZ2V4OiAiJHxeIiwgbmV4dDogbmV4dCB8fCAicG9wIiB9LAogICAgICAgICAgICAgICAgeyBkZWZhdWx0VG9rZW46ICJjb21tZW50IiwgY2FzZUluc2Vuc2l0aXZlOiB0cnVlIH0KICAgICAgICAgICAgXQogICAgICAgIH0KICAgIF07Cn0KZXhwb3J0cy5KYXZhU2NyaXB0SGlnaGxpZ2h0UnVsZXMgPSBKYXZhU2NyaXB0SGlnaGxpZ2h0UnVsZXM7Cgp9KTsKCmFjZS5kZWZpbmUoImFjZS9tb2RlL21hdGNoaW5nX2JyYWNlX291dGRlbnQiLFsicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJhY2UvcmFuZ2UiXSwgZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKXsidXNlIHN0cmljdCI7CnZhciBSYW5nZSA9IHJlcXVpcmUoIi4uL3JhbmdlIikuUmFuZ2U7CnZhciBNYXRjaGluZ0JyYWNlT3V0ZGVudCA9IGZ1bmN0aW9uICgpIHsgfTsKKGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuY2hlY2tPdXRkZW50ID0gZnVuY3Rpb24gKGxpbmUsIGlucHV0KSB7CiAgICAgICAgaWYgKCEvXlxzKyQvLnRlc3QobGluZSkpCiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICByZXR1cm4gL15ccypcfS8udGVzdChpbnB1dCk7CiAgICB9OwogICAgdGhpcy5hdXRvT3V0ZGVudCA9IGZ1bmN0aW9uIChkb2MsIHJvdykgewogICAgICAgIHZhciBsaW5lID0gZG9jLmdldExpbmUocm93KTsKICAgICAgICB2YXIgbWF0Y2ggPSBsaW5lLm1hdGNoKC9eKFxzKlx9KS8pOwogICAgICAgIGlmICghbWF0Y2gpCiAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgIHZhciBjb2x1bW4gPSBtYXRjaFsxXS5sZW5ndGg7CiAgICAgICAgdmFyIG9wZW5CcmFjZVBvcyA9IGRvYy5maW5kTWF0Y2hpbmdCcmFja2V0KHsgcm93OiByb3csIGNvbHVtbjogY29sdW1uIH0pOwogICAgICAgIGlmICghb3BlbkJyYWNlUG9zIHx8IG9wZW5CcmFjZVBvcy5yb3cgPT0gcm93KQogICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICB2YXIgaW5kZW50ID0gdGhpcy4kZ2V0SW5kZW50KGRvYy5nZXRMaW5lKG9wZW5CcmFjZVBvcy5yb3cpKTsKICAgICAgICBkb2MucmVwbGFjZShuZXcgUmFuZ2Uocm93LCAwLCByb3csIGNvbHVtbiAtIDEpLCBpbmRlbnQpOwogICAgfTsKICAgIHRoaXMuJGdldEluZGVudCA9IGZ1bmN0aW9uIChsaW5lKSB7CiAgICAgICAgcmV0dXJuIGxpbmUubWF0Y2goL15ccyovKVswXTsKICAgIH07Cn0pLmNhbGwoTWF0Y2hpbmdCcmFjZU91dGRlbnQucHJvdG90eXBlKTsKZXhwb3J0cy5NYXRjaGluZ0JyYWNlT3V0ZGVudCA9IE1hdGNoaW5nQnJhY2VPdXRkZW50OwoKfSk7CgphY2UuZGVmaW5lKCJhY2UvbW9kZS9mb2xkaW5nL2NzdHlsZSIsWyJyZXF1aXJlIiwiZXhwb3J0cyIsIm1vZHVsZSIsImFjZS9saWIvb29wIiwiYWNlL3JhbmdlIiwiYWNlL21vZGUvZm9sZGluZy9mb2xkX21vZGUiXSwgZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKXsidXNlIHN0cmljdCI7CnZhciBvb3AgPSByZXF1aXJlKCIuLi8uLi9saWIvb29wIik7CnZhciBSYW5nZSA9IHJlcXVpcmUoIi4uLy4uL3JhbmdlIikuUmFuZ2U7CnZhciBCYXNlRm9sZE1vZGUgPSByZXF1aXJlKCIuL2ZvbGRfbW9kZSIpLkZvbGRNb2RlOwp2YXIgRm9sZE1vZGUgPSBleHBvcnRzLkZvbGRNb2RlID0gZnVuY3Rpb24gKGNvbW1lbnRSZWdleCkgewogICAgaWYgKGNvbW1lbnRSZWdleCkgewogICAgICAgIHRoaXMuZm9sZGluZ1N0YXJ0TWFya2VyID0gbmV3IFJlZ0V4cCh0aGlzLmZvbGRpbmdTdGFydE1hcmtlci5zb3VyY2UucmVwbGFjZSgvXHxbXnxdKj8kLywgInwiICsgY29tbWVudFJlZ2V4LnN0YXJ0KSk7CiAgICAgICAgdGhpcy5mb2xkaW5nU3RvcE1hcmtlciA9IG5ldyBSZWdFeHAodGhpcy5mb2xkaW5nU3RvcE1hcmtlci5zb3VyY2UucmVwbGFjZSgvXHxbXnxdKj8kLywgInwiICsgY29tbWVudFJlZ2V4LmVuZCkpOwogICAgfQp9Owpvb3AuaW5oZXJpdHMoRm9sZE1vZGUsIEJhc2VGb2xkTW9kZSk7CihmdW5jdGlvbiAoKSB7CiAgICB0aGlzLmZvbGRpbmdTdGFydE1hcmtlciA9IC8oW1x7XFtcKF0pW15cfVxdXCldKiR8XlxzKihcL1wqKS87CiAgICB0aGlzLmZvbGRpbmdTdG9wTWFya2VyID0gL15bXlxbXHtcKF0qKFtcfVxdXCldKXxeW1xzXCpdKihcKlwvKS87CiAgICB0aGlzLnNpbmdsZUxpbmVCbG9ja0NvbW1lbnRSZSA9IC9eXHMqKFwvXCopLipcKlwvXHMqJC87CiAgICB0aGlzLnRyaXBsZVN0YXJCbG9ja0NvbW1lbnRSZSA9IC9eXHMqKFwvXCpcKlwqKS4qXCpcL1xzKiQvOwogICAgdGhpcy5zdGFydFJlZ2lvblJlID0gL15ccyooXC9cKnxcL1wvKSM/cmVnaW9uXGIvOwogICAgdGhpcy5fZ2V0Rm9sZFdpZGdldEJhc2UgPSB0aGlzLmdldEZvbGRXaWRnZXQ7CiAgICB0aGlzLmdldEZvbGRXaWRnZXQgPSBmdW5jdGlvbiAoc2Vzc2lvbiwgZm9sZFN0eWxlLCByb3cpIHsKICAgICAgICB2YXIgbGluZSA9IHNlc3Npb24uZ2V0TGluZShyb3cpOwogICAgICAgIGlmICh0aGlzLnNpbmdsZUxpbmVCbG9ja0NvbW1lbnRSZS50ZXN0KGxpbmUpKSB7CiAgICAgICAgICAgIGlmICghdGhpcy5zdGFydFJlZ2lvblJlLnRlc3QobGluZSkgJiYgIXRoaXMudHJpcGxlU3RhckJsb2NrQ29tbWVudFJlLnRlc3QobGluZSkpCiAgICAgICAgICAgICAgICByZXR1cm4gIiI7CiAgICAgICAgfQogICAgICAgIHZhciBmdyA9IHRoaXMuX2dldEZvbGRXaWRnZXRCYXNlKHNlc3Npb24sIGZvbGRTdHlsZSwgcm93KTsKICAgICAgICBpZiAoIWZ3ICYmIHRoaXMuc3RhcnRSZWdpb25SZS50ZXN0KGxpbmUpKQogICAgICAgICAgICByZXR1cm4gInN0YXJ0IjsgLy8gbGluZUNvbW1lbnRSZWdpb25TdGFydAogICAgICAgIHJldHVybiBmdzsKICAgIH07CiAgICB0aGlzLmdldEZvbGRXaWRnZXRSYW5nZSA9IGZ1bmN0aW9uIChzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdywgZm9yY2VNdWx0aWxpbmUpIHsKICAgICAgICB2YXIgbGluZSA9IHNlc3Npb24uZ2V0TGluZShyb3cpOwogICAgICAgIGlmICh0aGlzLnN0YXJ0UmVnaW9uUmUudGVzdChsaW5lKSkKICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tbWVudFJlZ2lvbkJsb2NrKHNlc3Npb24sIGxpbmUsIHJvdyk7CiAgICAgICAgdmFyIG1hdGNoID0gbGluZS5tYXRjaCh0aGlzLmZvbGRpbmdTdGFydE1hcmtlcik7CiAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgIHZhciBpID0gbWF0Y2guaW5kZXg7CiAgICAgICAgICAgIGlmIChtYXRjaFsxXSkKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm9wZW5pbmdCcmFja2V0QmxvY2soc2Vzc2lvbiwgbWF0Y2hbMV0sIHJvdywgaSk7CiAgICAgICAgICAgIHZhciByYW5nZSA9IHNlc3Npb24uZ2V0Q29tbWVudEZvbGRSYW5nZShyb3csIGkgKyBtYXRjaFswXS5sZW5ndGgsIDEpOwogICAgICAgICAgICBpZiAocmFuZ2UgJiYgIXJhbmdlLmlzTXVsdGlMaW5lKCkpIHsKICAgICAgICAgICAgICAgIGlmIChmb3JjZU11bHRpbGluZSkgewogICAgICAgICAgICAgICAgICAgIHJhbmdlID0gdGhpcy5nZXRTZWN0aW9uUmFuZ2Uoc2Vzc2lvbiwgcm93KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGZvbGRTdHlsZSAhPSAiYWxsIikKICAgICAgICAgICAgICAgICAgICByYW5nZSA9IG51bGw7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHJhbmdlOwogICAgICAgIH0KICAgICAgICBpZiAoZm9sZFN0eWxlID09PSAibWFya2JlZ2luIikKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIHZhciBtYXRjaCA9IGxpbmUubWF0Y2godGhpcy5mb2xkaW5nU3RvcE1hcmtlcik7CiAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgIHZhciBpID0gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGg7CiAgICAgICAgICAgIGlmIChtYXRjaFsxXSkKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb3NpbmdCcmFja2V0QmxvY2soc2Vzc2lvbiwgbWF0Y2hbMV0sIHJvdywgaSk7CiAgICAgICAgICAgIHJldHVybiBzZXNzaW9uLmdldENvbW1lbnRGb2xkUmFuZ2Uocm93LCBpLCAtMSk7CiAgICAgICAgfQogICAgfTsKICAgIHRoaXMuZ2V0U2VjdGlvblJhbmdlID0gZnVuY3Rpb24gKHNlc3Npb24sIHJvdykgewogICAgICAgIHZhciBsaW5lID0gc2Vzc2lvbi5nZXRMaW5lKHJvdyk7CiAgICAgICAgdmFyIHN0YXJ0SW5kZW50ID0gbGluZS5zZWFyY2goL1xTLyk7CiAgICAgICAgdmFyIHN0YXJ0Um93ID0gcm93OwogICAgICAgIHZhciBzdGFydENvbHVtbiA9IGxpbmUubGVuZ3RoOwogICAgICAgIHJvdyA9IHJvdyArIDE7CiAgICAgICAgdmFyIGVuZFJvdyA9IHJvdzsKICAgICAgICB2YXIgbWF4Um93ID0gc2Vzc2lvbi5nZXRMZW5ndGgoKTsKICAgICAgICB3aGlsZSAoKytyb3cgPCBtYXhSb3cpIHsKICAgICAgICAgICAgbGluZSA9IHNlc3Npb24uZ2V0TGluZShyb3cpOwogICAgICAgICAgICB2YXIgaW5kZW50ID0gbGluZS5zZWFyY2goL1xTLyk7CiAgICAgICAgICAgIGlmIChpbmRlbnQgPT09IC0xKQogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIGlmIChzdGFydEluZGVudCA+IGluZGVudCkKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB2YXIgc3ViUmFuZ2UgPSB0aGlzLmdldEZvbGRXaWRnZXRSYW5nZShzZXNzaW9uLCAiYWxsIiwgcm93KTsKICAgICAgICAgICAgaWYgKHN1YlJhbmdlKSB7CiAgICAgICAgICAgICAgICBpZiAoc3ViUmFuZ2Uuc3RhcnQucm93IDw9IHN0YXJ0Um93KSB7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdWJSYW5nZS5pc011bHRpTGluZSgpKSB7CiAgICAgICAgICAgICAgICAgICAgcm93ID0gc3ViUmFuZ2UuZW5kLnJvdzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHN0YXJ0SW5kZW50ID09IGluZGVudCkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIGVuZFJvdyA9IHJvdzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG5ldyBSYW5nZShzdGFydFJvdywgc3RhcnRDb2x1bW4sIGVuZFJvdywgc2Vzc2lvbi5nZXRMaW5lKGVuZFJvdykubGVuZ3RoKTsKICAgIH07CiAgICB0aGlzLmdldENvbW1lbnRSZWdpb25CbG9jayA9IGZ1bmN0aW9uIChzZXNzaW9uLCBsaW5lLCByb3cpIHsKICAgICAgICB2YXIgc3RhcnRDb2x1bW4gPSBsaW5lLnNlYXJjaCgvXHMqJC8pOwogICAgICAgIHZhciBtYXhSb3cgPSBzZXNzaW9uLmdldExlbmd0aCgpOwogICAgICAgIHZhciBzdGFydFJvdyA9IHJvdzsKICAgICAgICB2YXIgcmUgPSAvXlxzKig/OlwvXCp8XC9cL3wtLSkjPyhlbmQpP3JlZ2lvblxiLzsKICAgICAgICB2YXIgZGVwdGggPSAxOwogICAgICAgIHdoaWxlICgrK3JvdyA8IG1heFJvdykgewogICAgICAgICAgICBsaW5lID0gc2Vzc2lvbi5nZXRMaW5lKHJvdyk7CiAgICAgICAgICAgIHZhciBtID0gcmUuZXhlYyhsaW5lKTsKICAgICAgICAgICAgaWYgKCFtKQogICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIGlmIChtWzFdKQogICAgICAgICAgICAgICAgZGVwdGgtLTsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgZGVwdGgrKzsKICAgICAgICAgICAgaWYgKCFkZXB0aCkKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICB2YXIgZW5kUm93ID0gcm93OwogICAgICAgIGlmIChlbmRSb3cgPiBzdGFydFJvdykgewogICAgICAgICAgICByZXR1cm4gbmV3IFJhbmdlKHN0YXJ0Um93LCBzdGFydENvbHVtbiwgZW5kUm93LCBsaW5lLmxlbmd0aCk7CiAgICAgICAgfQogICAgfTsKfSkuY2FsbChGb2xkTW9kZS5wcm90b3R5cGUpOwoKfSk7CgphY2UuZGVmaW5lKCJhY2UvbW9kZS9qYXZhc2NyaXB0IixbInJlcXVpcmUiLCJleHBvcnRzIiwibW9kdWxlIiwiYWNlL2xpYi9vb3AiLCJhY2UvbW9kZS90ZXh0IiwiYWNlL21vZGUvamF2YXNjcmlwdF9oaWdobGlnaHRfcnVsZXMiLCJhY2UvbW9kZS9tYXRjaGluZ19icmFjZV9vdXRkZW50IiwiYWNlL3dvcmtlci93b3JrZXJfY2xpZW50IiwiYWNlL21vZGUvYmVoYXZpb3VyL2NzdHlsZSIsImFjZS9tb2RlL2ZvbGRpbmcvY3N0eWxlIl0sIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSl7InVzZSBzdHJpY3QiOwp2YXIgb29wID0gcmVxdWlyZSgiLi4vbGliL29vcCIpOwp2YXIgVGV4dE1vZGUgPSByZXF1aXJlKCIuL3RleHQiKS5Nb2RlOwp2YXIgSmF2YVNjcmlwdEhpZ2hsaWdodFJ1bGVzID0gcmVxdWlyZSgiLi9qYXZhc2NyaXB0X2hpZ2hsaWdodF9ydWxlcyIpLkphdmFTY3JpcHRIaWdobGlnaHRSdWxlczsKdmFyIE1hdGNoaW5nQnJhY2VPdXRkZW50ID0gcmVxdWlyZSgiLi9tYXRjaGluZ19icmFjZV9vdXRkZW50IikuTWF0Y2hpbmdCcmFjZU91dGRlbnQ7CnZhciBXb3JrZXJDbGllbnQgPSByZXF1aXJlKCIuLi93b3JrZXIvd29ya2VyX2NsaWVudCIpLldvcmtlckNsaWVudDsKdmFyIENzdHlsZUJlaGF2aW91ciA9IHJlcXVpcmUoIi4vYmVoYXZpb3VyL2NzdHlsZSIpLkNzdHlsZUJlaGF2aW91cjsKdmFyIENTdHlsZUZvbGRNb2RlID0gcmVxdWlyZSgiLi9mb2xkaW5nL2NzdHlsZSIpLkZvbGRNb2RlOwp2YXIgTW9kZSA9IGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuSGlnaGxpZ2h0UnVsZXMgPSBKYXZhU2NyaXB0SGlnaGxpZ2h0UnVsZXM7CiAgICB0aGlzLiRvdXRkZW50ID0gbmV3IE1hdGNoaW5nQnJhY2VPdXRkZW50KCk7CiAgICB0aGlzLiRiZWhhdmlvdXIgPSBuZXcgQ3N0eWxlQmVoYXZpb3VyKCk7CiAgICB0aGlzLmZvbGRpbmdSdWxlcyA9IG5ldyBDU3R5bGVGb2xkTW9kZSgpOwp9Owpvb3AuaW5oZXJpdHMoTW9kZSwgVGV4dE1vZGUpOwooZnVuY3Rpb24gKCkgewogICAgdGhpcy5saW5lQ29tbWVudFN0YXJ0ID0gIi8vIjsKICAgIHRoaXMuYmxvY2tDb21tZW50ID0geyBzdGFydDogIi8qIiwgZW5kOiAiKi8iIH07CiAgICB0aGlzLiRxdW90ZXMgPSB7ICciJzogJyInLCAiJyI6ICInIiwgImAiOiAiYCIgfTsKICAgIHRoaXMuJHBhaXJRdW90ZXNBZnRlciA9IHsKICAgICAgICAiYCI6IC9cdy8KICAgIH07CiAgICB0aGlzLmdldE5leHRMaW5lSW5kZW50ID0gZnVuY3Rpb24gKHN0YXRlLCBsaW5lLCB0YWIpIHsKICAgICAgICB2YXIgaW5kZW50ID0gdGhpcy4kZ2V0SW5kZW50KGxpbmUpOwogICAgICAgIHZhciB0b2tlbml6ZWRMaW5lID0gdGhpcy5nZXRUb2tlbml6ZXIoKS5nZXRMaW5lVG9rZW5zKGxpbmUsIHN0YXRlKTsKICAgICAgICB2YXIgdG9rZW5zID0gdG9rZW5pemVkTGluZS50b2tlbnM7CiAgICAgICAgdmFyIGVuZFN0YXRlID0gdG9rZW5pemVkTGluZS5zdGF0ZTsKICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCAmJiB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdLnR5cGUgPT0gImNvbW1lbnQiKSB7CiAgICAgICAgICAgIHJldHVybiBpbmRlbnQ7CiAgICAgICAgfQogICAgICAgIGlmIChzdGF0ZSA9PSAic3RhcnQiIHx8IHN0YXRlID09ICJub19yZWdleCIpIHsKICAgICAgICAgICAgdmFyIG1hdGNoID0gbGluZS5tYXRjaCgvXi4qKD86XGJjYXNlXGIuKjp8W1x7XChcW10pXHMqJC8pOwogICAgICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgICAgICAgIGluZGVudCArPSB0YWI7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoc3RhdGUgPT0gImRvYy1zdGFydCIpIHsKICAgICAgICAgICAgaWYgKGVuZFN0YXRlID09ICJzdGFydCIgfHwgZW5kU3RhdGUgPT0gIm5vX3JlZ2V4IikgewogICAgICAgICAgICAgICAgcmV0dXJuICIiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBtYXRjaCA9IGxpbmUubWF0Y2goL15ccyooXC8/KVwqLyk7CiAgICAgICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgICAgICAgaWYgKG1hdGNoWzFdKSB7CiAgICAgICAgICAgICAgICAgICAgaW5kZW50ICs9ICIgIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGluZGVudCArPSAiKiAiOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBpbmRlbnQ7CiAgICB9OwogICAgdGhpcy5jaGVja091dGRlbnQgPSBmdW5jdGlvbiAoc3RhdGUsIGxpbmUsIGlucHV0KSB7CiAgICAgICAgcmV0dXJuIHRoaXMuJG91dGRlbnQuY2hlY2tPdXRkZW50KGxpbmUsIGlucHV0KTsKICAgIH07CiAgICB0aGlzLmF1dG9PdXRkZW50ID0gZnVuY3Rpb24gKHN0YXRlLCBkb2MsIHJvdykgewogICAgICAgIHRoaXMuJG91dGRlbnQuYXV0b091dGRlbnQoZG9jLCByb3cpOwogICAgfTsKICAgIHRoaXMuY3JlYXRlV29ya2VyID0gZnVuY3Rpb24gKHNlc3Npb24pIHsKICAgICAgICB2YXIgd29ya2VyID0gbmV3IFdvcmtlckNsaWVudChbImFjZSJdLCAiYWNlL21vZGUvamF2YXNjcmlwdF93b3JrZXIiLCAiSmF2YVNjcmlwdFdvcmtlciIpOwogICAgICAgIHdvcmtlci5hdHRhY2hUb0RvY3VtZW50KHNlc3Npb24uZ2V0RG9jdW1lbnQoKSk7CiAgICAgICAgd29ya2VyLm9uKCJhbm5vdGF0ZSIsIGZ1bmN0aW9uIChyZXN1bHRzKSB7CiAgICAgICAgICAgIHNlc3Npb24uc2V0QW5ub3RhdGlvbnMocmVzdWx0cy5kYXRhKTsKICAgICAgICB9KTsKICAgICAgICB3b3JrZXIub24oInRlcm1pbmF0ZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc2Vzc2lvbi5jbGVhckFubm90YXRpb25zKCk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHdvcmtlcjsKICAgIH07CiAgICB0aGlzLiRpZCA9ICJhY2UvbW9kZS9qYXZhc2NyaXB0IjsKICAgIHRoaXMuc25pcHBldEZpbGVJZCA9ICJhY2Uvc25pcHBldHMvamF2YXNjcmlwdCI7Cn0pLmNhbGwoTW9kZS5wcm90b3R5cGUpOwpleHBvcnRzLk1vZGUgPSBNb2RlOwoKfSk7CgphY2UuZGVmaW5lKCJhY2UvbW9kZS9zdmdfaGlnaGxpZ2h0X3J1bGVzIixbInJlcXVpcmUiLCJleHBvcnRzIiwibW9kdWxlIiwiYWNlL2xpYi9vb3AiLCJhY2UvbW9kZS9qYXZhc2NyaXB0X2hpZ2hsaWdodF9ydWxlcyIsImFjZS9tb2RlL3htbF9oaWdobGlnaHRfcnVsZXMiXSwgZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKXsidXNlIHN0cmljdCI7CnZhciBvb3AgPSByZXF1aXJlKCIuLi9saWIvb29wIik7CnZhciBKYXZhU2NyaXB0SGlnaGxpZ2h0UnVsZXMgPSByZXF1aXJlKCIuL2phdmFzY3JpcHRfaGlnaGxpZ2h0X3J1bGVzIikuSmF2YVNjcmlwdEhpZ2hsaWdodFJ1bGVzOwp2YXIgWG1sSGlnaGxpZ2h0UnVsZXMgPSByZXF1aXJlKCIuL3htbF9oaWdobGlnaHRfcnVsZXMiKS5YbWxIaWdobGlnaHRSdWxlczsKdmFyIFN2Z0hpZ2hsaWdodFJ1bGVzID0gZnVuY3Rpb24gKCkgewogICAgWG1sSGlnaGxpZ2h0UnVsZXMuY2FsbCh0aGlzKTsKICAgIHRoaXMuZW1iZWRUYWdSdWxlcyhKYXZhU2NyaXB0SGlnaGxpZ2h0UnVsZXMsICJqcy0iLCAic2NyaXB0Iik7CiAgICB0aGlzLm5vcm1hbGl6ZVJ1bGVzKCk7Cn07Cm9vcC5pbmhlcml0cyhTdmdIaWdobGlnaHRSdWxlcywgWG1sSGlnaGxpZ2h0UnVsZXMpOwpleHBvcnRzLlN2Z0hpZ2hsaWdodFJ1bGVzID0gU3ZnSGlnaGxpZ2h0UnVsZXM7Cgp9KTsKCmFjZS5kZWZpbmUoImFjZS9tb2RlL2ZvbGRpbmcvbWl4ZWQiLFsicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJhY2UvbGliL29vcCIsImFjZS9tb2RlL2ZvbGRpbmcvZm9sZF9tb2RlIl0sIGZ1bmN0aW9uKHJlcXVpcmUsIGV4cG9ydHMsIG1vZHVsZSl7InVzZSBzdHJpY3QiOwp2YXIgb29wID0gcmVxdWlyZSgiLi4vLi4vbGliL29vcCIpOwp2YXIgQmFzZUZvbGRNb2RlID0gcmVxdWlyZSgiLi9mb2xkX21vZGUiKS5Gb2xkTW9kZTsKdmFyIEZvbGRNb2RlID0gZXhwb3J0cy5Gb2xkTW9kZSA9IGZ1bmN0aW9uIChkZWZhdWx0TW9kZSwgc3ViTW9kZXMpIHsKICAgIHRoaXMuZGVmYXVsdE1vZGUgPSBkZWZhdWx0TW9kZTsKICAgIHRoaXMuc3ViTW9kZXMgPSBzdWJNb2RlczsKfTsKb29wLmluaGVyaXRzKEZvbGRNb2RlLCBCYXNlRm9sZE1vZGUpOwooZnVuY3Rpb24gKCkgewogICAgdGhpcy4kZ2V0TW9kZSA9IGZ1bmN0aW9uIChzdGF0ZSkgewogICAgICAgIGlmICh0eXBlb2Ygc3RhdGUgIT0gInN0cmluZyIpCiAgICAgICAgICAgIHN0YXRlID0gc3RhdGVbMF07CiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuc3ViTW9kZXMpIHsKICAgICAgICAgICAgaWYgKHN0YXRlLmluZGV4T2Yoa2V5KSA9PT0gMCkKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN1Yk1vZGVzW2tleV07CiAgICAgICAgfQogICAgICAgIHJldHVybiBudWxsOwogICAgfTsKICAgIHRoaXMuJHRyeU1vZGUgPSBmdW5jdGlvbiAoc3RhdGUsIHNlc3Npb24sIGZvbGRTdHlsZSwgcm93KSB7CiAgICAgICAgdmFyIG1vZGUgPSB0aGlzLiRnZXRNb2RlKHN0YXRlKTsKICAgICAgICByZXR1cm4gKG1vZGUgPyBtb2RlLmdldEZvbGRXaWRnZXQoc2Vzc2lvbiwgZm9sZFN0eWxlLCByb3cpIDogIiIpOwogICAgfTsKICAgIHRoaXMuZ2V0Rm9sZFdpZGdldCA9IGZ1bmN0aW9uIChzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdykgewogICAgICAgIHJldHVybiAodGhpcy4kdHJ5TW9kZShzZXNzaW9uLmdldFN0YXRlKHJvdyAtIDEpLCBzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdykgfHwKICAgICAgICAgICAgdGhpcy4kdHJ5TW9kZShzZXNzaW9uLmdldFN0YXRlKHJvdyksIHNlc3Npb24sIGZvbGRTdHlsZSwgcm93KSB8fAogICAgICAgICAgICB0aGlzLmRlZmF1bHRNb2RlLmdldEZvbGRXaWRnZXQoc2Vzc2lvbiwgZm9sZFN0eWxlLCByb3cpKTsKICAgIH07CiAgICB0aGlzLmdldEZvbGRXaWRnZXRSYW5nZSA9IGZ1bmN0aW9uIChzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdykgewogICAgICAgIHZhciBtb2RlID0gdGhpcy4kZ2V0TW9kZShzZXNzaW9uLmdldFN0YXRlKHJvdyAtIDEpKTsKICAgICAgICBpZiAoIW1vZGUgfHwgIW1vZGUuZ2V0Rm9sZFdpZGdldChzZXNzaW9uLCBmb2xkU3R5bGUsIHJvdykpCiAgICAgICAgICAgIG1vZGUgPSB0aGlzLiRnZXRNb2RlKHNlc3Npb24uZ2V0U3RhdGUocm93KSk7CiAgICAgICAgaWYgKCFtb2RlIHx8ICFtb2RlLmdldEZvbGRXaWRnZXQoc2Vzc2lvbiwgZm9sZFN0eWxlLCByb3cpKQogICAgICAgICAgICBtb2RlID0gdGhpcy5kZWZhdWx0TW9kZTsKICAgICAgICByZXR1cm4gbW9kZS5nZXRGb2xkV2lkZ2V0UmFuZ2Uoc2Vzc2lvbiwgZm9sZFN0eWxlLCByb3cpOwogICAgfTsKfSkuY2FsbChGb2xkTW9kZS5wcm90b3R5cGUpOwoKfSk7CgphY2UuZGVmaW5lKCJhY2UvbW9kZS9zdmciLFsicmVxdWlyZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJhY2UvbGliL29vcCIsImFjZS9tb2RlL3htbCIsImFjZS9tb2RlL2phdmFzY3JpcHQiLCJhY2UvbW9kZS9zdmdfaGlnaGxpZ2h0X3J1bGVzIiwiYWNlL21vZGUvZm9sZGluZy9taXhlZCIsImFjZS9tb2RlL2ZvbGRpbmcveG1sIiwiYWNlL21vZGUvZm9sZGluZy9jc3R5bGUiXSwgZnVuY3Rpb24ocmVxdWlyZSwgZXhwb3J0cywgbW9kdWxlKXsidXNlIHN0cmljdCI7CnZhciBvb3AgPSByZXF1aXJlKCIuLi9saWIvb29wIik7CnZhciBYbWxNb2RlID0gcmVxdWlyZSgiLi94bWwiKS5Nb2RlOwp2YXIgSmF2YVNjcmlwdE1vZGUgPSByZXF1aXJlKCIuL2phdmFzY3JpcHQiKS5Nb2RlOwp2YXIgU3ZnSGlnaGxpZ2h0UnVsZXMgPSByZXF1aXJlKCIuL3N2Z19oaWdobGlnaHRfcnVsZXMiKS5TdmdIaWdobGlnaHRSdWxlczsKdmFyIE1peGVkRm9sZE1vZGUgPSByZXF1aXJlKCIuL2ZvbGRpbmcvbWl4ZWQiKS5Gb2xkTW9kZTsKdmFyIFhtbEZvbGRNb2RlID0gcmVxdWlyZSgiLi9mb2xkaW5nL3htbCIpLkZvbGRNb2RlOwp2YXIgQ1N0eWxlRm9sZE1vZGUgPSByZXF1aXJlKCIuL2ZvbGRpbmcvY3N0eWxlIikuRm9sZE1vZGU7CnZhciBNb2RlID0gZnVuY3Rpb24gKCkgewogICAgWG1sTW9kZS5jYWxsKHRoaXMpOwogICAgdGhpcy5IaWdobGlnaHRSdWxlcyA9IFN2Z0hpZ2hsaWdodFJ1bGVzOwogICAgdGhpcy5jcmVhdGVNb2RlRGVsZWdhdGVzKHsKICAgICAgICAianMtIjogSmF2YVNjcmlwdE1vZGUKICAgIH0pOwogICAgdGhpcy5mb2xkaW5nUnVsZXMgPSBuZXcgTWl4ZWRGb2xkTW9kZShuZXcgWG1sRm9sZE1vZGUoKSwgewogICAgICAgICJqcy0iOiBuZXcgQ1N0eWxlRm9sZE1vZGUoKQogICAgfSk7Cn07Cm9vcC5pbmhlcml0cyhNb2RlLCBYbWxNb2RlKTsKKGZ1bmN0aW9uICgpIHsKICAgIHRoaXMuZ2V0TmV4dExpbmVJbmRlbnQgPSBmdW5jdGlvbiAoc3RhdGUsIGxpbmUsIHRhYikgewogICAgICAgIHJldHVybiB0aGlzLiRnZXRJbmRlbnQobGluZSk7CiAgICB9OwogICAgdGhpcy4kaWQgPSAiYWNlL21vZGUvc3ZnIjsKfSkuY2FsbChNb2RlLnByb3RvdHlwZSk7CmV4cG9ydHMuTW9kZSA9IE1vZGU7Cgp9KTsgICAgICAgICAgICAgICAgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgIGFjZS5yZXF1aXJlKFsiYWNlL21vZGUvc3ZnIl0sIGZ1bmN0aW9uKG0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtb2R1bGUgPT0gIm9iamVjdCIgJiYgdHlwZW9mIGV4cG9ydHMgPT0gIm9iamVjdCIgJiYgbW9kdWxlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IG07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgIA==";