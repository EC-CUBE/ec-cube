<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) LOCKON CO.,LTD. All Rights Reserved.
 *
 * http://www.lockon.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eccube\Repository;

use Eccube\Common\EccubeConfig;
use Eccube\Entity\Master\DeviceType;
use Eccube\Entity\Page;
use Symfony\Bridge\Doctrine\RegistryInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends AbstractRepository
{
    /**
     * @var EccubeConfig
     */
    protected $eccubeConfig;

    /**
     * @var string
     * @path %eccube_theme_user_data_dir% (app/template/user_data)
     */
    protected $userDataRealDir;

    /**
     * @var string
     * @path %eccube_theme_app_dir% (app/template)
     */
    protected $templateRealDir;

    /**
     * @var string
     * @path %eccube_theme_src_dir% (src/Eccube/Resource/template)
     */
    protected $templateDefaultRealDir;

    /**
     * PageRepository constructor.
     *
     * @param RegistryInterface $registry
     * @param EccubeConfig $eccubeConfig
     * @param ContainerInterface $container
     */
    public function __construct(RegistryInterface $registry, EccubeConfig $eccubeConfig, ContainerInterface $container)
    {
        parent::__construct($registry, Page::class);
        $this->eccubeConfig = $eccubeConfig;
        $this->userDataRealDir = $container->getParameter('eccube_theme_user_data_dir');
        $this->templateRealDir = $container->getParameter('eccube_theme_app_dir');
        $this->templateDefaultRealDir = $container->getParameter('eccube_theme_src_dir');
    }

    /**
     * @param DeviceType $DeviceType
     * @param int $pageId
     *
     * @return array
     */
    public function findUnusedBlocks(DeviceType $DeviceType, $pageId)
    {
        $em = $this->getEntityManager();
        $blockRepo = $em->getRepository('Eccube\Entity\Block');
        $ownBlockPositions = $this->getByDeviceTypeAndId($DeviceType, $pageId)->getBlockPositions();
        $ids = [];
        foreach ($ownBlockPositions as $ownBlockPosition) {
            $ids[] = $ownBlockPosition->getBlock()->getId();
        }

        // $idsが空配列だと、$ids以外のblockを取得するSQLが生成されないため、存在しないidを入れる
        if (empty($ids)) {
            $ids[] = \Eccube\Entity\Block::UNUSED_BLOCK_ID;
        }

        return $blockRepo->createQueryBuilder('b')
            ->where('b.id not in (:ids)')
            ->setParameter(':ids', $ids)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param DeviceType $DeviceType
     * @param int $pageId
     *
     * @return mixed
     */
    public function getByDeviceTypeAndId(DeviceType $DeviceType, $pageId)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p, bp, b')
            ->leftJoin('p.BlockPositions', 'bp', 'WITH', 'p.id = bp.page_id')
            ->leftJoin('bp.Block', 'b')
            ->andWhere('p.DeviceType = :DeviceType AND p.id = :pageId')
            ->addOrderBy('bp.section', 'ASC')
            ->addOrderBy('bp.block_row', 'ASC');

        $ownResult = $qb
            ->getQuery()
            ->setParameters([
                'DeviceType' => $DeviceType,
                'pageId' => $pageId,
            ])
            ->getSingleResult();

        $qb = $this->createQueryBuilder('p')
            ->select('p, bp, b')
            ->leftJoin('p.BlockPositions', 'bp', 'WITH', 'p.id = bp.page_id')
            ->leftJoin('bp.Block', 'b')
            ->andWhere('p.DeviceType = :DeviceType AND bp.anywhere = 1')
            ->addOrderBy('bp.section', 'ASC')
            ->addOrderBy('bp.block_row', 'ASC');

        $anyResults = $qb
            ->getQuery()
            ->setParameters([
                'DeviceType' => $DeviceType,
            ])
            ->getResult();

        $OwnBlockPosition = $ownResult->getBlockPositions();
        foreach ($anyResults as $anyResult) {
            $BlockPositions = $anyResult->getBlockPositions();
            foreach ($BlockPositions as $BlockPosition) {
                if (!$OwnBlockPosition->contains($BlockPosition)) {
                    $ownResult->addBlockPosition($BlockPosition);
                }
            }
        }

        return $ownResult;
    }

    /**
     * @param DeviceType $DeviceType
     * @param string $url
     *
     * @return mixed
     */
    public function getByUrl(DeviceType $DeviceType, $url)
    {
        // Fixme
//        $options = $this->eccubeConfig['doctrine_cache'];
//        $lifetime = $options['result_cache']['lifetime'];
        $lifetime = $this->getCacheLifetime();

        $qb = $this->createQueryBuilder('p')
            ->select('p, bp, b')
            ->leftJoin('p.BlockPositions', 'bp', 'WITH', 'p.id = bp.page_id')
            ->leftJoin('bp.Block', 'b')
            ->andWhere('p.DeviceType = :DeviceType AND p.url = :url')
            ->addOrderBy('bp.section', 'ASC')
            ->addOrderBy('bp.block_row', 'ASC');

        $ownResult = $qb
            ->getQuery()
            ->useResultCache(true, $lifetime)
            ->setParameters([
                'DeviceType' => $DeviceType,
                'url' => $url,
            ])
            ->getSingleResult();

        if ($ownResult->getMasterPage()) {
            $ownResult = $ownResult->getMasterPage();
        }

        $qb = $this->createQueryBuilder('p')
            ->select('p, bp, b')
            ->leftJoin('p.BlockPositions', 'bp', 'WITH', 'p.id = bp.page_id')
            ->leftJoin('bp.Block', 'b')
            ->andWhere('p.DeviceType = :DeviceType AND bp.anywhere = 1')
            ->addOrderBy('bp.section', 'ASC')
            ->addOrderBy('bp.block_row', 'ASC');

        $anyResults = $qb
            ->getQuery()
            ->useResultCache(true, $lifetime)
            ->setParameters([
                'DeviceType' => $DeviceType,
            ])
            ->getResult();

        $OwnBlockPosition = $ownResult->getBlockPositions();
        $OwnBlockPositionIds = [];
        foreach ($OwnBlockPosition as $BlockPosition) {
            $OwnBlockPositionIds[] = $BlockPosition->getBlockId();
        }

        foreach ($anyResults as $anyResult) {
            $BlockPositions = $anyResult->getBlockPositions();
            foreach ($BlockPositions as $BlockPosition) {
                if (!in_array($BlockPosition->getBlockId(), $OwnBlockPositionIds)) {
                    $ownResult->addBlockPosition($BlockPosition);
                    $OwnBlockPositionIds[] = $BlockPosition->getBlockId();
                }
            }
        }

        return $ownResult;
    }

    /**
     * @param DeviceType $DeviceType
     *
     * @return Page
     */
    public function newPage(DeviceType $DeviceType)
    {
        $Page = new \Eccube\Entity\Page();
        $Page
            ->setDeviceType($DeviceType)
            ->setEditType(Page::EDIT_TYPE_USER);

        return $Page;
    }

    /**
     * @param int $page_id
     * @param DeviceType $DeviceType
     *
     * @return Page|mixed
     */
    public function findOrCreate($page_id, DeviceType $DeviceType)
    {
        if (is_null($page_id)) {
            $Page = $this
                ->newPage($DeviceType);

            return $Page;
        } else {
            return $this->getByDeviceTypeAndId($DeviceType, $page_id);
        }
    }

    /**
     * ページの属性を取得する.
     *
     * この関数は, dtb_Page の情報を検索する.
     * $deviceTypeId は必須. デフォルト値は DEVICE_TYPE_PC.
     *
     * @param  \Eccube\Entity\Master\DeviceType  $DeviceType 端末種別ID
     * @param  string                            $where 追加の検索条件
     * @param  string[]                          $parameters 追加の検索パラメーター
     *
     * @return array                             ページ属性の配列
     */
    public function getPageList(DeviceType $DeviceType, $where = null, $parameters = [])
    {
        $qb = $this->createQueryBuilder('l')
            ->orderBy('l.id', 'DESC')
            ->where('l.DeviceType = :DeviceType')
            ->setParameter('DeviceType', $DeviceType)
            ->andWhere('l.id <> 0')
            ->andWhere('l.MasterPage is null')
            ->orderBy('l.id', 'ASC');
        if (!is_null($where)) {
            $qb->andWhere($where);
            foreach ($parameters as $key => $val) {
                $qb->setParameter($key, $val);
            }
        }

        $Pages = $qb
            ->getQuery()
            ->getResult();

        return $Pages;
    }
}
