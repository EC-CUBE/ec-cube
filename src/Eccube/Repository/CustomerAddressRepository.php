<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) LOCKON CO.,LTD. All Rights Reserved.
 *
 * http://www.lockon.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eccube\Repository;

use Eccube\Entity\CustomerAddress;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * CustomerAddressRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerAddressRepository extends AbstractRepository
{
    /**
     * CustomerAddressRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, CustomerAddress::class);
    }

    /**
     * @deprecated 呼び出し元で制御する
     *
     * @param \Eccube\Entity\Customer $Customer
     * @param null $id
     *
     * @return \Eccube\Entity\CustomerAddress|mixed
     *
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOrCreateByCustomerAndId(\Eccube\Entity\Customer $Customer, $id = null)
    {
        if (!$id) {
            $CustomerAddress = new \Eccube\Entity\CustomerAddress();
            $CustomerAddress->setCustomer($Customer);
        } else {
            $qb = $this->createQueryBuilder('od')
                ->andWhere('od.Customer = :Customer AND od.id = :id')
                ->setParameters([
                    'Customer' => $Customer,
                    'id' => $id,
                ]);

            $CustomerAddress = $qb
                ->getQuery()
                ->getSingleResult();
        }

        return $CustomerAddress;
    }

    /**
     * お届け先を削除します.
     *
     * @param \Eccube\Entity\CustomerAddress $CustomerAddress
     */
    public function delete($CustomerAddress)
    {
        $em = $this->getEntityManager();
        $em->remove($CustomerAddress);
        $em->flush($CustomerAddress);
    }
}
