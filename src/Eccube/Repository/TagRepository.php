<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eccube\Repository;

use Eccube\Entity\ProductTag;
use Eccube\Entity\Tag;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * TagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TagRepository extends AbstractRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Tag::class);
    }

    /**
     * タグを保存する.
     *
     * @param  Tag $Tag タグ
     */
    public function save($Tag)
    {
        if (null === $Tag->getId()) {
            $LastTagById = $this->findOneBy([], ['id' => 'DESC']);
            $Tag->setId($LastTagById ? $LastTagById->getId() + 1 : 1);

            $LastTagBySortNo = $this->findOneBy([], ['sort_no' => 'DESC']);
            $Tag->setSortNo($LastTagBySortNo ? $LastTagBySortNo->getSortNo() + 1 : 1);
        }

        $em = $this->getEntityManager();
        $em->persist($Tag);
        $em->flush();
    }

    /**
     * タグを更新する.
     *
     * @param $Tag
     * @param $fromId 更新前のタグID
     * @param $toId 更新後のタグID
     * @throws \Doctrine\ORM\ORMException
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function update($Tag, $fromId, $toId)
    {
        $em = $this->getEntityManager();
        $Products = [];

        if ($fromId !== $toId) {
            $ProductTags = $Tag->getProductTag();
            foreach ($ProductTags as $ProductTag) {
                $Products[] = $ProductTag->getProduct();
                $em->remove($ProductTag);
            }
            $em->flush();
        }

        $Tag->setId($toId);
        $em->persist($Tag);
        $em->flush();

        $Tag = $this->find($toId);

        foreach ($Products as $Product) {
            $ProductTag = new ProductTag();
            $ProductTag->setProduct($Product);
            $ProductTag->setTag($Tag);
            $em->persist($ProductTag);
        }

        $em->flush();
    }

    /**
     * タグ一覧を取得する.
     *
     * @return Tag[] タグの配列
     */
    public function getList()
    {
        $qb = $this->createQueryBuilder('t')->orderBy('t.sort_no', 'DESC');

        return $qb->getQuery()->getResult();
    }

    /**
     * タグを削除する.
     *
     * @param  Tag $Tag 削除対象のタグ
     */
    public function delete($Tag)
    {
        $em = $this->getEntityManager();
        $em->beginTransaction();

        $em->createQuery("DELETE \Eccube\Entity\ProductTag pt WHERE pt.Tag = :tag")->execute(['tag' => $Tag]);

        $this
            ->createQueryBuilder('t')
            ->update()
            ->set('t.sort_no', 't.sort_no - 1')
            ->where('t.sort_no > :sort_no')
            ->setParameter('sort_no', $Tag->getSortNo())
            ->getQuery()
            ->execute();

        $em->remove($Tag);
        $em->flush($Tag);

        $em->commit();
    }
}
