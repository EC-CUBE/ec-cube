<?php
/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) 2000-2015 LOCKON CO.,LTD. All Rights Reserved.
 *
 * http://www.lockon.co.jp/
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


namespace Eccube\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Filesystem\Filesystem;

/**
 * BlocRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlockRepository extends EntityRepository
{
    protected $app;

    public function setApplication($app)
    {
        $this->app = $app;
    }

    /**
     * @deprecated since 3.0.0
     */
    public function findOrCreate(array $conditions)
    {
        $findObj = null;
        //Find
        $findObj = $this->getBlock($conditions);

        if ($findObj == null) {
            //Create
            $findObj = $this->newBlock($conditions);
        }

        if ($findObj == null) {
            throw new \LogicException();
        }

        return $findObj;
    }

    public function newBlock(array $conditions)
    {
        if (isset($conditions['DeviceType']) && !is_null($conditions['DeviceType'])) {
            $Block = new \Eccube\Entity\Block();
            $Block
                ->setDeviceType($conditions['DeviceType'])
                ->setLogicFlg(0)
                ->setDeletableFlg(1);

            return $Block;
        }
        throw new \LogicException();
    }

    /**
     * @deprecated since 3.0.0, to be removed in 3.1
     */
    private function getNewBlockId($DeviceType)
    {

        $qb = $this->createQueryBuilder('b')
            ->select('max(b.id) +1 as block_id')
            ->where('b.DeviceType = :DeviceType')
            ->setParameter('DeviceType', $DeviceType);
        $result = $qb->getQuery()->getSingleResult();

        return $result['block_id'];

    }

    /**
     * ブロックの情報を取得.
     *
     * @param  array $conditions 検索条件
     * @return array
     */
    public function getBlock(array $conditions)
    {
        $Block = $this->findOneBy($conditions);

        return $Block;
    }

    /**
     * ブロック一覧の取得.
     *
     * @param  \Eccube\Entity\Master\DeviceType $DeviceType
     * @return array
     */
    public function getList($DeviceType)
    {
        $qb = $this->createQueryBuilder('b')
            ->orderBy('b.id', 'DESC')
            ->where('b.DeviceType = :DeviceType')
            ->setParameter('DeviceType', $DeviceType);

        $Blocks = $qb
            ->getQuery()
            ->getResult();

        return $Blocks;
    }

    /**
     * ページの属性を取得する.
     *
     * この関数は, dtb_pagelayout の情報を検索する.
     * $deviceTypeId は必須. デフォルト値は DEVICE_TYPE_PC.
     *
     * @access public
     * @param  DeviceType $DeviceType 端末種別ID
     * @param  string $where 追加の検索条件
     * @param  string[] $parameters 追加の検索パラメーター
     * @return array                             ページ属性の配列
     * @deprecated since 3.0.0, to be removed in 3.1
     */
    public function getPageList(DeviceType $DeviceType, $where = null, $parameters = array())
    {
        $qb = $this->createQueryBuilder('l')
            ->orderBy('l.id', 'DESC')
            ->where('l.DeviceType = :DeviceType')
            ->setParameter('DeviceType', $DeviceType)
            ->andWhere('l.id <> 0')
            ->orderBy('l.id', 'ASC');
        if (!is_null($where)) {
            $qb->andWhere($where);
            foreach ($parameters as $key => $val) {
                $qb->setParameter($key, $val);
            }
        }

        $PageLayouts = $qb
            ->getQuery()
            ->getResult();

        return $PageLayouts;
    }

    /**
     * 書き込みパスの取得
     * User定義の場合： /html/user_data
     * そうでない場合： /app/template/{template_code}
     *
     * @param  boolean $isUser
     * @return string
     *
     * @deprecated since 3.0.0, to be removed in 3.1
     */
    public function getWriteTemplatePath($isUser = false)
    {
        return $this->app['config']['block_realdir'];
        ddd($this->app['config']['block_realdir'], true);
    }

    /**
     * 読み込みファイルの取得
     *
     * 1. block_realdir
     *      app/template/{template_code}/block
     * 2. block_default_readldir
     *      src/Eccube/Resource/template/default/block
     *
     * @param string $fileName
     *
     * @return string filedata
     */
    public function getReadTemplateFile($fileName)
    {
        $readPaths = array(
            $this->app['config']['block_realdir'],
            $this->app['config']['block_default_realdir'],
        );

        foreach ($readPaths as $readPath) {
            $filePath = $readPath . '/' . $fileName . '.twig';
            $fs = new Filesystem();
            if ($fs->exists($filePath)) {
                return file_get_contents($filePath);
            }
        }
    }
}
