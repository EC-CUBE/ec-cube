<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) LOCKON CO.,LTD. All Rights Reserved.
 *
 * http://www.lockon.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Eccube\Repository;

use Eccube\Entity\PluginEventHandler;
use Eccube\Exception\PluginException;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * PluginEventHandlerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PluginEventHandlerRepository extends AbstractRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, PluginEventHandler::class);
    }

    public function getHandlers()
    {
        $qb = $this->createQueryBuilder('e')
            ->innerJoin('e.Plugin', 'p')
            ->Orderby('e.event', 'ASC')
            ->addOrderby('e.priority', 'DESC');

        return $qb->getQuery()->getResult();
    }

    public function getPriorityRange($type)
    {
        if (PluginEventHandler::EVENT_HANDLER_TYPE_FIRST == $type) {
            $range_start = PluginEventHandler::EVENT_PRIORITY_FIRST_START;
            $range_end = PluginEventHandler::EVENT_PRIORITY_FIRST_END;
        } elseif (PluginEventHandler::EVENT_HANDLER_TYPE_LAST == $type) {
            $range_start = PluginEventHandler::EVENT_PRIORITY_LAST_START;
            $range_end = PluginEventHandler::EVENT_PRIORITY_LAST_END;
        } else {
            $range_start = PluginEventHandler::EVENT_PRIORITY_NORMAL_START;
            $range_end = PluginEventHandler::EVENT_PRIORITY_NORMAL_END;
        }

        return [$range_start, $range_end];
    }

    public function calcNewPriority($event, $type)
    {
        list($range_start, $range_end) = $this->getPriorityRange($type);

        $qb = $this->createQueryBuilder('e');
        $qb->andWhere("e.priority >= $range_end ")
           ->andWhere("e.priority <= $range_start ")
           ->andWhere('e.event = :event')
           ->setParameter('event', $event)
           ->setMaxResults(1)
           ->orderBy('e.priority', 'ASC');

        $result = $qb->getQuery()->getResult();
        if (count($result)) {
            return $result[0]->getPriority() - 1;
        } else {
            return $range_start;
        }
    }

    public function upPriority($pluginEventHandler, $up = true)
    {
        list($range_start, $range_end) = $this->getPriorityRange($pluginEventHandler->getHandlerType());

        $qb = $this->createQueryBuilder('e');

        $qb->andWhere("e.priority >= $range_end ")
           ->andWhere("e.priority <= $range_start ")
           ->andWhere('e.priority '.($up ? '>' : '<').' :pri')
           ->andWhere('e.event = :event')
           ->setParameter('event', $pluginEventHandler->getEvent())
           ->setParameter('pri', $pluginEventHandler->getPriority())
           ->setMaxResults(1)
           ->orderBy('e.priority', ($up ? 'ASC' : 'DESC'));

        $result = $qb->getQuery()->getResult();

        if (count($result)) {
            $em = $this->getEntityManager();
            $em->getConnection()->beginTransaction();
            // 2個のentityのprioriryを入れ替える
            $tmp = $pluginEventHandler->getPriority();
            $pluginEventHandler->setPriority($result[0]->getPriority());
            $result[0]->setPriority($tmp);
            $em->persist($result[0]);
            $em->persist($pluginEventHandler);
            $em->flush();
            $em->getConnection()->commit();
        // 移動する
        } else {
            // 移動しない
            throw new PluginException("Can't swap");
        }
    }
}
