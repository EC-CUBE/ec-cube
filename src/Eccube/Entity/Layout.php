<?php

namespace Eccube\Entity;

use Doctrine\ORM\Mapping as ORM;

/**
 * Layout
 *
 * @ORM\Table(name="dtb_layout")
 * @ORM\InheritanceType("SINGLE_TABLE")
 * @ORM\DiscriminatorColumn(name="discriminator_type", type="string", length=255)
 * @ORM\HasLifecycleCallbacks()
 * @ORM\Entity(repositoryClass="Eccube\Repository\LayoutRepository")
 */
class Layout extends AbstractEntity
{
    /**
     * @return string
     */
    public function __toString()
    {
        return (string) $this->name;
    }

    /**
     * @return Page[]
     */
    public function getPages()
    {
        $Pages = [];
        foreach ($this->PageLayouts as $PageLayout)
        {
            $Pages[] = $PageLayout->getPage();
        }

        return $Pages;
    }

    /**
     * @param integer|null $targetId
     * @return Block[]
     */
    public function getBlocks($targetId = null)
    {
        $Blocks = [];
        foreach ($this->BlockPositions as $BlockPosition) {
            if (is_null($targetId)) {
                $Blocks[] = $BlockPosition->getBlock();
                continue;
            }

            if ($BlockPosition->getSection() == $targetId) {
                $Blocks[] = $BlockPosition->getBlock();
            }
        }

        return $Blocks;
    }

    /**
     * @param integer $targetId
     * @return BlockPosition[]
     */
    public function getBlockPositionsBy($targetId)
    {
        return $this->BlockPositions->filter(
            function ($BlockPosition) use ($targetId) {
                return $BlockPosition->getSection() == $targetId;
            }
        );
    }

    // -----------------------
    // generated by doctrine
    // -----------------------

    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer", options={"unsigned":true})
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="layout_name", type="string", length=255, nullable=true)
     */
    private $name;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="create_date", type="datetimetz")
     */
    private $create_date;

    /**
     * @var \DateTime
     *
     * @ORM\Column(name="update_date", type="datetimetz")
     */
    private $update_date;

    /**
     * @var \Doctrine\Common\Collections\Collection
     *
     * @ORM\OneToMany(targetEntity="Eccube\Entity\BlockPosition", mappedBy="Layout", cascade={"persist","remove"})
     */
    private $BlockPositions;

    /**
     * @var \Doctrine\Common\Collections\Collection
     *
     * @ORM\OneToMany(targetEntity="Eccube\Entity\PageLayout", mappedBy="Layout", cascade={"persist","remove"})
     */
    private $PageLayouts;

    /**
     * @var \Eccube\Entity\Master\DeviceType
     *
     * @ORM\ManyToOne(targetEntity="Eccube\Entity\Master\DeviceType")
     * @ORM\JoinColumns({
     *   @ORM\JoinColumn(name="device_type_id", referencedColumnName="id")
     * })
     */
    private $DeviceType;

    /**
     * Constructor
     */
    public function __construct()
    {
        $this->BlockPositions = new \Doctrine\Common\Collections\ArrayCollection();
        $this->PageLayouts = new \Doctrine\Common\Collections\ArrayCollection();
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set name
     *
     * @param string $name
     *
     * @return Layout
     */
    public function setName($name)
    {
        $this->name = $name;

        return $this;
    }

    /**
     * Get name
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Set createDate
     *
     * @param \DateTime $createDate
     *
     * @return Layout
     */
    public function setCreateDate($createDate)
    {
        $this->create_date = $createDate;

        return $this;
    }

    /**
     * Get createDate
     *
     * @return \DateTime
     */
    public function getCreateDate()
    {
        return $this->create_date;
    }

    /**
     * Set updateDate
     *
     * @param \DateTime $updateDate
     *
     * @return Layout
     */
    public function setUpdateDate($updateDate)
    {
        $this->update_date = $updateDate;

        return $this;
    }

    /**
     * Get updateDate
     *
     * @return \DateTime
     */
    public function getUpdateDate()
    {
        return $this->update_date;
    }

    /**
     * Add blockPosition
     *
     * @param \Eccube\Entity\BlockPosition $blockPosition
     *
     * @return Layout
     */
    public function addBlockPosition(\Eccube\Entity\BlockPosition $blockPosition)
    {
        $this->BlockPositions[] = $blockPosition;

        return $this;
    }

    /**
     * Remove blockPosition
     *
     * @param \Eccube\Entity\BlockPosition $blockPosition
     */
    public function removeBlockPosition(\Eccube\Entity\BlockPosition $blockPosition)
    {
        $this->BlockPositions->removeElement($blockPosition);
    }

    /**
     * Get blockPositions
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getBlockPositions()
    {
        return $this->BlockPositions;
    }

    /**
     * Add pageLayoutLayout
     *
     * @param \Eccube\Entity\PageLayout $PageLayout
     *
     * @return Layout
     */
    public function addPageLayout(\Eccube\Entity\PageLayout $PageLayout)
    {
        $this->PageLayouts[] = $PageLayout;

        return $this;
    }

    /**
     * Remove pageLayoutLayout
     *
     * @param \Eccube\Entity\PageLayout $PageLayout
     */
    public function removePageLayout(\Eccube\Entity\PageLayout $PageLayout)
    {
        $this->PageLayouts->removeElement($PageLayout);
    }

    /**
     * Get pageLayoutLayouts
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getPageLayouts()
    {
        return $this->PageLayouts;
    }

    /**
     * Set deviceType
     *
     * @param \Eccube\Entity\Master\DeviceType $deviceType
     *
     * @return Layout
     */
    public function setDeviceType(\Eccube\Entity\Master\DeviceType $deviceType = null)
    {
        $this->DeviceType = $deviceType;

        return $this;
    }

    /**
     * Get deviceType
     *
     * @return \Eccube\Entity\Master\DeviceType
     */
    public function getDeviceType()
    {
        return $this->DeviceType;
    }
}
