name: Plugin E2E Test for EC-Cube
on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
  push:
jobs:
  e2e_plugin_codeception:
    name: Codeception
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        php: [ 7.4, 8.0, 8.1 ]
        db: [ pgsql10, pgsql14, mysql5, mysql8 ]
        file: [ PL11ProductImagesUploaderCest ] # , PL01RecommendCest - PASS, PL02CouponCest - PASS, PL03MailMagazineCest - PASS, PL05RelatedProductCest - PASS, PL06SecurityCheckCest - WAIT , PL07ProductReviewCest - PASS, PL08ApiCest, PL11ProductImagesUploaderCest, PL12MakerCest - Pass
        include:
          - db: pgsql10
            database_url: postgres://postgres:password@127.0.0.1:5432/eccube_db
            database_server_version: 10
            database_charset: utf8
          - db: pgsql14
            database_url: postgres://postgres:password@127.0.0.1:5433/eccube_db
            database_server_version: 14
            database_charset: utf8
          - db: mysql5
            database_url: mysql://root:password@127.0.0.1:3306/eccube_db
            database_server_version: 5.7
            database_charset: utf8mb4
          - db: mysql8
            database_url: mysql://root:password@127.0.0.1:3308/eccube_db
            database_server_version: 8
            database_charset: utf8mb4

    services:
      postgres10:
        image: postgres:10
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      postgres14:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5433:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      mysql8:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: password
        ports:
          - 3308:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      mailcatcher:
        image: schickling/mailcatcher
        ports:
          - 1080:1080
          - 1025:1025

    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Set System Locale to Japanese
        run: |
          sudo locale-gen ja_JP.UTF-8
          sudo update-locale LANG=ja_JP.UTF-8
          export LANGUAGE=ja_JP
      - name: Install Japanese language pack
        run: |
          sudo apt-get install language-pack-ja
          sudo apt-get install japan*
          sudo apt-get install fonts-arphic-ukai fonts-arphic-uming fonts-ipafont-mincho fonts-ipafont-gothic fonts-unfonts-core
      - name: Get base fonts
        run: |
          sudo apt-get install ttf-mscorefonts-installer
          sudo fc-cache -fv
      - name: Download all non native ECCUBE plugins
        run: |
          wget -O ./codeception/_data/maker.tar.gz $(curl -s https://api.github.com/repos/EC-CUBE/maker-plugin/releases/latest | grep browser_download_url | cut -d '"' -f 4)
          wget -O ./codeception/_data/product_images.tar.gz $(curl -s https://api.github.com/repos/EC-CUBE/ProductImagesUploader/releases/latest | grep browser_download_url | cut -d '"' -f 4)
          wget -O ./codeception/_data/data_migrate.tar.gz $(curl -s https://api.github.com/repos/EC-CUBE/data-migration-plugin/releases/latest | grep browser_download_url | cut -d '"' -f 4)
      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "::set-output name=dir::$(composer config cache-files-dir)"
      - uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Setup PHP
        uses: nanasess/setup-php@master
        with:
          php-version: ${{ matrix.php }}

      - name: composer install
        run: composer install --dev --no-interaction -o --apcu-autoloader
      - name: Setup to EC-CUBE
        env:
          APP_ENV: 'codeception'
          DATABASE_URL: ${{ matrix.database_url }}
          DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
          DATABASE_CHARSET: ${{ matrix.database_charset }}
        run: |
          echo "APP_ENV=${APP_ENV}" > .env
          echo "TRUSTED_HOSTS=127.0.0.1,localhost" >> .env
          bin/console doctrine:database:create --env=dev
          bin/console doctrine:schema:create --env=dev
          bin/console eccube:fixtures:load --env=dev

      - name: setup-chromedriver
        uses: nanasess/setup-chromedriver@master
      - name: Run Google Chrome in Japanese Language
        run: |
          sed '2 i export LANGUAGE=ja_JP' /opt/google/chrome/google-chrome
      - name: Run chromedriver
        run: |
          export DISPLAY=:99
          chromedriver --url-base=/wd/hub &
          echo ">>> Started chrome-driver"
          sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
          echo ">>> Started xvfb"

      - name: Run package-api
        run: |
          if [[ ! -d ${PWD}/repos ]]; then mkdir -p ${PWD}/repos ; fi
          docker run -d --rm -v ${PWD}/repos:/repos -e MOCK_REPO_DIR=/repos -p 8080:8080 eccube/mock-package-api:composer2
          cp codeception/_data/plugins/*-1.0.0.tgz repos

      - name: Start PHP Development Server
        env:
          APP_ENV: 'codeception'
          DATABASE_URL: ${{ matrix.database_url }}
          DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
          DATABASE_CHARSET: ${{ matrix.database_charset }}
          MAILER_DSN: 'smtp://127.0.0.1:1025'
        run: php -S 127.0.0.1:8000 codeception/router.php &
      - name: Codeception (Install Process Testing)
        env:
          APP_ENV: 'codeception'
          DATABASE_URL: ${{ matrix.database_url }}
          DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
          DATABASE_CHARSET: ${{ matrix.database_charset }}
          MAILER_DSN: 'smtp://127.0.0.1:1025'
          GROUP: ${{ matrix.group }}
          SYMFONY_DEPRECATIONS_HELPER: weak
        run: vendor/bin/codecept -vvv run acceptance --env chrome,github_action -g install --html install-report.html codeception/acceptance/Plugin/E2E/${{ matrix.file }}
      - name: Hard reset ALL cache from var/cache after install
        run: |
          rm -rf var/cache
          mkdir var/cache
          chmod 777 var/cache
      - name: Codeception (Main Process Testing)
        env:
          APP_ENV: 'codeception'
          DATABASE_URL: ${{ matrix.database_url }}
          DATABASE_SERVER_VERSION: ${{ matrix.database_server_version }}
          DATABASE_CHARSET: ${{ matrix.database_charset }}
          MAILER_DSN: 'smtp://127.0.0.1:1025'
          GROUP: ${{ matrix.group }}
          SYMFONY_DEPRECATIONS_HELPER: weak
        run: vendor/bin/codecept -vvv run acceptance --env chrome,github_action -g main --html main-report.html codeception/acceptance/Plugin/E2E/${{ matrix.file }}
      - name: Upload evidence
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: codeception-${{ matrix.group }}-evidence
          path: codeception/_output/
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: codeception-${{ matrix.group }}-logs
          path: var/log/
